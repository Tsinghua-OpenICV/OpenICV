// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fproto_2fgeometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto_metadata_getter(int index);
namespace apollo {
namespace common {
class Point2D;
struct Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
struct Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
struct PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
struct PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::Point2D* Arena::CreateMaybeMessage<::apollo::common::Point2D>(Arena*);
template<> ::apollo::common::Point3D* Arena::CreateMaybeMessage<::apollo::common::Point3D>(Arena*);
template<> ::apollo::common::PointENU* Arena::CreateMaybeMessage<::apollo::common::PointENU>(Arena*);
template<> ::apollo::common::PointLLH* Arena::CreateMaybeMessage<::apollo::common::PointLLH>(Arena*);
template<> ::apollo::common::Polygon* Arena::CreateMaybeMessage<::apollo::common::Polygon>(Arena*);
template<> ::apollo::common::Quaternion* Arena::CreateMaybeMessage<::apollo::common::Quaternion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {

// ===================================================================

class PointENU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.PointENU) */ {
 public:
  inline PointENU() : PointENU(nullptr) {}
  virtual ~PointENU();
  explicit constexpr PointENU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointENU(const PointENU& from);
  PointENU(PointENU&& from) noexcept
    : PointENU() {
    *this = ::std::move(from);
  }

  inline PointENU& operator=(const PointENU& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointENU& operator=(PointENU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointENU& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointENU* internal_default_instance() {
    return reinterpret_cast<const PointENU*>(
               &_PointENU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointENU& a, PointENU& b) {
    a.Swap(&b);
  }
  inline void Swap(PointENU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointENU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointENU* New() const final {
    return CreateMaybeMessage<PointENU>(nullptr);
  }

  PointENU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointENU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointENU& from);
  void MergeFrom(const PointENU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointENU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.PointENU";
  }
  protected:
  explicit PointENU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double z = 3 [default = 0];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.PointENU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double z_;
  double x_;
  double y_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class PointLLH PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.PointLLH) */ {
 public:
  inline PointLLH() : PointLLH(nullptr) {}
  virtual ~PointLLH();
  explicit constexpr PointLLH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointLLH(const PointLLH& from);
  PointLLH(PointLLH&& from) noexcept
    : PointLLH() {
    *this = ::std::move(from);
  }

  inline PointLLH& operator=(const PointLLH& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointLLH& operator=(PointLLH&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointLLH& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointLLH* internal_default_instance() {
    return reinterpret_cast<const PointLLH*>(
               &_PointLLH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointLLH& a, PointLLH& b) {
    a.Swap(&b);
  }
  inline void Swap(PointLLH* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointLLH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointLLH* New() const final {
    return CreateMaybeMessage<PointLLH>(nullptr);
  }

  PointLLH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointLLH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointLLH& from);
  void MergeFrom(const PointLLH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointLLH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.PointLLH";
  }
  protected:
  explicit PointLLH(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 3,
    kLonFieldNumber = 1,
    kLatFieldNumber = 2,
  };
  // optional double height = 3 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double lon = 1 [default = nan];
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // optional double lat = 2 [default = nan];
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.PointLLH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double height_;
  double lon_;
  double lat_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Point2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.Point2D) */ {
 public:
  inline Point2D() : Point2D(nullptr) {}
  virtual ~Point2D();
  explicit constexpr Point2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.Point2D";
  }
  protected:
  explicit Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Point3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {}
  virtual ~Point3D();
  explicit constexpr Point3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point3D(const Point3D& from);
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3D* New() const final {
    return CreateMaybeMessage<Point3D>(nullptr);
  }

  Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.Point3D";
  }
  protected:
  explicit Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3 [default = nan];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.Point3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  virtual ~Quaternion();
  explicit constexpr Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQxFieldNumber = 1,
    kQyFieldNumber = 2,
    kQzFieldNumber = 3,
    kQwFieldNumber = 4,
  };
  // optional double qx = 1 [default = nan];
  bool has_qx() const;
  private:
  bool _internal_has_qx() const;
  public:
  void clear_qx();
  double qx() const;
  void set_qx(double value);
  private:
  double _internal_qx() const;
  void _internal_set_qx(double value);
  public:

  // optional double qy = 2 [default = nan];
  bool has_qy() const;
  private:
  bool _internal_has_qy() const;
  public:
  void clear_qy();
  double qy() const;
  void set_qy(double value);
  private:
  double _internal_qy() const;
  void _internal_set_qy(double value);
  public:

  // optional double qz = 3 [default = nan];
  bool has_qz() const;
  private:
  bool _internal_has_qz() const;
  public:
  void clear_qz();
  double qz() const;
  void set_qz(double value);
  private:
  double _internal_qz() const;
  void _internal_set_qz(double value);
  public:

  // optional double qw = 4 [default = nan];
  bool has_qw() const;
  private:
  bool _internal_has_qw() const;
  public:
  void clear_qw();
  double qw() const;
  void set_qw(double value);
  private:
  double _internal_qw() const;
  void _internal_set_qw(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double qx_;
  double qy_;
  double qz_;
  double qw_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  virtual ~Polygon();
  explicit constexpr Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .apollo.common.Point3D point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::common::Point3D* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_point();
  private:
  const ::apollo::common::Point3D& _internal_point(int index) const;
  ::apollo::common::Point3D* _internal_add_point();
  public:
  const ::apollo::common::Point3D& point(int index) const;
  ::apollo::common::Point3D* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.common.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointENU

// optional double x = 1 [default = nan];
inline bool PointENU::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointENU::has_x() const {
  return _internal_has_x();
}
inline void PointENU::clear_x() {
  x_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000002u;
}
inline double PointENU::_internal_x() const {
  return x_;
}
inline double PointENU::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointENU.x)
  return _internal_x();
}
inline void PointENU::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void PointENU::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.common.PointENU.x)
}

// optional double y = 2 [default = nan];
inline bool PointENU::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointENU::has_y() const {
  return _internal_has_y();
}
inline void PointENU::clear_y() {
  y_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000004u;
}
inline double PointENU::_internal_y() const {
  return y_;
}
inline double PointENU::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointENU.y)
  return _internal_y();
}
inline void PointENU::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void PointENU::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.common.PointENU.y)
}

// optional double z = 3 [default = 0];
inline bool PointENU::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointENU::has_z() const {
  return _internal_has_z();
}
inline void PointENU::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PointENU::_internal_z() const {
  return z_;
}
inline double PointENU::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointENU.z)
  return _internal_z();
}
inline void PointENU::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000001u;
  z_ = value;
}
inline void PointENU::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.common.PointENU.z)
}

// -------------------------------------------------------------------

// PointLLH

// optional double lon = 1 [default = nan];
inline bool PointLLH::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointLLH::has_lon() const {
  return _internal_has_lon();
}
inline void PointLLH::clear_lon() {
  lon_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000002u;
}
inline double PointLLH::_internal_lon() const {
  return lon_;
}
inline double PointLLH::lon() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointLLH.lon)
  return _internal_lon();
}
inline void PointLLH::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000002u;
  lon_ = value;
}
inline void PointLLH::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:apollo.common.PointLLH.lon)
}

// optional double lat = 2 [default = nan];
inline bool PointLLH::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointLLH::has_lat() const {
  return _internal_has_lat();
}
inline void PointLLH::clear_lat() {
  lat_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000004u;
}
inline double PointLLH::_internal_lat() const {
  return lat_;
}
inline double PointLLH::lat() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointLLH.lat)
  return _internal_lat();
}
inline void PointLLH::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000004u;
  lat_ = value;
}
inline void PointLLH::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:apollo.common.PointLLH.lat)
}

// optional double height = 3 [default = 0];
inline bool PointLLH::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointLLH::has_height() const {
  return _internal_has_height();
}
inline void PointLLH::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PointLLH::_internal_height() const {
  return height_;
}
inline double PointLLH::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.PointLLH.height)
  return _internal_height();
}
inline void PointLLH::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000001u;
  height_ = value;
}
inline void PointLLH::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.common.PointLLH.height)
}

// -------------------------------------------------------------------

// Point2D

// optional double x = 1 [default = nan];
inline bool Point2D::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point2D::has_x() const {
  return _internal_has_x();
}
inline void Point2D::clear_x() {
  x_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000001u;
}
inline double Point2D::_internal_x() const {
  return x_;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.common.Point2D.x)
}

// optional double y = 2 [default = nan];
inline bool Point2D::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point2D::has_y() const {
  return _internal_has_y();
}
inline void Point2D::clear_y() {
  y_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000002u;
}
inline double Point2D::_internal_y() const {
  return y_;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.common.Point2D.y)
}

// -------------------------------------------------------------------

// Point3D

// optional double x = 1 [default = nan];
inline bool Point3D::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point3D::has_x() const {
  return _internal_has_x();
}
inline void Point3D::clear_x() {
  x_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000001u;
}
inline double Point3D::_internal_x() const {
  return x_;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point3D.x)
  return _internal_x();
}
inline void Point3D::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point3D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.common.Point3D.x)
}

// optional double y = 2 [default = nan];
inline bool Point3D::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point3D::has_y() const {
  return _internal_has_y();
}
inline void Point3D::clear_y() {
  y_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000002u;
}
inline double Point3D::_internal_y() const {
  return y_;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point3D.y)
  return _internal_y();
}
inline void Point3D::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point3D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.common.Point3D.y)
}

// optional double z = 3 [default = nan];
inline bool Point3D::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point3D::has_z() const {
  return _internal_has_z();
}
inline void Point3D::clear_z() {
  z_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000004u;
}
inline double Point3D::_internal_z() const {
  return z_;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.Point3D.z)
  return _internal_z();
}
inline void Point3D::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Point3D::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.common.Point3D.z)
}

// -------------------------------------------------------------------

// Quaternion

// optional double qx = 1 [default = nan];
inline bool Quaternion::_internal_has_qx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Quaternion::has_qx() const {
  return _internal_has_qx();
}
inline void Quaternion::clear_qx() {
  qx_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000001u;
}
inline double Quaternion::_internal_qx() const {
  return qx_;
}
inline double Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qx)
  return _internal_qx();
}
inline void Quaternion::_internal_set_qx(double value) {
  _has_bits_[0] |= 0x00000001u;
  qx_ = value;
}
inline void Quaternion::set_qx(double value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qx)
}

// optional double qy = 2 [default = nan];
inline bool Quaternion::_internal_has_qy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Quaternion::has_qy() const {
  return _internal_has_qy();
}
inline void Quaternion::clear_qy() {
  qy_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000002u;
}
inline double Quaternion::_internal_qy() const {
  return qy_;
}
inline double Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qy)
  return _internal_qy();
}
inline void Quaternion::_internal_set_qy(double value) {
  _has_bits_[0] |= 0x00000002u;
  qy_ = value;
}
inline void Quaternion::set_qy(double value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qy)
}

// optional double qz = 3 [default = nan];
inline bool Quaternion::_internal_has_qz() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Quaternion::has_qz() const {
  return _internal_has_qz();
}
inline void Quaternion::clear_qz() {
  qz_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000004u;
}
inline double Quaternion::_internal_qz() const {
  return qz_;
}
inline double Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qz)
  return _internal_qz();
}
inline void Quaternion::_internal_set_qz(double value) {
  _has_bits_[0] |= 0x00000004u;
  qz_ = value;
}
inline void Quaternion::set_qz(double value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qz)
}

// optional double qw = 4 [default = nan];
inline bool Quaternion::_internal_has_qw() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Quaternion::has_qw() const {
  return _internal_has_qw();
}
inline void Quaternion::clear_qw() {
  qw_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000008u;
}
inline double Quaternion::_internal_qw() const {
  return qw_;
}
inline double Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:apollo.common.Quaternion.qw)
  return _internal_qw();
}
inline void Quaternion::_internal_set_qw(double value) {
  _has_bits_[0] |= 0x00000008u;
  qw_ = value;
}
inline void Quaternion::set_qw(double value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:apollo.common.Quaternion.qw)
}

// -------------------------------------------------------------------

// Polygon

// repeated .apollo.common.Point3D point = 1;
inline int Polygon::_internal_point_size() const {
  return point_.size();
}
inline int Polygon::point_size() const {
  return _internal_point_size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline ::apollo::common::Point3D* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Polygon.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Polygon.point)
  return &point_;
}
inline const ::apollo::common::Point3D& Polygon::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::apollo::common::Point3D& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Polygon.point)
  return _internal_point(index);
}
inline ::apollo::common::Point3D* Polygon::_internal_add_point() {
  return point_.Add();
}
inline ::apollo::common::Point3D* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:apollo.common.Polygon.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:apollo.common.Polygon.point)
  return point_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fgeometry_2eproto
