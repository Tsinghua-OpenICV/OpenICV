// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_overlap.proto

#include "modules/map/proto/map_overlap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace hdmap {
constexpr LaneOverlapInfo::LaneOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : region_overlap_id_(nullptr)
  , start_s_(0)
  , end_s_(0)
  , is_merge_(false){}
struct LaneOverlapInfoDefaultTypeInternal {
  constexpr LaneOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneOverlapInfoDefaultTypeInternal() {}
  union {
    LaneOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneOverlapInfoDefaultTypeInternal _LaneOverlapInfo_default_instance_;
constexpr SignalOverlapInfo::SignalOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SignalOverlapInfoDefaultTypeInternal {
  constexpr SignalOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalOverlapInfoDefaultTypeInternal() {}
  union {
    SignalOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalOverlapInfoDefaultTypeInternal _SignalOverlapInfo_default_instance_;
constexpr StopSignOverlapInfo::StopSignOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StopSignOverlapInfoDefaultTypeInternal {
  constexpr StopSignOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopSignOverlapInfoDefaultTypeInternal() {}
  union {
    StopSignOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopSignOverlapInfoDefaultTypeInternal _StopSignOverlapInfo_default_instance_;
constexpr CrosswalkOverlapInfo::CrosswalkOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : region_overlap_id_(nullptr){}
struct CrosswalkOverlapInfoDefaultTypeInternal {
  constexpr CrosswalkOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CrosswalkOverlapInfoDefaultTypeInternal() {}
  union {
    CrosswalkOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CrosswalkOverlapInfoDefaultTypeInternal _CrosswalkOverlapInfo_default_instance_;
constexpr JunctionOverlapInfo::JunctionOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct JunctionOverlapInfoDefaultTypeInternal {
  constexpr JunctionOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JunctionOverlapInfoDefaultTypeInternal() {}
  union {
    JunctionOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JunctionOverlapInfoDefaultTypeInternal _JunctionOverlapInfo_default_instance_;
constexpr YieldOverlapInfo::YieldOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct YieldOverlapInfoDefaultTypeInternal {
  constexpr YieldOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~YieldOverlapInfoDefaultTypeInternal() {}
  union {
    YieldOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT YieldOverlapInfoDefaultTypeInternal _YieldOverlapInfo_default_instance_;
constexpr ClearAreaOverlapInfo::ClearAreaOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClearAreaOverlapInfoDefaultTypeInternal {
  constexpr ClearAreaOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearAreaOverlapInfoDefaultTypeInternal() {}
  union {
    ClearAreaOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearAreaOverlapInfoDefaultTypeInternal _ClearAreaOverlapInfo_default_instance_;
constexpr SpeedBumpOverlapInfo::SpeedBumpOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SpeedBumpOverlapInfoDefaultTypeInternal {
  constexpr SpeedBumpOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedBumpOverlapInfoDefaultTypeInternal() {}
  union {
    SpeedBumpOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedBumpOverlapInfoDefaultTypeInternal _SpeedBumpOverlapInfo_default_instance_;
constexpr ParkingSpaceOverlapInfo::ParkingSpaceOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ParkingSpaceOverlapInfoDefaultTypeInternal {
  constexpr ParkingSpaceOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParkingSpaceOverlapInfoDefaultTypeInternal() {}
  union {
    ParkingSpaceOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParkingSpaceOverlapInfoDefaultTypeInternal _ParkingSpaceOverlapInfo_default_instance_;
constexpr PNCJunctionOverlapInfo::PNCJunctionOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PNCJunctionOverlapInfoDefaultTypeInternal {
  constexpr PNCJunctionOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PNCJunctionOverlapInfoDefaultTypeInternal() {}
  union {
    PNCJunctionOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PNCJunctionOverlapInfoDefaultTypeInternal _PNCJunctionOverlapInfo_default_instance_;
constexpr RegionOverlapInfo::RegionOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygon_()
  , id_(nullptr){}
struct RegionOverlapInfoDefaultTypeInternal {
  constexpr RegionOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionOverlapInfoDefaultTypeInternal() {}
  union {
    RegionOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionOverlapInfoDefaultTypeInternal _RegionOverlapInfo_default_instance_;
constexpr ObjectOverlapInfo::ObjectOverlapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , _oneof_case_{}{}
struct ObjectOverlapInfoDefaultTypeInternal {
  constexpr ObjectOverlapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectOverlapInfoDefaultTypeInternal() {}
  union {
    ObjectOverlapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectOverlapInfoDefaultTypeInternal _ObjectOverlapInfo_default_instance_;
constexpr Overlap::Overlap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_()
  , region_overlap_()
  , id_(nullptr){}
struct OverlapDefaultTypeInternal {
  constexpr OverlapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OverlapDefaultTypeInternal() {}
  union {
    Overlap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OverlapDefaultTypeInternal _Overlap_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_5foverlap_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5foverlap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5foverlap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fmap_2fproto_2fmap_5foverlap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneOverlapInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneOverlapInfo, start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneOverlapInfo, end_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneOverlapInfo, is_merge_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneOverlapInfo, region_overlap_id_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SignalOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StopSignOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::CrosswalkOverlapInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::CrosswalkOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::CrosswalkOverlapInfo, region_overlap_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::JunctionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::YieldOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ClearAreaOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedBumpOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ParkingSpaceOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PNCJunctionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RegionOverlapInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RegionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RegionOverlapInfo, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RegionOverlapInfo, polygon_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ObjectOverlapInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ObjectOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ObjectOverlapInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ObjectOverlapInfo, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ObjectOverlapInfo, overlap_info_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Overlap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Overlap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Overlap, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Overlap, object_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Overlap, region_overlap_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::hdmap::LaneOverlapInfo)},
  { 13, -1, sizeof(::apollo::hdmap::SignalOverlapInfo)},
  { 18, -1, sizeof(::apollo::hdmap::StopSignOverlapInfo)},
  { 23, 29, sizeof(::apollo::hdmap::CrosswalkOverlapInfo)},
  { 30, -1, sizeof(::apollo::hdmap::JunctionOverlapInfo)},
  { 35, -1, sizeof(::apollo::hdmap::YieldOverlapInfo)},
  { 40, -1, sizeof(::apollo::hdmap::ClearAreaOverlapInfo)},
  { 45, -1, sizeof(::apollo::hdmap::SpeedBumpOverlapInfo)},
  { 50, -1, sizeof(::apollo::hdmap::ParkingSpaceOverlapInfo)},
  { 55, -1, sizeof(::apollo::hdmap::PNCJunctionOverlapInfo)},
  { 60, 67, sizeof(::apollo::hdmap::RegionOverlapInfo)},
  { 69, 86, sizeof(::apollo::hdmap::ObjectOverlapInfo)},
  { 97, 105, sizeof(::apollo::hdmap::Overlap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_LaneOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_SignalOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_StopSignOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_CrosswalkOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_JunctionOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_YieldOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_ClearAreaOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_SpeedBumpOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_ParkingSpaceOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_PNCJunctionOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_RegionOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_ObjectOverlapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_Overlap_default_instance_),
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5foverlap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#modules/map/proto/map_overlap.proto\022\014a"
  "pollo.hdmap\032\036modules/map/proto/map_id.pr"
  "oto\032$modules/map/proto/map_geometry.prot"
  "o\"p\n\017LaneOverlapInfo\022\017\n\007start_s\030\001 \001(\001\022\r\n"
  "\005end_s\030\002 \001(\001\022\020\n\010is_merge\030\003 \001(\010\022+\n\021region"
  "_overlap_id\030\004 \001(\0132\020.apollo.hdmap.Id\"\023\n\021S"
  "ignalOverlapInfo\"\025\n\023StopSignOverlapInfo\""
  "C\n\024CrosswalkOverlapInfo\022+\n\021region_overla"
  "p_id\030\001 \001(\0132\020.apollo.hdmap.Id\"\025\n\023Junction"
  "OverlapInfo\"\022\n\020YieldOverlapInfo\"\026\n\024Clear"
  "AreaOverlapInfo\"\026\n\024SpeedBumpOverlapInfo\""
  "\031\n\027ParkingSpaceOverlapInfo\"\030\n\026PNCJunctio"
  "nOverlapInfo\"Y\n\021RegionOverlapInfo\022\034\n\002id\030"
  "\001 \001(\0132\020.apollo.hdmap.Id\022&\n\007polygon\030\002 \003(\013"
  "2\025.apollo.hdmap.Polygon\"\365\005\n\021ObjectOverla"
  "pInfo\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\022:\n\021l"
  "ane_overlap_info\030\003 \001(\0132\035.apollo.hdmap.La"
  "neOverlapInfoH\000\022>\n\023signal_overlap_info\030\004"
  " \001(\0132\037.apollo.hdmap.SignalOverlapInfoH\000\022"
  "C\n\026stop_sign_overlap_info\030\005 \001(\0132!.apollo"
  ".hdmap.StopSignOverlapInfoH\000\022D\n\026crosswal"
  "k_overlap_info\030\006 \001(\0132\".apollo.hdmap.Cros"
  "swalkOverlapInfoH\000\022B\n\025junction_overlap_i"
  "nfo\030\007 \001(\0132!.apollo.hdmap.JunctionOverlap"
  "InfoH\000\022A\n\027yield_sign_overlap_info\030\010 \001(\0132"
  "\036.apollo.hdmap.YieldOverlapInfoH\000\022E\n\027cle"
  "ar_area_overlap_info\030\t \001(\0132\".apollo.hdma"
  "p.ClearAreaOverlapInfoH\000\022E\n\027speed_bump_o"
  "verlap_info\030\n \001(\0132\".apollo.hdmap.SpeedBu"
  "mpOverlapInfoH\000\022K\n\032parking_space_overlap"
  "_info\030\013 \001(\0132%.apollo.hdmap.ParkingSpaceO"
  "verlapInfoH\000\022I\n\031pnc_junction_overlap_inf"
  "o\030\014 \001(\0132$.apollo.hdmap.PNCJunctionOverla"
  "pInfoH\000B\016\n\014overlap_info\"\221\001\n\007Overlap\022\034\n\002i"
  "d\030\001 \001(\0132\020.apollo.hdmap.Id\022/\n\006object\030\002 \003("
  "\0132\037.apollo.hdmap.ObjectOverlapInfo\0227\n\016re"
  "gion_overlap\030\003 \003(\0132\037.apollo.hdmap.Region"
  "OverlapInfo"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto_deps[2] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto = {
  false, false, 1491, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5foverlap_2eproto, "modules/map/proto/map_overlap.proto", 
  &descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto_deps, 2, 13,
  schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_5foverlap_2eproto::offsets,
  file_level_metadata_modules_2fmap_2fproto_2fmap_5foverlap_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5foverlap_2eproto, file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5foverlap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto);
  return descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_5foverlap_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto);
namespace apollo {
namespace hdmap {

// ===================================================================

class LaneOverlapInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneOverlapInfo>()._has_bits_);
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_merge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::hdmap::Id& region_overlap_id(const LaneOverlapInfo* msg);
  static void set_has_region_overlap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Id&
LaneOverlapInfo::_Internal::region_overlap_id(const LaneOverlapInfo* msg) {
  return *msg->region_overlap_id_;
}
void LaneOverlapInfo::clear_region_overlap_id() {
  if (region_overlap_id_ != nullptr) region_overlap_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LaneOverlapInfo::LaneOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.LaneOverlapInfo)
}
LaneOverlapInfo::LaneOverlapInfo(const LaneOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_overlap_id()) {
    region_overlap_id_ = new ::apollo::hdmap::Id(*from.region_overlap_id_);
  } else {
    region_overlap_id_ = nullptr;
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_merge_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(is_merge_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneOverlapInfo)
}

void LaneOverlapInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_overlap_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_merge_) -
    reinterpret_cast<char*>(&region_overlap_id_)) + sizeof(is_merge_));
}

LaneOverlapInfo::~LaneOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_overlap_id_;
}

void LaneOverlapInfo::ArenaDtor(void* object) {
  LaneOverlapInfo* _this = reinterpret_cast< LaneOverlapInfo* >(object);
  (void)_this;
}
void LaneOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_overlap_id_ != nullptr);
    region_overlap_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_merge_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(is_merge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_merge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_merge(&has_bits);
          is_merge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Id region_overlap_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_overlap_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_s(), target);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_s(), target);
  }

  // optional bool is_merge = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_merge(), target);
  }

  // optional .apollo.hdmap.Id region_overlap_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::region_overlap_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneOverlapInfo)
  return target;
}

size_t LaneOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.hdmap.Id region_overlap_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_overlap_id_);
    }

    // optional double start_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool is_merge = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LaneOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LaneOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LaneOverlapInfo)
    MergeFrom(*source);
  }
}

void LaneOverlapInfo::MergeFrom(const LaneOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_region_overlap_id()->::apollo::hdmap::Id::MergeFrom(from._internal_region_overlap_id());
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_merge_ = from.is_merge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LaneOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneOverlapInfo::CopyFrom(const LaneOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneOverlapInfo::IsInitialized() const {
  return true;
}

void LaneOverlapInfo::InternalSwap(LaneOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneOverlapInfo, is_merge_)
      + sizeof(LaneOverlapInfo::is_merge_)
      - PROTOBUF_FIELD_OFFSET(LaneOverlapInfo, region_overlap_id_)>(
          reinterpret_cast<char*>(&region_overlap_id_),
          reinterpret_cast<char*>(&other->region_overlap_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalOverlapInfo::_Internal {
 public:
};

SignalOverlapInfo::SignalOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.SignalOverlapInfo)
}
SignalOverlapInfo::SignalOverlapInfo(const SignalOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.SignalOverlapInfo)
}

void SignalOverlapInfo::SharedCtor() {
}

SignalOverlapInfo::~SignalOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.SignalOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalOverlapInfo::ArenaDtor(void* object) {
  SignalOverlapInfo* _this = reinterpret_cast< SignalOverlapInfo* >(object);
  (void)_this;
}
void SignalOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.SignalOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.SignalOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.SignalOverlapInfo)
  return target;
}

size_t SignalOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.SignalOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.SignalOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.SignalOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.SignalOverlapInfo)
    MergeFrom(*source);
  }
}

void SignalOverlapInfo::MergeFrom(const SignalOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.SignalOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SignalOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.SignalOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalOverlapInfo::CopyFrom(const SignalOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.SignalOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalOverlapInfo::IsInitialized() const {
  return true;
}

void SignalOverlapInfo::InternalSwap(SignalOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopSignOverlapInfo::_Internal {
 public:
};

StopSignOverlapInfo::StopSignOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.StopSignOverlapInfo)
}
StopSignOverlapInfo::StopSignOverlapInfo(const StopSignOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.StopSignOverlapInfo)
}

void StopSignOverlapInfo::SharedCtor() {
}

StopSignOverlapInfo::~StopSignOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.StopSignOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopSignOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopSignOverlapInfo::ArenaDtor(void* object) {
  StopSignOverlapInfo* _this = reinterpret_cast< StopSignOverlapInfo* >(object);
  (void)_this;
}
void StopSignOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopSignOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopSignOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.StopSignOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSignOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSignOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.StopSignOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.StopSignOverlapInfo)
  return target;
}

size_t StopSignOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.StopSignOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSignOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.StopSignOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopSignOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.StopSignOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.StopSignOverlapInfo)
    MergeFrom(*source);
  }
}

void StopSignOverlapInfo::MergeFrom(const StopSignOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.StopSignOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopSignOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.StopSignOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignOverlapInfo::CopyFrom(const StopSignOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.StopSignOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignOverlapInfo::IsInitialized() const {
  return true;
}

void StopSignOverlapInfo::InternalSwap(StopSignOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSignOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CrosswalkOverlapInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CrosswalkOverlapInfo>()._has_bits_);
  static const ::apollo::hdmap::Id& region_overlap_id(const CrosswalkOverlapInfo* msg);
  static void set_has_region_overlap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Id&
CrosswalkOverlapInfo::_Internal::region_overlap_id(const CrosswalkOverlapInfo* msg) {
  return *msg->region_overlap_id_;
}
void CrosswalkOverlapInfo::clear_region_overlap_id() {
  if (region_overlap_id_ != nullptr) region_overlap_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CrosswalkOverlapInfo::CrosswalkOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.CrosswalkOverlapInfo)
}
CrosswalkOverlapInfo::CrosswalkOverlapInfo(const CrosswalkOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_overlap_id()) {
    region_overlap_id_ = new ::apollo::hdmap::Id(*from.region_overlap_id_);
  } else {
    region_overlap_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.CrosswalkOverlapInfo)
}

void CrosswalkOverlapInfo::SharedCtor() {
region_overlap_id_ = nullptr;
}

CrosswalkOverlapInfo::~CrosswalkOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.CrosswalkOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrosswalkOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_overlap_id_;
}

void CrosswalkOverlapInfo::ArenaDtor(void* object) {
  CrosswalkOverlapInfo* _this = reinterpret_cast< CrosswalkOverlapInfo* >(object);
  (void)_this;
}
void CrosswalkOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrosswalkOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrosswalkOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.CrosswalkOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_overlap_id_ != nullptr);
    region_overlap_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrosswalkOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id region_overlap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_overlap_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrosswalkOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.CrosswalkOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id region_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_overlap_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.CrosswalkOverlapInfo)
  return target;
}

size_t CrosswalkOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.CrosswalkOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.Id region_overlap_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_overlap_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrosswalkOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.CrosswalkOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.CrosswalkOverlapInfo)
    MergeFrom(*source);
  }
}

void CrosswalkOverlapInfo::MergeFrom(const CrosswalkOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_region_overlap_id()) {
    _internal_mutable_region_overlap_id()->::apollo::hdmap::Id::MergeFrom(from._internal_region_overlap_id());
  }
}

void CrosswalkOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkOverlapInfo::CopyFrom(const CrosswalkOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.CrosswalkOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkOverlapInfo::IsInitialized() const {
  return true;
}

void CrosswalkOverlapInfo::InternalSwap(CrosswalkOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_overlap_id_, other->region_overlap_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrosswalkOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JunctionOverlapInfo::_Internal {
 public:
};

JunctionOverlapInfo::JunctionOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.JunctionOverlapInfo)
}
JunctionOverlapInfo::JunctionOverlapInfo(const JunctionOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.JunctionOverlapInfo)
}

void JunctionOverlapInfo::SharedCtor() {
}

JunctionOverlapInfo::~JunctionOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.JunctionOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JunctionOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JunctionOverlapInfo::ArenaDtor(void* object) {
  JunctionOverlapInfo* _this = reinterpret_cast< JunctionOverlapInfo* >(object);
  (void)_this;
}
void JunctionOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JunctionOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JunctionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.JunctionOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JunctionOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JunctionOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.JunctionOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.JunctionOverlapInfo)
  return target;
}

size_t JunctionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.JunctionOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JunctionOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.JunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JunctionOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.JunctionOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.JunctionOverlapInfo)
    MergeFrom(*source);
  }
}

void JunctionOverlapInfo::MergeFrom(const JunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.JunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void JunctionOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.JunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionOverlapInfo::CopyFrom(const JunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.JunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionOverlapInfo::IsInitialized() const {
  return true;
}

void JunctionOverlapInfo::InternalSwap(JunctionOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class YieldOverlapInfo::_Internal {
 public:
};

YieldOverlapInfo::YieldOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.YieldOverlapInfo)
}
YieldOverlapInfo::YieldOverlapInfo(const YieldOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.YieldOverlapInfo)
}

void YieldOverlapInfo::SharedCtor() {
}

YieldOverlapInfo::~YieldOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.YieldOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void YieldOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void YieldOverlapInfo::ArenaDtor(void* object) {
  YieldOverlapInfo* _this = reinterpret_cast< YieldOverlapInfo* >(object);
  (void)_this;
}
void YieldOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YieldOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void YieldOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.YieldOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YieldOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YieldOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.YieldOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.YieldOverlapInfo)
  return target;
}

size_t YieldOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.YieldOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YieldOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.YieldOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const YieldOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YieldOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.YieldOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.YieldOverlapInfo)
    MergeFrom(*source);
  }
}

void YieldOverlapInfo::MergeFrom(const YieldOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.YieldOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void YieldOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.YieldOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YieldOverlapInfo::CopyFrom(const YieldOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.YieldOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldOverlapInfo::IsInitialized() const {
  return true;
}

void YieldOverlapInfo::InternalSwap(YieldOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YieldOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClearAreaOverlapInfo::_Internal {
 public:
};

ClearAreaOverlapInfo::ClearAreaOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.ClearAreaOverlapInfo)
}
ClearAreaOverlapInfo::ClearAreaOverlapInfo(const ClearAreaOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ClearAreaOverlapInfo)
}

void ClearAreaOverlapInfo::SharedCtor() {
}

ClearAreaOverlapInfo::~ClearAreaOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ClearAreaOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearAreaOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearAreaOverlapInfo::ArenaDtor(void* object) {
  ClearAreaOverlapInfo* _this = reinterpret_cast< ClearAreaOverlapInfo* >(object);
  (void)_this;
}
void ClearAreaOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearAreaOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearAreaOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ClearAreaOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearAreaOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearAreaOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ClearAreaOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ClearAreaOverlapInfo)
  return target;
}

size_t ClearAreaOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ClearAreaOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearAreaOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearAreaOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearAreaOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ClearAreaOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ClearAreaOverlapInfo)
    MergeFrom(*source);
  }
}

void ClearAreaOverlapInfo::MergeFrom(const ClearAreaOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearAreaOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearAreaOverlapInfo::CopyFrom(const ClearAreaOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ClearAreaOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAreaOverlapInfo::IsInitialized() const {
  return true;
}

void ClearAreaOverlapInfo::InternalSwap(ClearAreaOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearAreaOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpeedBumpOverlapInfo::_Internal {
 public:
};

SpeedBumpOverlapInfo::SpeedBumpOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.SpeedBumpOverlapInfo)
}
SpeedBumpOverlapInfo::SpeedBumpOverlapInfo(const SpeedBumpOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.SpeedBumpOverlapInfo)
}

void SpeedBumpOverlapInfo::SharedCtor() {
}

SpeedBumpOverlapInfo::~SpeedBumpOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.SpeedBumpOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedBumpOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeedBumpOverlapInfo::ArenaDtor(void* object) {
  SpeedBumpOverlapInfo* _this = reinterpret_cast< SpeedBumpOverlapInfo* >(object);
  (void)_this;
}
void SpeedBumpOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedBumpOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedBumpOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.SpeedBumpOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedBumpOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedBumpOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.SpeedBumpOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.SpeedBumpOverlapInfo)
  return target;
}

size_t SpeedBumpOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.SpeedBumpOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedBumpOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBumpOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedBumpOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.SpeedBumpOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.SpeedBumpOverlapInfo)
    MergeFrom(*source);
  }
}

void SpeedBumpOverlapInfo::MergeFrom(const SpeedBumpOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SpeedBumpOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBumpOverlapInfo::CopyFrom(const SpeedBumpOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.SpeedBumpOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBumpOverlapInfo::IsInitialized() const {
  return true;
}

void SpeedBumpOverlapInfo::InternalSwap(SpeedBumpOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedBumpOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParkingSpaceOverlapInfo::_Internal {
 public:
};

ParkingSpaceOverlapInfo::ParkingSpaceOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.ParkingSpaceOverlapInfo)
}
ParkingSpaceOverlapInfo::ParkingSpaceOverlapInfo(const ParkingSpaceOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ParkingSpaceOverlapInfo)
}

void ParkingSpaceOverlapInfo::SharedCtor() {
}

ParkingSpaceOverlapInfo::~ParkingSpaceOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ParkingSpaceOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingSpaceOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParkingSpaceOverlapInfo::ArenaDtor(void* object) {
  ParkingSpaceOverlapInfo* _this = reinterpret_cast< ParkingSpaceOverlapInfo* >(object);
  (void)_this;
}
void ParkingSpaceOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingSpaceOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParkingSpaceOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingSpaceOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingSpaceOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ParkingSpaceOverlapInfo)
  return target;
}

size_t ParkingSpaceOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSpaceOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpaceOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingSpaceOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ParkingSpaceOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ParkingSpaceOverlapInfo)
    MergeFrom(*source);
  }
}

void ParkingSpaceOverlapInfo::MergeFrom(const ParkingSpaceOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ParkingSpaceOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpaceOverlapInfo::CopyFrom(const ParkingSpaceOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ParkingSpaceOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpaceOverlapInfo::IsInitialized() const {
  return true;
}

void ParkingSpaceOverlapInfo::InternalSwap(ParkingSpaceOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSpaceOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PNCJunctionOverlapInfo::_Internal {
 public:
};

PNCJunctionOverlapInfo::PNCJunctionOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.PNCJunctionOverlapInfo)
}
PNCJunctionOverlapInfo::PNCJunctionOverlapInfo(const PNCJunctionOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.PNCJunctionOverlapInfo)
}

void PNCJunctionOverlapInfo::SharedCtor() {
}

PNCJunctionOverlapInfo::~PNCJunctionOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.PNCJunctionOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PNCJunctionOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PNCJunctionOverlapInfo::ArenaDtor(void* object) {
  PNCJunctionOverlapInfo* _this = reinterpret_cast< PNCJunctionOverlapInfo* >(object);
  (void)_this;
}
void PNCJunctionOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PNCJunctionOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PNCJunctionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.PNCJunctionOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PNCJunctionOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PNCJunctionOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.PNCJunctionOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.PNCJunctionOverlapInfo)
  return target;
}

size_t PNCJunctionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.PNCJunctionOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNCJunctionOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PNCJunctionOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PNCJunctionOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.PNCJunctionOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.PNCJunctionOverlapInfo)
    MergeFrom(*source);
  }
}

void PNCJunctionOverlapInfo::MergeFrom(const PNCJunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PNCJunctionOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNCJunctionOverlapInfo::CopyFrom(const PNCJunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.PNCJunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNCJunctionOverlapInfo::IsInitialized() const {
  return true;
}

void PNCJunctionOverlapInfo::InternalSwap(PNCJunctionOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PNCJunctionOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegionOverlapInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionOverlapInfo>()._has_bits_);
  static const ::apollo::hdmap::Id& id(const RegionOverlapInfo* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Id&
RegionOverlapInfo::_Internal::id(const RegionOverlapInfo* msg) {
  return *msg->id_;
}
void RegionOverlapInfo::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RegionOverlapInfo::clear_polygon() {
  polygon_.Clear();
}
RegionOverlapInfo::RegionOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polygon_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.RegionOverlapInfo)
}
RegionOverlapInfo::RegionOverlapInfo(const RegionOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RegionOverlapInfo)
}

void RegionOverlapInfo::SharedCtor() {
id_ = nullptr;
}

RegionOverlapInfo::~RegionOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RegionOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void RegionOverlapInfo::ArenaDtor(void* object) {
  RegionOverlapInfo* _this = reinterpret_cast< RegionOverlapInfo* >(object);
  (void)_this;
}
void RegionOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RegionOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Polygon polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RegionOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .apollo.hdmap.Polygon polygon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_polygon(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RegionOverlapInfo)
  return target;
}

size_t RegionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RegionOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Polygon polygon = 2;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.Id id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RegionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RegionOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RegionOverlapInfo)
    MergeFrom(*source);
  }
}

void RegionOverlapInfo::MergeFrom(const RegionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RegionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
  }
}

void RegionOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RegionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionOverlapInfo::CopyFrom(const RegionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RegionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOverlapInfo::IsInitialized() const {
  return true;
}

void RegionOverlapInfo::InternalSwap(RegionOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_.InternalSwap(&other->polygon_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectOverlapInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectOverlapInfo>()._has_bits_);
  static const ::apollo::hdmap::Id& id(const ObjectOverlapInfo* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::LaneOverlapInfo& lane_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::SignalOverlapInfo& signal_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::StopSignOverlapInfo& stop_sign_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::CrosswalkOverlapInfo& crosswalk_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::JunctionOverlapInfo& junction_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::YieldOverlapInfo& yield_sign_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::ClearAreaOverlapInfo& clear_area_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::SpeedBumpOverlapInfo& speed_bump_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::ParkingSpaceOverlapInfo& parking_space_overlap_info(const ObjectOverlapInfo* msg);
  static const ::apollo::hdmap::PNCJunctionOverlapInfo& pnc_junction_overlap_info(const ObjectOverlapInfo* msg);
};

const ::apollo::hdmap::Id&
ObjectOverlapInfo::_Internal::id(const ObjectOverlapInfo* msg) {
  return *msg->id_;
}
const ::apollo::hdmap::LaneOverlapInfo&
ObjectOverlapInfo::_Internal::lane_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.lane_overlap_info_;
}
const ::apollo::hdmap::SignalOverlapInfo&
ObjectOverlapInfo::_Internal::signal_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.signal_overlap_info_;
}
const ::apollo::hdmap::StopSignOverlapInfo&
ObjectOverlapInfo::_Internal::stop_sign_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.stop_sign_overlap_info_;
}
const ::apollo::hdmap::CrosswalkOverlapInfo&
ObjectOverlapInfo::_Internal::crosswalk_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.crosswalk_overlap_info_;
}
const ::apollo::hdmap::JunctionOverlapInfo&
ObjectOverlapInfo::_Internal::junction_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.junction_overlap_info_;
}
const ::apollo::hdmap::YieldOverlapInfo&
ObjectOverlapInfo::_Internal::yield_sign_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.yield_sign_overlap_info_;
}
const ::apollo::hdmap::ClearAreaOverlapInfo&
ObjectOverlapInfo::_Internal::clear_area_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.clear_area_overlap_info_;
}
const ::apollo::hdmap::SpeedBumpOverlapInfo&
ObjectOverlapInfo::_Internal::speed_bump_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.speed_bump_overlap_info_;
}
const ::apollo::hdmap::ParkingSpaceOverlapInfo&
ObjectOverlapInfo::_Internal::parking_space_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.parking_space_overlap_info_;
}
const ::apollo::hdmap::PNCJunctionOverlapInfo&
ObjectOverlapInfo::_Internal::pnc_junction_overlap_info(const ObjectOverlapInfo* msg) {
  return *msg->overlap_info_.pnc_junction_overlap_info_;
}
void ObjectOverlapInfo::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectOverlapInfo::set_allocated_lane_overlap_info(::apollo::hdmap::LaneOverlapInfo* lane_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (lane_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lane_overlap_info);
    if (message_arena != submessage_arena) {
      lane_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_overlap_info, submessage_arena);
    }
    set_has_lane_overlap_info();
    overlap_info_.lane_overlap_info_ = lane_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.lane_overlap_info)
}
void ObjectOverlapInfo::set_allocated_signal_overlap_info(::apollo::hdmap::SignalOverlapInfo* signal_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (signal_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signal_overlap_info);
    if (message_arena != submessage_arena) {
      signal_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_overlap_info, submessage_arena);
    }
    set_has_signal_overlap_info();
    overlap_info_.signal_overlap_info_ = signal_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.signal_overlap_info)
}
void ObjectOverlapInfo::set_allocated_stop_sign_overlap_info(::apollo::hdmap::StopSignOverlapInfo* stop_sign_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (stop_sign_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_sign_overlap_info);
    if (message_arena != submessage_arena) {
      stop_sign_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_sign_overlap_info, submessage_arena);
    }
    set_has_stop_sign_overlap_info();
    overlap_info_.stop_sign_overlap_info_ = stop_sign_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.stop_sign_overlap_info)
}
void ObjectOverlapInfo::set_allocated_crosswalk_overlap_info(::apollo::hdmap::CrosswalkOverlapInfo* crosswalk_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (crosswalk_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crosswalk_overlap_info);
    if (message_arena != submessage_arena) {
      crosswalk_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosswalk_overlap_info, submessage_arena);
    }
    set_has_crosswalk_overlap_info();
    overlap_info_.crosswalk_overlap_info_ = crosswalk_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.crosswalk_overlap_info)
}
void ObjectOverlapInfo::set_allocated_junction_overlap_info(::apollo::hdmap::JunctionOverlapInfo* junction_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (junction_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(junction_overlap_info);
    if (message_arena != submessage_arena) {
      junction_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, junction_overlap_info, submessage_arena);
    }
    set_has_junction_overlap_info();
    overlap_info_.junction_overlap_info_ = junction_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.junction_overlap_info)
}
void ObjectOverlapInfo::set_allocated_yield_sign_overlap_info(::apollo::hdmap::YieldOverlapInfo* yield_sign_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (yield_sign_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(yield_sign_overlap_info);
    if (message_arena != submessage_arena) {
      yield_sign_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield_sign_overlap_info, submessage_arena);
    }
    set_has_yield_sign_overlap_info();
    overlap_info_.yield_sign_overlap_info_ = yield_sign_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.yield_sign_overlap_info)
}
void ObjectOverlapInfo::set_allocated_clear_area_overlap_info(::apollo::hdmap::ClearAreaOverlapInfo* clear_area_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (clear_area_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_area_overlap_info);
    if (message_arena != submessage_arena) {
      clear_area_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_area_overlap_info, submessage_arena);
    }
    set_has_clear_area_overlap_info();
    overlap_info_.clear_area_overlap_info_ = clear_area_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.clear_area_overlap_info)
}
void ObjectOverlapInfo::set_allocated_speed_bump_overlap_info(::apollo::hdmap::SpeedBumpOverlapInfo* speed_bump_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (speed_bump_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speed_bump_overlap_info);
    if (message_arena != submessage_arena) {
      speed_bump_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_bump_overlap_info, submessage_arena);
    }
    set_has_speed_bump_overlap_info();
    overlap_info_.speed_bump_overlap_info_ = speed_bump_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.speed_bump_overlap_info)
}
void ObjectOverlapInfo::set_allocated_parking_space_overlap_info(::apollo::hdmap::ParkingSpaceOverlapInfo* parking_space_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (parking_space_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parking_space_overlap_info);
    if (message_arena != submessage_arena) {
      parking_space_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_space_overlap_info, submessage_arena);
    }
    set_has_parking_space_overlap_info();
    overlap_info_.parking_space_overlap_info_ = parking_space_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.parking_space_overlap_info)
}
void ObjectOverlapInfo::set_allocated_pnc_junction_overlap_info(::apollo::hdmap::PNCJunctionOverlapInfo* pnc_junction_overlap_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_overlap_info();
  if (pnc_junction_overlap_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pnc_junction_overlap_info);
    if (message_arena != submessage_arena) {
      pnc_junction_overlap_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pnc_junction_overlap_info, submessage_arena);
    }
    set_has_pnc_junction_overlap_info();
    overlap_info_.pnc_junction_overlap_info_ = pnc_junction_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ObjectOverlapInfo.pnc_junction_overlap_info)
}
ObjectOverlapInfo::ObjectOverlapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.ObjectOverlapInfo)
}
ObjectOverlapInfo::ObjectOverlapInfo(const ObjectOverlapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  clear_has_overlap_info();
  switch (from.overlap_info_case()) {
    case kLaneOverlapInfo: {
      _internal_mutable_lane_overlap_info()->::apollo::hdmap::LaneOverlapInfo::MergeFrom(from._internal_lane_overlap_info());
      break;
    }
    case kSignalOverlapInfo: {
      _internal_mutable_signal_overlap_info()->::apollo::hdmap::SignalOverlapInfo::MergeFrom(from._internal_signal_overlap_info());
      break;
    }
    case kStopSignOverlapInfo: {
      _internal_mutable_stop_sign_overlap_info()->::apollo::hdmap::StopSignOverlapInfo::MergeFrom(from._internal_stop_sign_overlap_info());
      break;
    }
    case kCrosswalkOverlapInfo: {
      _internal_mutable_crosswalk_overlap_info()->::apollo::hdmap::CrosswalkOverlapInfo::MergeFrom(from._internal_crosswalk_overlap_info());
      break;
    }
    case kJunctionOverlapInfo: {
      _internal_mutable_junction_overlap_info()->::apollo::hdmap::JunctionOverlapInfo::MergeFrom(from._internal_junction_overlap_info());
      break;
    }
    case kYieldSignOverlapInfo: {
      _internal_mutable_yield_sign_overlap_info()->::apollo::hdmap::YieldOverlapInfo::MergeFrom(from._internal_yield_sign_overlap_info());
      break;
    }
    case kClearAreaOverlapInfo: {
      _internal_mutable_clear_area_overlap_info()->::apollo::hdmap::ClearAreaOverlapInfo::MergeFrom(from._internal_clear_area_overlap_info());
      break;
    }
    case kSpeedBumpOverlapInfo: {
      _internal_mutable_speed_bump_overlap_info()->::apollo::hdmap::SpeedBumpOverlapInfo::MergeFrom(from._internal_speed_bump_overlap_info());
      break;
    }
    case kParkingSpaceOverlapInfo: {
      _internal_mutable_parking_space_overlap_info()->::apollo::hdmap::ParkingSpaceOverlapInfo::MergeFrom(from._internal_parking_space_overlap_info());
      break;
    }
    case kPncJunctionOverlapInfo: {
      _internal_mutable_pnc_junction_overlap_info()->::apollo::hdmap::PNCJunctionOverlapInfo::MergeFrom(from._internal_pnc_junction_overlap_info());
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ObjectOverlapInfo)
}

void ObjectOverlapInfo::SharedCtor() {
id_ = nullptr;
clear_has_overlap_info();
}

ObjectOverlapInfo::~ObjectOverlapInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ObjectOverlapInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectOverlapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (has_overlap_info()) {
    clear_overlap_info();
  }
}

void ObjectOverlapInfo::ArenaDtor(void* object) {
  ObjectOverlapInfo* _this = reinterpret_cast< ObjectOverlapInfo* >(object);
  (void)_this;
}
void ObjectOverlapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectOverlapInfo::clear_overlap_info() {
// @@protoc_insertion_point(one_of_clear_start:apollo.hdmap.ObjectOverlapInfo)
  switch (overlap_info_case()) {
    case kLaneOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.lane_overlap_info_;
      }
      break;
    }
    case kSignalOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.signal_overlap_info_;
      }
      break;
    }
    case kStopSignOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.stop_sign_overlap_info_;
      }
      break;
    }
    case kCrosswalkOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.crosswalk_overlap_info_;
      }
      break;
    }
    case kJunctionOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.junction_overlap_info_;
      }
      break;
    }
    case kYieldSignOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.yield_sign_overlap_info_;
      }
      break;
    }
    case kClearAreaOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.clear_area_overlap_info_;
      }
      break;
    }
    case kSpeedBumpOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.speed_bump_overlap_info_;
      }
      break;
    }
    case kParkingSpaceOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.parking_space_overlap_info_;
      }
      break;
    }
    case kPncJunctionOverlapInfo: {
      if (GetArena() == nullptr) {
        delete overlap_info_.pnc_junction_overlap_info_;
      }
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OVERLAP_INFO_NOT_SET;
}


void ObjectOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ObjectOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  clear_overlap_info();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectOverlapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.LaneOverlapInfo lane_overlap_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.SignalOverlapInfo signal_overlap_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.StopSignOverlapInfo stop_sign_overlap_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.CrosswalkOverlapInfo crosswalk_overlap_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.JunctionOverlapInfo junction_overlap_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.YieldOverlapInfo yield_sign_overlap_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_sign_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.ClearAreaOverlapInfo clear_area_overlap_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_area_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_bump_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_space_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .apollo.hdmap.PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pnc_junction_overlap_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectOverlapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ObjectOverlapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  switch (overlap_info_case()) {
    case kLaneOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::lane_overlap_info(this), target, stream);
      break;
    }
    case kSignalOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::signal_overlap_info(this), target, stream);
      break;
    }
    case kStopSignOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::stop_sign_overlap_info(this), target, stream);
      break;
    }
    case kCrosswalkOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::crosswalk_overlap_info(this), target, stream);
      break;
    }
    case kJunctionOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::junction_overlap_info(this), target, stream);
      break;
    }
    case kYieldSignOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::yield_sign_overlap_info(this), target, stream);
      break;
    }
    case kClearAreaOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::clear_area_overlap_info(this), target, stream);
      break;
    }
    case kSpeedBumpOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::speed_bump_overlap_info(this), target, stream);
      break;
    }
    case kParkingSpaceOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::parking_space_overlap_info(this), target, stream);
      break;
    }
    case kPncJunctionOverlapInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::pnc_junction_overlap_info(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ObjectOverlapInfo)
  return target;
}

size_t ObjectOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ObjectOverlapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.Id id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  switch (overlap_info_case()) {
    // .apollo.hdmap.LaneOverlapInfo lane_overlap_info = 3;
    case kLaneOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.lane_overlap_info_);
      break;
    }
    // .apollo.hdmap.SignalOverlapInfo signal_overlap_info = 4;
    case kSignalOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.signal_overlap_info_);
      break;
    }
    // .apollo.hdmap.StopSignOverlapInfo stop_sign_overlap_info = 5;
    case kStopSignOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.stop_sign_overlap_info_);
      break;
    }
    // .apollo.hdmap.CrosswalkOverlapInfo crosswalk_overlap_info = 6;
    case kCrosswalkOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.crosswalk_overlap_info_);
      break;
    }
    // .apollo.hdmap.JunctionOverlapInfo junction_overlap_info = 7;
    case kJunctionOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.junction_overlap_info_);
      break;
    }
    // .apollo.hdmap.YieldOverlapInfo yield_sign_overlap_info = 8;
    case kYieldSignOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.yield_sign_overlap_info_);
      break;
    }
    // .apollo.hdmap.ClearAreaOverlapInfo clear_area_overlap_info = 9;
    case kClearAreaOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.clear_area_overlap_info_);
      break;
    }
    // .apollo.hdmap.SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
    case kSpeedBumpOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.speed_bump_overlap_info_);
      break;
    }
    // .apollo.hdmap.ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
    case kParkingSpaceOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.parking_space_overlap_info_);
      break;
    }
    // .apollo.hdmap.PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
    case kPncJunctionOverlapInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlap_info_.pnc_junction_overlap_info_);
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectOverlapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ObjectOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectOverlapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectOverlapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ObjectOverlapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ObjectOverlapInfo)
    MergeFrom(*source);
  }
}

void ObjectOverlapInfo::MergeFrom(const ObjectOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ObjectOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
  }
  switch (from.overlap_info_case()) {
    case kLaneOverlapInfo: {
      _internal_mutable_lane_overlap_info()->::apollo::hdmap::LaneOverlapInfo::MergeFrom(from._internal_lane_overlap_info());
      break;
    }
    case kSignalOverlapInfo: {
      _internal_mutable_signal_overlap_info()->::apollo::hdmap::SignalOverlapInfo::MergeFrom(from._internal_signal_overlap_info());
      break;
    }
    case kStopSignOverlapInfo: {
      _internal_mutable_stop_sign_overlap_info()->::apollo::hdmap::StopSignOverlapInfo::MergeFrom(from._internal_stop_sign_overlap_info());
      break;
    }
    case kCrosswalkOverlapInfo: {
      _internal_mutable_crosswalk_overlap_info()->::apollo::hdmap::CrosswalkOverlapInfo::MergeFrom(from._internal_crosswalk_overlap_info());
      break;
    }
    case kJunctionOverlapInfo: {
      _internal_mutable_junction_overlap_info()->::apollo::hdmap::JunctionOverlapInfo::MergeFrom(from._internal_junction_overlap_info());
      break;
    }
    case kYieldSignOverlapInfo: {
      _internal_mutable_yield_sign_overlap_info()->::apollo::hdmap::YieldOverlapInfo::MergeFrom(from._internal_yield_sign_overlap_info());
      break;
    }
    case kClearAreaOverlapInfo: {
      _internal_mutable_clear_area_overlap_info()->::apollo::hdmap::ClearAreaOverlapInfo::MergeFrom(from._internal_clear_area_overlap_info());
      break;
    }
    case kSpeedBumpOverlapInfo: {
      _internal_mutable_speed_bump_overlap_info()->::apollo::hdmap::SpeedBumpOverlapInfo::MergeFrom(from._internal_speed_bump_overlap_info());
      break;
    }
    case kParkingSpaceOverlapInfo: {
      _internal_mutable_parking_space_overlap_info()->::apollo::hdmap::ParkingSpaceOverlapInfo::MergeFrom(from._internal_parking_space_overlap_info());
      break;
    }
    case kPncJunctionOverlapInfo: {
      _internal_mutable_pnc_junction_overlap_info()->::apollo::hdmap::PNCJunctionOverlapInfo::MergeFrom(from._internal_pnc_junction_overlap_info());
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
}

void ObjectOverlapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ObjectOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOverlapInfo::CopyFrom(const ObjectOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ObjectOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOverlapInfo::IsInitialized() const {
  return true;
}

void ObjectOverlapInfo::InternalSwap(ObjectOverlapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(overlap_info_, other->overlap_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectOverlapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Overlap::_Internal {
 public:
  using HasBits = decltype(std::declval<Overlap>()._has_bits_);
  static const ::apollo::hdmap::Id& id(const Overlap* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Id&
Overlap::_Internal::id(const Overlap* msg) {
  return *msg->id_;
}
void Overlap::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Overlap::Overlap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_(arena),
  region_overlap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Overlap)
}
Overlap::Overlap(const Overlap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      object_(from.object_),
      region_overlap_(from.region_overlap_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Overlap)
}

void Overlap::SharedCtor() {
id_ = nullptr;
}

Overlap::~Overlap() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Overlap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Overlap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void Overlap::ArenaDtor(void* object) {
  Overlap* _this = reinterpret_cast< Overlap* >(object);
  (void)_this;
}
void Overlap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Overlap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Overlap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Overlap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  region_overlap_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Overlap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_region_overlap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Overlap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Overlap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_object(i), target, stream);
  }

  // repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_region_overlap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_region_overlap(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Overlap)
  return target;
}

size_t Overlap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Overlap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.ObjectOverlapInfo object = 2;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.RegionOverlapInfo region_overlap = 3;
  total_size += 1UL * this->_internal_region_overlap_size();
  for (const auto& msg : this->region_overlap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.Id id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Overlap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Overlap)
  GOOGLE_DCHECK_NE(&from, this);
  const Overlap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Overlap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Overlap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Overlap)
    MergeFrom(*source);
  }
}

void Overlap::MergeFrom(const Overlap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Overlap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  region_overlap_.MergeFrom(from.region_overlap_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
  }
}

void Overlap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Overlap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Overlap::CopyFrom(const Overlap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Overlap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Overlap::IsInitialized() const {
  return true;
}

void Overlap::InternalSwap(Overlap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_.InternalSwap(&other->object_);
  region_overlap_.InternalSwap(&other->region_overlap_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Overlap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LaneOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::LaneOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::LaneOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::SignalOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::SignalOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::SignalOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::StopSignOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::StopSignOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::StopSignOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::CrosswalkOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::CrosswalkOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::CrosswalkOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::JunctionOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::JunctionOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::JunctionOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::YieldOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::YieldOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::YieldOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::ClearAreaOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::ClearAreaOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::ClearAreaOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::SpeedBumpOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::SpeedBumpOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::SpeedBumpOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::ParkingSpaceOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::ParkingSpaceOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::ParkingSpaceOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::PNCJunctionOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::PNCJunctionOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::PNCJunctionOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::RegionOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::RegionOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::RegionOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::ObjectOverlapInfo* Arena::CreateMaybeMessage< ::apollo::hdmap::ObjectOverlapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::ObjectOverlapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Overlap* Arena::CreateMaybeMessage< ::apollo::hdmap::Overlap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Overlap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
