// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_road.proto

#include "modules/map/proto/map_road.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace hdmap {
constexpr BoundaryEdge::BoundaryEdge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curve_(nullptr)
  , type_(0)
{}
struct BoundaryEdgeDefaultTypeInternal {
  constexpr BoundaryEdgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundaryEdgeDefaultTypeInternal() {}
  union {
    BoundaryEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundaryEdgeDefaultTypeInternal _BoundaryEdge_default_instance_;
constexpr BoundaryPolygon::BoundaryPolygon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_(){}
struct BoundaryPolygonDefaultTypeInternal {
  constexpr BoundaryPolygonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundaryPolygonDefaultTypeInternal() {}
  union {
    BoundaryPolygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundaryPolygonDefaultTypeInternal _BoundaryPolygon_default_instance_;
constexpr RoadBoundary::RoadBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hole_()
  , outer_polygon_(nullptr){}
struct RoadBoundaryDefaultTypeInternal {
  constexpr RoadBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadBoundaryDefaultTypeInternal() {}
  union {
    RoadBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadBoundaryDefaultTypeInternal _RoadBoundary_default_instance_;
constexpr RoadROIBoundary::RoadROIBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : road_boundaries_()
  , id_(nullptr){}
struct RoadROIBoundaryDefaultTypeInternal {
  constexpr RoadROIBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadROIBoundaryDefaultTypeInternal() {}
  union {
    RoadROIBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadROIBoundaryDefaultTypeInternal _RoadROIBoundary_default_instance_;
constexpr RoadSection::RoadSection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lane_id_()
  , id_(nullptr)
  , boundary_(nullptr){}
struct RoadSectionDefaultTypeInternal {
  constexpr RoadSectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadSectionDefaultTypeInternal() {}
  union {
    RoadSection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadSectionDefaultTypeInternal _RoadSection_default_instance_;
constexpr Road::Road(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_()
  , id_(nullptr)
  , junction_id_(nullptr)
  , type_(0)
{}
struct RoadDefaultTypeInternal {
  constexpr RoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadDefaultTypeInternal() {}
  union {
    Road _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadDefaultTypeInternal _Road_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, curve_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, type_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryPolygon, edge_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, outer_polygon_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, hole_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, road_boundaries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, boundary_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, section_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, junction_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, type_),
  0,
  ~0u,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::hdmap::BoundaryEdge)},
  { 9, -1, sizeof(::apollo::hdmap::BoundaryPolygon)},
  { 15, 22, sizeof(::apollo::hdmap::RoadBoundary)},
  { 24, 31, sizeof(::apollo::hdmap::RoadROIBoundary)},
  { 33, 41, sizeof(::apollo::hdmap::RoadSection)},
  { 44, 53, sizeof(::apollo::hdmap::Road)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_BoundaryEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_BoundaryPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_RoadBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_RoadROIBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_RoadSection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_Road_default_instance_),
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5froad_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n modules/map/proto/map_road.proto\022\014apol"
  "lo.hdmap\032$modules/map/proto/map_geometry"
  ".proto\032\036modules/map/proto/map_id.proto\"\251"
  "\001\n\014BoundaryEdge\022\"\n\005curve\030\001 \001(\0132\023.apollo."
  "hdmap.Curve\022-\n\004type\030\002 \001(\0162\037.apollo.hdmap"
  ".BoundaryEdge.Type\"F\n\004Type\022\013\n\007UNKNOWN\020\000\022"
  "\n\n\006NORMAL\020\001\022\021\n\rLEFT_BOUNDARY\020\002\022\022\n\016RIGHT_"
  "BOUNDARY\020\003\";\n\017BoundaryPolygon\022(\n\004edge\030\001 "
  "\003(\0132\032.apollo.hdmap.BoundaryEdge\"q\n\014RoadB"
  "oundary\0224\n\router_polygon\030\001 \001(\0132\035.apollo."
  "hdmap.BoundaryPolygon\022+\n\004hole\030\002 \003(\0132\035.ap"
  "ollo.hdmap.BoundaryPolygon\"d\n\017RoadROIBou"
  "ndary\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\0223\n\017r"
  "oad_boundaries\030\002 \003(\0132\032.apollo.hdmap.Road"
  "Boundary\"|\n\013RoadSection\022\034\n\002id\030\001 \001(\0132\020.ap"
  "ollo.hdmap.Id\022!\n\007lane_id\030\002 \003(\0132\020.apollo."
  "hdmap.Id\022,\n\010boundary\030\003 \001(\0132\032.apollo.hdma"
  "p.RoadBoundary\"\331\001\n\004Road\022\034\n\002id\030\001 \001(\0132\020.ap"
  "ollo.hdmap.Id\022*\n\007section\030\002 \003(\0132\031.apollo."
  "hdmap.RoadSection\022%\n\013junction_id\030\003 \001(\0132\020"
  ".apollo.hdmap.Id\022%\n\004type\030\004 \001(\0162\027.apollo."
  "hdmap.Road.Type\"9\n\004Type\022\013\n\007UNKNOWN\020\000\022\013\n\007"
  "HIGHWAY\020\001\022\r\n\tCITY_ROAD\020\002\022\010\n\004PARK\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_deps[2] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto = {
  false, false, 914, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5froad_2eproto, "modules/map/proto/map_road.proto", 
  &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto::offsets,
  file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto, file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto);
  return descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_5froad_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto);
namespace apollo {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundaryEdge_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto[0];
}
bool BoundaryEdge_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BoundaryEdge_Type BoundaryEdge::UNKNOWN;
constexpr BoundaryEdge_Type BoundaryEdge::NORMAL;
constexpr BoundaryEdge_Type BoundaryEdge::LEFT_BOUNDARY;
constexpr BoundaryEdge_Type BoundaryEdge::RIGHT_BOUNDARY;
constexpr BoundaryEdge_Type BoundaryEdge::Type_MIN;
constexpr BoundaryEdge_Type BoundaryEdge::Type_MAX;
constexpr int BoundaryEdge::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Road_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto[1];
}
bool Road_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Road_Type Road::UNKNOWN;
constexpr Road_Type Road::HIGHWAY;
constexpr Road_Type Road::CITY_ROAD;
constexpr Road_Type Road::PARK;
constexpr Road_Type Road::Type_MIN;
constexpr Road_Type Road::Type_MAX;
constexpr int Road::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class BoundaryEdge::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundaryEdge>()._has_bits_);
  static const ::apollo::hdmap::Curve& curve(const BoundaryEdge* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Curve&
BoundaryEdge::_Internal::curve(const BoundaryEdge* msg) {
  return *msg->curve_;
}
void BoundaryEdge::clear_curve() {
  if (curve_ != nullptr) curve_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BoundaryEdge::BoundaryEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.BoundaryEdge)
}
BoundaryEdge::BoundaryEdge(const BoundaryEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve()) {
    curve_ = new ::apollo::hdmap::Curve(*from.curve_);
  } else {
    curve_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryEdge)
}

void BoundaryEdge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&curve_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&curve_)) + sizeof(type_));
}

BoundaryEdge::~BoundaryEdge() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundaryEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete curve_;
}

void BoundaryEdge::ArenaDtor(void* object) {
  BoundaryEdge* _this = reinterpret_cast< BoundaryEdge* >(object);
  (void)_this;
}
void BoundaryEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundaryEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundaryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(curve_ != nullptr);
    curve_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundaryEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Curve curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::BoundaryEdge_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::BoundaryEdge_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::curve(this), target, stream);
  }

  // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryEdge)
  return target;
}

size_t BoundaryEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.Curve curve = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_);
    }

    // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.BoundaryEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.BoundaryEdge)
    MergeFrom(*source);
  }
}

void BoundaryEdge::MergeFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_curve()->::apollo::hdmap::Curve::MergeFrom(from._internal_curve());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundaryEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryEdge::CopyFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryEdge::IsInitialized() const {
  return true;
}

void BoundaryEdge::InternalSwap(BoundaryEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundaryEdge, type_)
      + sizeof(BoundaryEdge::type_)
      - PROTOBUF_FIELD_OFFSET(BoundaryEdge, curve_)>(
          reinterpret_cast<char*>(&curve_),
          reinterpret_cast<char*>(&other->curve_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoundaryPolygon::_Internal {
 public:
};

BoundaryPolygon::BoundaryPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edge_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.BoundaryPolygon)
}
BoundaryPolygon::BoundaryPolygon(const BoundaryPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryPolygon)
}

void BoundaryPolygon::SharedCtor() {
}

BoundaryPolygon::~BoundaryPolygon() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryPolygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundaryPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoundaryPolygon::ArenaDtor(void* object) {
  BoundaryPolygon* _this = reinterpret_cast< BoundaryPolygon* >(object);
  (void)_this;
}
void BoundaryPolygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundaryPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundaryPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundaryPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.hdmap.BoundaryEdge edge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edge(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryPolygon)
  return target;
}

size_t BoundaryPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.BoundaryPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.BoundaryPolygon)
    MergeFrom(*source);
  }
}

void BoundaryPolygon::MergeFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_.MergeFrom(from.edge_);
}

void BoundaryPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryPolygon::CopyFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPolygon::IsInitialized() const {
  return true;
}

void BoundaryPolygon::InternalSwap(BoundaryPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edge_.InternalSwap(&other->edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoadBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadBoundary>()._has_bits_);
  static const ::apollo::hdmap::BoundaryPolygon& outer_polygon(const RoadBoundary* msg);
  static void set_has_outer_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::BoundaryPolygon&
RoadBoundary::_Internal::outer_polygon(const RoadBoundary* msg) {
  return *msg->outer_polygon_;
}
RoadBoundary::RoadBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hole_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.RoadBoundary)
}
RoadBoundary::RoadBoundary(const RoadBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hole_(from.hole_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outer_polygon()) {
    outer_polygon_ = new ::apollo::hdmap::BoundaryPolygon(*from.outer_polygon_);
  } else {
    outer_polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadBoundary)
}

void RoadBoundary::SharedCtor() {
outer_polygon_ = nullptr;
}

RoadBoundary::~RoadBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadBoundary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete outer_polygon_;
}

void RoadBoundary::ArenaDtor(void* object) {
  RoadBoundary* _this = reinterpret_cast< RoadBoundary* >(object);
  (void)_this;
}
void RoadBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoadBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(outer_polygon_ != nullptr);
    outer_polygon_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_outer_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hole(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::outer_polygon(this), target, stream);
  }

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hole_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_hole(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadBoundary)
  return target;
}

size_t RoadBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  total_size += 1UL * this->_internal_hole_size();
  for (const auto& msg : this->hole_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outer_polygon_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadBoundary)
    MergeFrom(*source);
  }
}

void RoadBoundary::MergeFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_.MergeFrom(from.hole_);
  if (from._internal_has_outer_polygon()) {
    _internal_mutable_outer_polygon()->::apollo::hdmap::BoundaryPolygon::MergeFrom(from._internal_outer_polygon());
  }
}

void RoadBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadBoundary::CopyFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundary::IsInitialized() const {
  return true;
}

void RoadBoundary::InternalSwap(RoadBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hole_.InternalSwap(&other->hole_);
  swap(outer_polygon_, other->outer_polygon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoadROIBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadROIBoundary>()._has_bits_);
  static const ::apollo::hdmap::Id& id(const RoadROIBoundary* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Id&
RoadROIBoundary::_Internal::id(const RoadROIBoundary* msg) {
  return *msg->id_;
}
void RoadROIBoundary::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RoadROIBoundary::RoadROIBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  road_boundaries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.RoadROIBoundary)
}
RoadROIBoundary::RoadROIBoundary(const RoadROIBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      road_boundaries_(from.road_boundaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadROIBoundary)
}

void RoadROIBoundary::SharedCtor() {
id_ = nullptr;
}

RoadROIBoundary::~RoadROIBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadROIBoundary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadROIBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void RoadROIBoundary::ArenaDtor(void* object) {
  RoadROIBoundary* _this = reinterpret_cast< RoadROIBoundary* >(object);
  (void)_this;
}
void RoadROIBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadROIBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoadROIBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadROIBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_boundaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadROIBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_boundaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadROIBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadROIBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_boundaries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_road_boundaries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadROIBoundary)
  return target;
}

size_t RoadROIBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadROIBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  total_size += 1UL * this->_internal_road_boundaries_size();
  for (const auto& msg : this->road_boundaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.Id id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadROIBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadROIBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadROIBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadROIBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadROIBoundary)
    MergeFrom(*source);
  }
}

void RoadROIBoundary::MergeFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_boundaries_.MergeFrom(from.road_boundaries_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
  }
}

void RoadROIBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadROIBoundary::CopyFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadROIBoundary::IsInitialized() const {
  return true;
}

void RoadROIBoundary::InternalSwap(RoadROIBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  road_boundaries_.InternalSwap(&other->road_boundaries_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadROIBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoadSection::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSection>()._has_bits_);
  static const ::apollo::hdmap::Id& id(const RoadSection* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::RoadBoundary& boundary(const RoadSection* msg);
  static void set_has_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Id&
RoadSection::_Internal::id(const RoadSection* msg) {
  return *msg->id_;
}
const ::apollo::hdmap::RoadBoundary&
RoadSection::_Internal::boundary(const RoadSection* msg) {
  return *msg->boundary_;
}
void RoadSection::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RoadSection::clear_lane_id() {
  lane_id_.Clear();
}
RoadSection::RoadSection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lane_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.RoadSection)
}
RoadSection::RoadSection(const RoadSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_boundary()) {
    boundary_ = new ::apollo::hdmap::RoadBoundary(*from.boundary_);
  } else {
    boundary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadSection)
}

void RoadSection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&boundary_) -
    reinterpret_cast<char*>(&id_)) + sizeof(boundary_));
}

RoadSection::~RoadSection() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadSection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadSection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete boundary_;
}

void RoadSection::ArenaDtor(void* object) {
  RoadSection* _this = reinterpret_cast< RoadSection* >(object);
  (void)_this;
}
void RoadSection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoadSection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundary_ != nullptr);
      boundary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.RoadBoundary boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .apollo.hdmap.Id lane_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lane_id(i), target, stream);
  }

  // optional .apollo.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::boundary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadSection)
  return target;
}

size_t RoadSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadSection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Id lane_id = 2;
  total_size += 1UL * this->_internal_lane_id_size();
  for (const auto& msg : this->lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .apollo.hdmap.RoadBoundary boundary = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boundary_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadSection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadSection)
    MergeFrom(*source);
  }
}

void RoadSection::MergeFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_boundary()->::apollo::hdmap::RoadBoundary::MergeFrom(from._internal_boundary());
    }
  }
}

void RoadSection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSection::CopyFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection::IsInitialized() const {
  return true;
}

void RoadSection::InternalSwap(RoadSection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_id_.InternalSwap(&other->lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSection, boundary_)
      + sizeof(RoadSection::boundary_)
      - PROTOBUF_FIELD_OFFSET(RoadSection, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Road::_Internal {
 public:
  using HasBits = decltype(std::declval<Road>()._has_bits_);
  static const ::apollo::hdmap::Id& id(const Road* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Id& junction_id(const Road* msg);
  static void set_has_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::hdmap::Id&
Road::_Internal::id(const Road* msg) {
  return *msg->id_;
}
const ::apollo::hdmap::Id&
Road::_Internal::junction_id(const Road* msg) {
  return *msg->junction_id_;
}
void Road::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Road::clear_junction_id() {
  if (junction_id_ != nullptr) junction_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Road::Road(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  section_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Road)
}
Road::Road(const Road& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      section_(from.section_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_junction_id()) {
    junction_id_ = new ::apollo::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Road)
}

void Road::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Road)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Road::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete junction_id_;
}

void Road::ArenaDtor(void* object) {
  Road* _this = reinterpret_cast< Road* >(object);
  (void)_this;
}
void Road::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Road::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Road)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(junction_id_ != nullptr);
      junction_id_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Road::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.RoadSection section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Id junction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Road.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Road_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::Road_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Road::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Road)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .apollo.hdmap.RoadSection section = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_section_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_section(i), target, stream);
  }

  // optional .apollo.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::junction_id(this), target, stream);
  }

  // optional .apollo.hdmap.Road.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Road)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.RoadSection section = 2;
  total_size += 1UL * this->_internal_section_size();
  for (const auto& msg : this->section_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .apollo.hdmap.Id junction_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *junction_id_);
    }

    // optional .apollo.hdmap.Road.Type type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Road::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Road>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Road)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_.MergeFrom(from.section_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_junction_id()->::apollo::hdmap::Id::MergeFrom(from._internal_junction_id());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Road::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::InternalSwap(Road* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_.InternalSwap(&other->section_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Road, type_)
      + sizeof(Road::type_)
      - PROTOBUF_FIELD_OFFSET(Road, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Road::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::BoundaryEdge* Arena::CreateMaybeMessage< ::apollo::hdmap::BoundaryEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::BoundaryEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::BoundaryPolygon* Arena::CreateMaybeMessage< ::apollo::hdmap::BoundaryPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::BoundaryPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::RoadBoundary* Arena::CreateMaybeMessage< ::apollo::hdmap::RoadBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::RoadBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::RoadROIBoundary* Arena::CreateMaybeMessage< ::apollo::hdmap::RoadROIBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::RoadROIBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::RoadSection* Arena::CreateMaybeMessage< ::apollo::hdmap::RoadSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::RoadSection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Road* Arena::CreateMaybeMessage< ::apollo::hdmap::Road >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Road >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
