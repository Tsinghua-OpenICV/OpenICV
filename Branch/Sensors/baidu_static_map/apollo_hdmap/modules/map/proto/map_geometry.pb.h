// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto_metadata_getter(int index);
namespace apollo {
namespace hdmap {
class Curve;
struct CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class CurveSegment;
struct CurveSegmentDefaultTypeInternal;
extern CurveSegmentDefaultTypeInternal _CurveSegment_default_instance_;
class LineSegment;
struct LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::hdmap::Curve* Arena::CreateMaybeMessage<::apollo::hdmap::Curve>(Arena*);
template<> ::apollo::hdmap::CurveSegment* Arena::CreateMaybeMessage<::apollo::hdmap::CurveSegment>(Arena*);
template<> ::apollo::hdmap::LineSegment* Arena::CreateMaybeMessage<::apollo::hdmap::LineSegment>(Arena*);
template<> ::apollo::hdmap::Polygon* Arena::CreateMaybeMessage<::apollo::hdmap::Polygon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace hdmap {

// ===================================================================

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  virtual ~Polygon();
  explicit constexpr Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .apollo.common.PointENU point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::common::PointENU* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >*
      mutable_point();
  private:
  const ::apollo::common::PointENU& _internal_point(int index) const;
  ::apollo::common::PointENU* _internal_add_point();
  public:
  const ::apollo::common::PointENU& point(int index) const;
  ::apollo::common::PointENU* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class LineSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.LineSegment) */ {
 public:
  inline LineSegment() : LineSegment(nullptr) {}
  virtual ~LineSegment();
  explicit constexpr LineSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineSegment(const LineSegment& from);
  LineSegment(LineSegment&& from) noexcept
    : LineSegment() {
    *this = ::std::move(from);
  }

  inline LineSegment& operator=(const LineSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineSegment& operator=(LineSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LineSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineSegment* internal_default_instance() {
    return reinterpret_cast<const LineSegment*>(
               &_LineSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LineSegment& a, LineSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LineSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineSegment* New() const final {
    return CreateMaybeMessage<LineSegment>(nullptr);
  }

  LineSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LineSegment& from);
  void MergeFrom(const LineSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.LineSegment";
  }
  protected:
  explicit LineSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .apollo.common.PointENU point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::common::PointENU* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >*
      mutable_point();
  private:
  const ::apollo::common::PointENU& _internal_point(int index) const;
  ::apollo::common::PointENU* _internal_add_point();
  public:
  const ::apollo::common::PointENU& point(int index) const;
  ::apollo::common::PointENU* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.hdmap.LineSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class CurveSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.CurveSegment) */ {
 public:
  inline CurveSegment() : CurveSegment(nullptr) {}
  virtual ~CurveSegment();
  explicit constexpr CurveSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurveSegment(const CurveSegment& from);
  CurveSegment(CurveSegment&& from) noexcept
    : CurveSegment() {
    *this = ::std::move(from);
  }

  inline CurveSegment& operator=(const CurveSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurveSegment& operator=(CurveSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurveSegment& default_instance() {
    return *internal_default_instance();
  }
  enum CurveTypeCase {
    kLineSegment = 1,
    CURVE_TYPE_NOT_SET = 0,
  };

  static inline const CurveSegment* internal_default_instance() {
    return reinterpret_cast<const CurveSegment*>(
               &_CurveSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CurveSegment& a, CurveSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CurveSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurveSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurveSegment* New() const final {
    return CreateMaybeMessage<CurveSegment>(nullptr);
  }

  CurveSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurveSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurveSegment& from);
  void MergeFrom(const CurveSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurveSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.CurveSegment";
  }
  protected:
  explicit CurveSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPositionFieldNumber = 7,
    kSFieldNumber = 6,
    kHeadingFieldNumber = 8,
    kLengthFieldNumber = 9,
    kLineSegmentFieldNumber = 1,
  };
  // optional .apollo.common.PointENU start_position = 7;
  bool has_start_position() const;
  private:
  bool _internal_has_start_position() const;
  public:
  void clear_start_position();
  const ::apollo::common::PointENU& start_position() const;
  ::apollo::common::PointENU* release_start_position();
  ::apollo::common::PointENU* mutable_start_position();
  void set_allocated_start_position(::apollo::common::PointENU* start_position);
  private:
  const ::apollo::common::PointENU& _internal_start_position() const;
  ::apollo::common::PointENU* _internal_mutable_start_position();
  public:
  void unsafe_arena_set_allocated_start_position(
      ::apollo::common::PointENU* start_position);
  ::apollo::common::PointENU* unsafe_arena_release_start_position();

  // optional double s = 6;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double heading = 8;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double length = 9;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // .apollo.hdmap.LineSegment line_segment = 1;
  bool has_line_segment() const;
  private:
  bool _internal_has_line_segment() const;
  public:
  void clear_line_segment();
  const ::apollo::hdmap::LineSegment& line_segment() const;
  ::apollo::hdmap::LineSegment* release_line_segment();
  ::apollo::hdmap::LineSegment* mutable_line_segment();
  void set_allocated_line_segment(::apollo::hdmap::LineSegment* line_segment);
  private:
  const ::apollo::hdmap::LineSegment& _internal_line_segment() const;
  ::apollo::hdmap::LineSegment* _internal_mutable_line_segment();
  public:
  void unsafe_arena_set_allocated_line_segment(
      ::apollo::hdmap::LineSegment* line_segment);
  ::apollo::hdmap::LineSegment* unsafe_arena_release_line_segment();

  void clear_curve_type();
  CurveTypeCase curve_type_case() const;
  // @@protoc_insertion_point(class_scope:apollo.hdmap.CurveSegment)
 private:
  class _Internal;
  void set_has_line_segment();

  inline bool has_curve_type() const;
  inline void clear_has_curve_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::PointENU* start_position_;
  double s_;
  double heading_;
  double length_;
  union CurveTypeUnion {
    constexpr CurveTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::apollo::hdmap::LineSegment* line_segment_;
  } curve_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Curve PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Curve) */ {
 public:
  inline Curve() : Curve(nullptr) {}
  virtual ~Curve();
  explicit constexpr Curve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Curve(const Curve& from);
  Curve(Curve&& from) noexcept
    : Curve() {
    *this = ::std::move(from);
  }

  inline Curve& operator=(const Curve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Curve& operator=(Curve&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Curve& default_instance() {
    return *internal_default_instance();
  }
  static inline const Curve* internal_default_instance() {
    return reinterpret_cast<const Curve*>(
               &_Curve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Curve& a, Curve& b) {
    a.Swap(&b);
  }
  inline void Swap(Curve* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Curve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Curve* New() const final {
    return CreateMaybeMessage<Curve>(nullptr);
  }

  Curve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Curve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Curve& from);
  void MergeFrom(const Curve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Curve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Curve";
  }
  protected:
  explicit Curve(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentFieldNumber = 1,
  };
  // repeated .apollo.hdmap.CurveSegment segment = 1;
  int segment_size() const;
  private:
  int _internal_segment_size() const;
  public:
  void clear_segment();
  ::apollo::hdmap::CurveSegment* mutable_segment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::CurveSegment >*
      mutable_segment();
  private:
  const ::apollo::hdmap::CurveSegment& _internal_segment(int index) const;
  ::apollo::hdmap::CurveSegment* _internal_add_segment();
  public:
  const ::apollo::hdmap::CurveSegment& segment(int index) const;
  ::apollo::hdmap::CurveSegment* add_segment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::CurveSegment >&
      segment() const;

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Curve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::CurveSegment > segment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Polygon

// repeated .apollo.common.PointENU point = 1;
inline int Polygon::_internal_point_size() const {
  return point_.size();
}
inline int Polygon::point_size() const {
  return _internal_point_size();
}
inline ::apollo::common::PointENU* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Polygon.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Polygon.point)
  return &point_;
}
inline const ::apollo::common::PointENU& Polygon::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::apollo::common::PointENU& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Polygon.point)
  return _internal_point(index);
}
inline ::apollo::common::PointENU* Polygon::_internal_add_point() {
  return point_.Add();
}
inline ::apollo::common::PointENU* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Polygon.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Polygon.point)
  return point_;
}

// -------------------------------------------------------------------

// LineSegment

// repeated .apollo.common.PointENU point = 1;
inline int LineSegment::_internal_point_size() const {
  return point_.size();
}
inline int LineSegment::point_size() const {
  return _internal_point_size();
}
inline ::apollo::common::PointENU* LineSegment::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.LineSegment.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >*
LineSegment::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.LineSegment.point)
  return &point_;
}
inline const ::apollo::common::PointENU& LineSegment::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::apollo::common::PointENU& LineSegment::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LineSegment.point)
  return _internal_point(index);
}
inline ::apollo::common::PointENU* LineSegment::_internal_add_point() {
  return point_.Add();
}
inline ::apollo::common::PointENU* LineSegment::add_point() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.LineSegment.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PointENU >&
LineSegment::point() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.LineSegment.point)
  return point_;
}

// -------------------------------------------------------------------

// CurveSegment

// .apollo.hdmap.LineSegment line_segment = 1;
inline bool CurveSegment::_internal_has_line_segment() const {
  return curve_type_case() == kLineSegment;
}
inline bool CurveSegment::has_line_segment() const {
  return _internal_has_line_segment();
}
inline void CurveSegment::set_has_line_segment() {
  _oneof_case_[0] = kLineSegment;
}
inline void CurveSegment::clear_line_segment() {
  if (_internal_has_line_segment()) {
    if (GetArena() == nullptr) {
      delete curve_type_.line_segment_;
    }
    clear_has_curve_type();
  }
}
inline ::apollo::hdmap::LineSegment* CurveSegment::release_line_segment() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.CurveSegment.line_segment)
  if (_internal_has_line_segment()) {
    clear_has_curve_type();
      ::apollo::hdmap::LineSegment* temp = curve_type_.line_segment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    curve_type_.line_segment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::hdmap::LineSegment& CurveSegment::_internal_line_segment() const {
  return _internal_has_line_segment()
      ? *curve_type_.line_segment_
      : reinterpret_cast< ::apollo::hdmap::LineSegment&>(::apollo::hdmap::_LineSegment_default_instance_);
}
inline const ::apollo::hdmap::LineSegment& CurveSegment::line_segment() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.line_segment)
  return _internal_line_segment();
}
inline ::apollo::hdmap::LineSegment* CurveSegment::unsafe_arena_release_line_segment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.hdmap.CurveSegment.line_segment)
  if (_internal_has_line_segment()) {
    clear_has_curve_type();
    ::apollo::hdmap::LineSegment* temp = curve_type_.line_segment_;
    curve_type_.line_segment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CurveSegment::unsafe_arena_set_allocated_line_segment(::apollo::hdmap::LineSegment* line_segment) {
  clear_curve_type();
  if (line_segment) {
    set_has_line_segment();
    curve_type_.line_segment_ = line_segment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.CurveSegment.line_segment)
}
inline ::apollo::hdmap::LineSegment* CurveSegment::_internal_mutable_line_segment() {
  if (!_internal_has_line_segment()) {
    clear_curve_type();
    set_has_line_segment();
    curve_type_.line_segment_ = CreateMaybeMessage< ::apollo::hdmap::LineSegment >(GetArena());
  }
  return curve_type_.line_segment_;
}
inline ::apollo::hdmap::LineSegment* CurveSegment::mutable_line_segment() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.CurveSegment.line_segment)
  return _internal_mutable_line_segment();
}

// optional double s = 6;
inline bool CurveSegment::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CurveSegment::has_s() const {
  return _internal_has_s();
}
inline void CurveSegment::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CurveSegment::_internal_s() const {
  return s_;
}
inline double CurveSegment::s() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.s)
  return _internal_s();
}
inline void CurveSegment::_internal_set_s(double value) {
  _has_bits_[0] |= 0x00000002u;
  s_ = value;
}
inline void CurveSegment::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.s)
}

// optional .apollo.common.PointENU start_position = 7;
inline bool CurveSegment::_internal_has_start_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_position_ != nullptr);
  return value;
}
inline bool CurveSegment::has_start_position() const {
  return _internal_has_start_position();
}
inline const ::apollo::common::PointENU& CurveSegment::_internal_start_position() const {
  const ::apollo::common::PointENU* p = start_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& CurveSegment::start_position() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.start_position)
  return _internal_start_position();
}
inline void CurveSegment::unsafe_arena_set_allocated_start_position(
    ::apollo::common::PointENU* start_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_position_);
  }
  start_position_ = start_position;
  if (start_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.CurveSegment.start_position)
}
inline ::apollo::common::PointENU* CurveSegment::release_start_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = start_position_;
  start_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::PointENU* CurveSegment::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.CurveSegment.start_position)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = start_position_;
  start_position_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* CurveSegment::_internal_mutable_start_position() {
  _has_bits_[0] |= 0x00000001u;
  if (start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArena());
    start_position_ = p;
  }
  return start_position_;
}
inline ::apollo::common::PointENU* CurveSegment::mutable_start_position() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.CurveSegment.start_position)
  return _internal_mutable_start_position();
}
inline void CurveSegment::set_allocated_start_position(::apollo::common::PointENU* start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_position_);
  }
  if (start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_position)->GetArena();
    if (message_arena != submessage_arena) {
      start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.CurveSegment.start_position)
}

// optional double heading = 8;
inline bool CurveSegment::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CurveSegment::has_heading() const {
  return _internal_has_heading();
}
inline void CurveSegment::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CurveSegment::_internal_heading() const {
  return heading_;
}
inline double CurveSegment::heading() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.heading)
  return _internal_heading();
}
inline void CurveSegment::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000004u;
  heading_ = value;
}
inline void CurveSegment::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.heading)
}

// optional double length = 9;
inline bool CurveSegment::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CurveSegment::has_length() const {
  return _internal_has_length();
}
inline void CurveSegment::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CurveSegment::_internal_length() const {
  return length_;
}
inline double CurveSegment::length() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.CurveSegment.length)
  return _internal_length();
}
inline void CurveSegment::_internal_set_length(double value) {
  _has_bits_[0] |= 0x00000008u;
  length_ = value;
}
inline void CurveSegment::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.CurveSegment.length)
}

inline bool CurveSegment::has_curve_type() const {
  return curve_type_case() != CURVE_TYPE_NOT_SET;
}
inline void CurveSegment::clear_has_curve_type() {
  _oneof_case_[0] = CURVE_TYPE_NOT_SET;
}
inline CurveSegment::CurveTypeCase CurveSegment::curve_type_case() const {
  return CurveSegment::CurveTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Curve

// repeated .apollo.hdmap.CurveSegment segment = 1;
inline int Curve::_internal_segment_size() const {
  return segment_.size();
}
inline int Curve::segment_size() const {
  return _internal_segment_size();
}
inline void Curve::clear_segment() {
  segment_.Clear();
}
inline ::apollo::hdmap::CurveSegment* Curve::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Curve.segment)
  return segment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::CurveSegment >*
Curve::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Curve.segment)
  return &segment_;
}
inline const ::apollo::hdmap::CurveSegment& Curve::_internal_segment(int index) const {
  return segment_.Get(index);
}
inline const ::apollo::hdmap::CurveSegment& Curve::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Curve.segment)
  return _internal_segment(index);
}
inline ::apollo::hdmap::CurveSegment* Curve::_internal_add_segment() {
  return segment_.Add();
}
inline ::apollo::hdmap::CurveSegment* Curve::add_segment() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Curve.segment)
  return _internal_add_segment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::CurveSegment >&
Curve::segment() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Curve.segment)
  return segment_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto
