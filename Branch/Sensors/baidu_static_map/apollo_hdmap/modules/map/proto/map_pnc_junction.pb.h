// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_pnc_junction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_id.pb.h"
#include "modules/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_metadata_getter(int index);
namespace apollo {
namespace hdmap {
class PNCJunction;
struct PNCJunctionDefaultTypeInternal;
extern PNCJunctionDefaultTypeInternal _PNCJunction_default_instance_;
class Passage;
struct PassageDefaultTypeInternal;
extern PassageDefaultTypeInternal _Passage_default_instance_;
class PassageGroup;
struct PassageGroupDefaultTypeInternal;
extern PassageGroupDefaultTypeInternal _PassageGroup_default_instance_;
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::hdmap::PNCJunction* Arena::CreateMaybeMessage<::apollo::hdmap::PNCJunction>(Arena*);
template<> ::apollo::hdmap::Passage* Arena::CreateMaybeMessage<::apollo::hdmap::Passage>(Arena*);
template<> ::apollo::hdmap::PassageGroup* Arena::CreateMaybeMessage<::apollo::hdmap::PassageGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace hdmap {

enum Passage_Type : int {
  Passage_Type_UNKNOWN = 0,
  Passage_Type_ENTRANCE = 1,
  Passage_Type_EXIT = 2
};
bool Passage_Type_IsValid(int value);
constexpr Passage_Type Passage_Type_Type_MIN = Passage_Type_UNKNOWN;
constexpr Passage_Type Passage_Type_Type_MAX = Passage_Type_EXIT;
constexpr int Passage_Type_Type_ARRAYSIZE = Passage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Passage_Type_descriptor();
template<typename T>
inline const std::string& Passage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Passage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Passage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Passage_Type_descriptor(), enum_t_value);
}
inline bool Passage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Passage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Passage_Type>(
    Passage_Type_descriptor(), name, value);
}
// ===================================================================

class Passage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Passage) */ {
 public:
  inline Passage() : Passage(nullptr) {}
  virtual ~Passage();
  explicit constexpr Passage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Passage(const Passage& from);
  Passage(Passage&& from) noexcept
    : Passage() {
    *this = ::std::move(from);
  }

  inline Passage& operator=(const Passage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Passage& operator=(Passage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Passage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Passage* internal_default_instance() {
    return reinterpret_cast<const Passage*>(
               &_Passage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Passage& a, Passage& b) {
    a.Swap(&b);
  }
  inline void Swap(Passage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Passage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Passage* New() const final {
    return CreateMaybeMessage<Passage>(nullptr);
  }

  Passage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Passage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Passage& from);
  void MergeFrom(const Passage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Passage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Passage";
  }
  protected:
  explicit Passage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Passage_Type Type;
  static constexpr Type UNKNOWN =
    Passage_Type_UNKNOWN;
  static constexpr Type ENTRANCE =
    Passage_Type_ENTRANCE;
  static constexpr Type EXIT =
    Passage_Type_EXIT;
  static inline bool Type_IsValid(int value) {
    return Passage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Passage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Passage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Passage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Passage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Passage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Passage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalIdFieldNumber = 2,
    kYieldIdFieldNumber = 3,
    kStopSignIdFieldNumber = 4,
    kLaneIdFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 6,
  };
  // repeated .apollo.hdmap.Id signal_id = 2;
  int signal_id_size() const;
  private:
  int _internal_signal_id_size() const;
  public:
  void clear_signal_id();
  ::apollo::hdmap::Id* mutable_signal_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_signal_id();
  private:
  const ::apollo::hdmap::Id& _internal_signal_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_signal_id();
  public:
  const ::apollo::hdmap::Id& signal_id(int index) const;
  ::apollo::hdmap::Id* add_signal_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      signal_id() const;

  // repeated .apollo.hdmap.Id yield_id = 3;
  int yield_id_size() const;
  private:
  int _internal_yield_id_size() const;
  public:
  void clear_yield_id();
  ::apollo::hdmap::Id* mutable_yield_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_yield_id();
  private:
  const ::apollo::hdmap::Id& _internal_yield_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_yield_id();
  public:
  const ::apollo::hdmap::Id& yield_id(int index) const;
  ::apollo::hdmap::Id* add_yield_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      yield_id() const;

  // repeated .apollo.hdmap.Id stop_sign_id = 4;
  int stop_sign_id_size() const;
  private:
  int _internal_stop_sign_id_size() const;
  public:
  void clear_stop_sign_id();
  ::apollo::hdmap::Id* mutable_stop_sign_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_stop_sign_id();
  private:
  const ::apollo::hdmap::Id& _internal_stop_sign_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_stop_sign_id();
  public:
  const ::apollo::hdmap::Id& stop_sign_id(int index) const;
  ::apollo::hdmap::Id* add_stop_sign_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      stop_sign_id() const;

  // repeated .apollo.hdmap.Id lane_id = 5;
  int lane_id_size() const;
  private:
  int _internal_lane_id_size() const;
  public:
  void clear_lane_id();
  ::apollo::hdmap::Id* mutable_lane_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_lane_id();
  private:
  const ::apollo::hdmap::Id& _internal_lane_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_lane_id();
  public:
  const ::apollo::hdmap::Id& lane_id(int index) const;
  ::apollo::hdmap::Id* add_lane_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      lane_id() const;

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // optional .apollo.hdmap.Passage.Type type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::hdmap::Passage_Type type() const;
  void set_type(::apollo::hdmap::Passage_Type value);
  private:
  ::apollo::hdmap::Passage_Type _internal_type() const;
  void _internal_set_type(::apollo::hdmap::Passage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Passage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > signal_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > yield_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > stop_sign_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > lane_id_;
  ::apollo::hdmap::Id* id_;
  int type_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto;
};
// -------------------------------------------------------------------

class PassageGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.PassageGroup) */ {
 public:
  inline PassageGroup() : PassageGroup(nullptr) {}
  virtual ~PassageGroup();
  explicit constexpr PassageGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PassageGroup(const PassageGroup& from);
  PassageGroup(PassageGroup&& from) noexcept
    : PassageGroup() {
    *this = ::std::move(from);
  }

  inline PassageGroup& operator=(const PassageGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassageGroup& operator=(PassageGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PassageGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const PassageGroup* internal_default_instance() {
    return reinterpret_cast<const PassageGroup*>(
               &_PassageGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PassageGroup& a, PassageGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(PassageGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassageGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PassageGroup* New() const final {
    return CreateMaybeMessage<PassageGroup>(nullptr);
  }

  PassageGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PassageGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PassageGroup& from);
  void MergeFrom(const PassageGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassageGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.PassageGroup";
  }
  protected:
  explicit PassageGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .apollo.hdmap.Passage passage = 2;
  int passage_size() const;
  private:
  int _internal_passage_size() const;
  public:
  void clear_passage();
  ::apollo::hdmap::Passage* mutable_passage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Passage >*
      mutable_passage();
  private:
  const ::apollo::hdmap::Passage& _internal_passage(int index) const;
  ::apollo::hdmap::Passage* _internal_add_passage();
  public:
  const ::apollo::hdmap::Passage& passage(int index) const;
  ::apollo::hdmap::Passage* add_passage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Passage >&
      passage() const;

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:apollo.hdmap.PassageGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Passage > passage_;
  ::apollo::hdmap::Id* id_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto;
};
// -------------------------------------------------------------------

class PNCJunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.PNCJunction) */ {
 public:
  inline PNCJunction() : PNCJunction(nullptr) {}
  virtual ~PNCJunction();
  explicit constexpr PNCJunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PNCJunction(const PNCJunction& from);
  PNCJunction(PNCJunction&& from) noexcept
    : PNCJunction() {
    *this = ::std::move(from);
  }

  inline PNCJunction& operator=(const PNCJunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PNCJunction& operator=(PNCJunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PNCJunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PNCJunction* internal_default_instance() {
    return reinterpret_cast<const PNCJunction*>(
               &_PNCJunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PNCJunction& a, PNCJunction& b) {
    a.Swap(&b);
  }
  inline void Swap(PNCJunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PNCJunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PNCJunction* New() const final {
    return CreateMaybeMessage<PNCJunction>(nullptr);
  }

  PNCJunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PNCJunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PNCJunction& from);
  void MergeFrom(const PNCJunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNCJunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.PNCJunction";
  }
  protected:
  explicit PNCJunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlapIdFieldNumber = 3,
    kPassageGroupFieldNumber = 4,
    kIdFieldNumber = 1,
    kPolygonFieldNumber = 2,
  };
  // repeated .apollo.hdmap.Id overlap_id = 3;
  int overlap_id_size() const;
  private:
  int _internal_overlap_id_size() const;
  public:
  void clear_overlap_id();
  ::apollo::hdmap::Id* mutable_overlap_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_overlap_id();
  private:
  const ::apollo::hdmap::Id& _internal_overlap_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_overlap_id();
  public:
  const ::apollo::hdmap::Id& overlap_id(int index) const;
  ::apollo::hdmap::Id* add_overlap_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      overlap_id() const;

  // repeated .apollo.hdmap.PassageGroup passage_group = 4;
  int passage_group_size() const;
  private:
  int _internal_passage_group_size() const;
  public:
  void clear_passage_group();
  ::apollo::hdmap::PassageGroup* mutable_passage_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::PassageGroup >*
      mutable_passage_group();
  private:
  const ::apollo::hdmap::PassageGroup& _internal_passage_group(int index) const;
  ::apollo::hdmap::PassageGroup* _internal_add_passage_group();
  public:
  const ::apollo::hdmap::PassageGroup& passage_group(int index) const;
  ::apollo::hdmap::PassageGroup* add_passage_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::PassageGroup >&
      passage_group() const;

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // optional .apollo.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::apollo::hdmap::Polygon& polygon() const;
  ::apollo::hdmap::Polygon* release_polygon();
  ::apollo::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::apollo::hdmap::Polygon* polygon);
  private:
  const ::apollo::hdmap::Polygon& _internal_polygon() const;
  ::apollo::hdmap::Polygon* _internal_mutable_polygon();
  public:
  void unsafe_arena_set_allocated_polygon(
      ::apollo::hdmap::Polygon* polygon);
  ::apollo::hdmap::Polygon* unsafe_arena_release_polygon();

  // @@protoc_insertion_point(class_scope:apollo.hdmap.PNCJunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > overlap_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::PassageGroup > passage_group_;
  ::apollo::hdmap::Id* id_;
  ::apollo::hdmap::Polygon* polygon_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Passage

// optional .apollo.hdmap.Id id = 1;
inline bool Passage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Passage::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& Passage::_internal_id() const {
  const ::apollo::hdmap::Id* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& Passage::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Passage.id)
  return _internal_id();
}
inline void Passage::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Passage.id)
}
inline ::apollo::hdmap::Id* Passage::release_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::hdmap::Id* Passage::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Passage.id)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* Passage::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::apollo::hdmap::Id* Passage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Passage.id)
  return _internal_mutable_id();
}
inline void Passage::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Passage.id)
}

// repeated .apollo.hdmap.Id signal_id = 2;
inline int Passage::_internal_signal_id_size() const {
  return signal_id_.size();
}
inline int Passage::signal_id_size() const {
  return _internal_signal_id_size();
}
inline ::apollo::hdmap::Id* Passage::mutable_signal_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Passage.signal_id)
  return signal_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
Passage::mutable_signal_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Passage.signal_id)
  return &signal_id_;
}
inline const ::apollo::hdmap::Id& Passage::_internal_signal_id(int index) const {
  return signal_id_.Get(index);
}
inline const ::apollo::hdmap::Id& Passage::signal_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Passage.signal_id)
  return _internal_signal_id(index);
}
inline ::apollo::hdmap::Id* Passage::_internal_add_signal_id() {
  return signal_id_.Add();
}
inline ::apollo::hdmap::Id* Passage::add_signal_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Passage.signal_id)
  return _internal_add_signal_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
Passage::signal_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Passage.signal_id)
  return signal_id_;
}

// repeated .apollo.hdmap.Id yield_id = 3;
inline int Passage::_internal_yield_id_size() const {
  return yield_id_.size();
}
inline int Passage::yield_id_size() const {
  return _internal_yield_id_size();
}
inline ::apollo::hdmap::Id* Passage::mutable_yield_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Passage.yield_id)
  return yield_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
Passage::mutable_yield_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Passage.yield_id)
  return &yield_id_;
}
inline const ::apollo::hdmap::Id& Passage::_internal_yield_id(int index) const {
  return yield_id_.Get(index);
}
inline const ::apollo::hdmap::Id& Passage::yield_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Passage.yield_id)
  return _internal_yield_id(index);
}
inline ::apollo::hdmap::Id* Passage::_internal_add_yield_id() {
  return yield_id_.Add();
}
inline ::apollo::hdmap::Id* Passage::add_yield_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Passage.yield_id)
  return _internal_add_yield_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
Passage::yield_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Passage.yield_id)
  return yield_id_;
}

// repeated .apollo.hdmap.Id stop_sign_id = 4;
inline int Passage::_internal_stop_sign_id_size() const {
  return stop_sign_id_.size();
}
inline int Passage::stop_sign_id_size() const {
  return _internal_stop_sign_id_size();
}
inline ::apollo::hdmap::Id* Passage::mutable_stop_sign_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Passage.stop_sign_id)
  return stop_sign_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
Passage::mutable_stop_sign_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Passage.stop_sign_id)
  return &stop_sign_id_;
}
inline const ::apollo::hdmap::Id& Passage::_internal_stop_sign_id(int index) const {
  return stop_sign_id_.Get(index);
}
inline const ::apollo::hdmap::Id& Passage::stop_sign_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Passage.stop_sign_id)
  return _internal_stop_sign_id(index);
}
inline ::apollo::hdmap::Id* Passage::_internal_add_stop_sign_id() {
  return stop_sign_id_.Add();
}
inline ::apollo::hdmap::Id* Passage::add_stop_sign_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Passage.stop_sign_id)
  return _internal_add_stop_sign_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
Passage::stop_sign_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Passage.stop_sign_id)
  return stop_sign_id_;
}

// repeated .apollo.hdmap.Id lane_id = 5;
inline int Passage::_internal_lane_id_size() const {
  return lane_id_.size();
}
inline int Passage::lane_id_size() const {
  return _internal_lane_id_size();
}
inline ::apollo::hdmap::Id* Passage::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Passage.lane_id)
  return lane_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
Passage::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Passage.lane_id)
  return &lane_id_;
}
inline const ::apollo::hdmap::Id& Passage::_internal_lane_id(int index) const {
  return lane_id_.Get(index);
}
inline const ::apollo::hdmap::Id& Passage::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Passage.lane_id)
  return _internal_lane_id(index);
}
inline ::apollo::hdmap::Id* Passage::_internal_add_lane_id() {
  return lane_id_.Add();
}
inline ::apollo::hdmap::Id* Passage::add_lane_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Passage.lane_id)
  return _internal_add_lane_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
Passage::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Passage.lane_id)
  return lane_id_;
}

// optional .apollo.hdmap.Passage.Type type = 6;
inline bool Passage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Passage::has_type() const {
  return _internal_has_type();
}
inline void Passage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::Passage_Type Passage::_internal_type() const {
  return static_cast< ::apollo::hdmap::Passage_Type >(type_);
}
inline ::apollo::hdmap::Passage_Type Passage::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Passage.type)
  return _internal_type();
}
inline void Passage::_internal_set_type(::apollo::hdmap::Passage_Type value) {
  assert(::apollo::hdmap::Passage_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Passage::set_type(::apollo::hdmap::Passage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Passage.type)
}

// -------------------------------------------------------------------

// PassageGroup

// optional .apollo.hdmap.Id id = 1;
inline bool PassageGroup::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool PassageGroup::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& PassageGroup::_internal_id() const {
  const ::apollo::hdmap::Id* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& PassageGroup::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.PassageGroup.id)
  return _internal_id();
}
inline void PassageGroup::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.PassageGroup.id)
}
inline ::apollo::hdmap::Id* PassageGroup::release_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::hdmap::Id* PassageGroup::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.PassageGroup.id)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* PassageGroup::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::apollo::hdmap::Id* PassageGroup::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.PassageGroup.id)
  return _internal_mutable_id();
}
inline void PassageGroup::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.PassageGroup.id)
}

// repeated .apollo.hdmap.Passage passage = 2;
inline int PassageGroup::_internal_passage_size() const {
  return passage_.size();
}
inline int PassageGroup::passage_size() const {
  return _internal_passage_size();
}
inline void PassageGroup::clear_passage() {
  passage_.Clear();
}
inline ::apollo::hdmap::Passage* PassageGroup::mutable_passage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.PassageGroup.passage)
  return passage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Passage >*
PassageGroup::mutable_passage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.PassageGroup.passage)
  return &passage_;
}
inline const ::apollo::hdmap::Passage& PassageGroup::_internal_passage(int index) const {
  return passage_.Get(index);
}
inline const ::apollo::hdmap::Passage& PassageGroup::passage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.PassageGroup.passage)
  return _internal_passage(index);
}
inline ::apollo::hdmap::Passage* PassageGroup::_internal_add_passage() {
  return passage_.Add();
}
inline ::apollo::hdmap::Passage* PassageGroup::add_passage() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.PassageGroup.passage)
  return _internal_add_passage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Passage >&
PassageGroup::passage() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.PassageGroup.passage)
  return passage_;
}

// -------------------------------------------------------------------

// PNCJunction

// optional .apollo.hdmap.Id id = 1;
inline bool PNCJunction::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool PNCJunction::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& PNCJunction::_internal_id() const {
  const ::apollo::hdmap::Id* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& PNCJunction::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.PNCJunction.id)
  return _internal_id();
}
inline void PNCJunction::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.PNCJunction.id)
}
inline ::apollo::hdmap::Id* PNCJunction::release_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::hdmap::Id* PNCJunction::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.PNCJunction.id)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* PNCJunction::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::apollo::hdmap::Id* PNCJunction::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.PNCJunction.id)
  return _internal_mutable_id();
}
inline void PNCJunction::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.PNCJunction.id)
}

// optional .apollo.hdmap.Polygon polygon = 2;
inline bool PNCJunction::_internal_has_polygon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || polygon_ != nullptr);
  return value;
}
inline bool PNCJunction::has_polygon() const {
  return _internal_has_polygon();
}
inline const ::apollo::hdmap::Polygon& PNCJunction::_internal_polygon() const {
  const ::apollo::hdmap::Polygon* p = polygon_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Polygon&>(
      ::apollo::hdmap::_Polygon_default_instance_);
}
inline const ::apollo::hdmap::Polygon& PNCJunction::polygon() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.PNCJunction.polygon)
  return _internal_polygon();
}
inline void PNCJunction::unsafe_arena_set_allocated_polygon(
    ::apollo::hdmap::Polygon* polygon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  polygon_ = polygon;
  if (polygon) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.PNCJunction.polygon)
}
inline ::apollo::hdmap::Polygon* PNCJunction::release_polygon() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Polygon* temp = polygon_;
  polygon_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::hdmap::Polygon* PNCJunction::unsafe_arena_release_polygon() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.PNCJunction.polygon)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Polygon* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Polygon* PNCJunction::_internal_mutable_polygon() {
  _has_bits_[0] |= 0x00000002u;
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Polygon>(GetArena());
    polygon_ = p;
  }
  return polygon_;
}
inline ::apollo::hdmap::Polygon* PNCJunction::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.PNCJunction.polygon)
  return _internal_mutable_polygon();
}
inline void PNCJunction::set_allocated_polygon(::apollo::hdmap::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon)->GetArena();
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.PNCJunction.polygon)
}

// repeated .apollo.hdmap.Id overlap_id = 3;
inline int PNCJunction::_internal_overlap_id_size() const {
  return overlap_id_.size();
}
inline int PNCJunction::overlap_id_size() const {
  return _internal_overlap_id_size();
}
inline ::apollo::hdmap::Id* PNCJunction::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.PNCJunction.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
PNCJunction::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.PNCJunction.overlap_id)
  return &overlap_id_;
}
inline const ::apollo::hdmap::Id& PNCJunction::_internal_overlap_id(int index) const {
  return overlap_id_.Get(index);
}
inline const ::apollo::hdmap::Id& PNCJunction::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.PNCJunction.overlap_id)
  return _internal_overlap_id(index);
}
inline ::apollo::hdmap::Id* PNCJunction::_internal_add_overlap_id() {
  return overlap_id_.Add();
}
inline ::apollo::hdmap::Id* PNCJunction::add_overlap_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.PNCJunction.overlap_id)
  return _internal_add_overlap_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
PNCJunction::overlap_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.PNCJunction.overlap_id)
  return overlap_id_;
}

// repeated .apollo.hdmap.PassageGroup passage_group = 4;
inline int PNCJunction::_internal_passage_group_size() const {
  return passage_group_.size();
}
inline int PNCJunction::passage_group_size() const {
  return _internal_passage_group_size();
}
inline void PNCJunction::clear_passage_group() {
  passage_group_.Clear();
}
inline ::apollo::hdmap::PassageGroup* PNCJunction::mutable_passage_group(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.PNCJunction.passage_group)
  return passage_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::PassageGroup >*
PNCJunction::mutable_passage_group() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.PNCJunction.passage_group)
  return &passage_group_;
}
inline const ::apollo::hdmap::PassageGroup& PNCJunction::_internal_passage_group(int index) const {
  return passage_group_.Get(index);
}
inline const ::apollo::hdmap::PassageGroup& PNCJunction::passage_group(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.PNCJunction.passage_group)
  return _internal_passage_group(index);
}
inline ::apollo::hdmap::PassageGroup* PNCJunction::_internal_add_passage_group() {
  return passage_group_.Add();
}
inline ::apollo::hdmap::PassageGroup* PNCJunction::add_passage_group() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.PNCJunction.passage_group)
  return _internal_add_passage_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::PassageGroup >&
PNCJunction::passage_group() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.PNCJunction.passage_group)
  return passage_group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::hdmap::Passage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::Passage_Type>() {
  return ::apollo::hdmap::Passage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto
