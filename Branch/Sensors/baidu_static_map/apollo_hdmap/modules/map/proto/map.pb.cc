// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map.proto

#include "modules/map/proto/map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace hdmap {
constexpr Projection::Projection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proj_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProjectionDefaultTypeInternal {
  constexpr ProjectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectionDefaultTypeInternal() {}
  union {
    Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectionDefaultTypeInternal _Projection_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , district_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , generation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rev_major_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rev_minor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , projection_(nullptr)
  , left_(0)
  , top_(0)
  , right_(0)
  , bottom_(0){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Map::Map(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crosswalk_()
  , junction_()
  , lane_()
  , stop_sign_()
  , signal_()
  , yield_()
  , overlap_()
  , clear_area_()
  , speed_bump_()
  , road_()
  , parking_space_()
  , pnc_junction_()
  , header_(nullptr){}
struct MapDefaultTypeInternal {
  constexpr MapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapDefaultTypeInternal _Map_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fmap_2fproto_2fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Projection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Projection, proj_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, version_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, date_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, projection_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, district_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, generation_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, rev_major_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, rev_minor_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, left_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, top_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, right_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, bottom_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, vendor_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, yield_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, speed_bump_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, road_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, parking_space_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, pnc_junction_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::hdmap::Projection)},
  { 7, 24, sizeof(::apollo::hdmap::Header)},
  { 36, 54, sizeof(::apollo::hdmap::Map)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_Projection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_Map_default_instance_),
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033modules/map/proto/map.proto\022\014apollo.hd"
  "map\032&modules/map/proto/map_clear_area.pr"
  "oto\032%modules/map/proto/map_crosswalk.pro"
  "to\032$modules/map/proto/map_junction.proto"
  "\032 modules/map/proto/map_lane.proto\032#modu"
  "les/map/proto/map_overlap.proto\032\"modules"
  "/map/proto/map_signal.proto\032&modules/map"
  "/proto/map_speed_bump.proto\032%modules/map"
  "/proto/map_stop_sign.proto\032&modules/map/"
  "proto/map_yield_sign.proto\032 modules/map/"
  "proto/map_road.proto\032)modules/map/proto/"
  "map_parking_space.proto\032(modules/map/pro"
  "to/map_pnc_junction.proto\"\032\n\nProjection\022"
  "\014\n\004proj\030\001 \001(\t\"\353\001\n\006Header\022\017\n\007version\030\001 \001("
  "\014\022\014\n\004date\030\002 \001(\014\022,\n\nprojection\030\003 \001(\0132\030.ap"
  "ollo.hdmap.Projection\022\020\n\010district\030\004 \001(\014\022"
  "\022\n\ngeneration\030\005 \001(\014\022\021\n\trev_major\030\006 \001(\014\022\021"
  "\n\trev_minor\030\007 \001(\014\022\014\n\004left\030\010 \001(\001\022\013\n\003top\030\t"
  " \001(\001\022\r\n\005right\030\n \001(\001\022\016\n\006bottom\030\013 \001(\001\022\016\n\006v"
  "endor\030\014 \001(\014\"\244\004\n\003Map\022$\n\006header\030\001 \001(\0132\024.ap"
  "ollo.hdmap.Header\022*\n\tcrosswalk\030\002 \003(\0132\027.a"
  "pollo.hdmap.Crosswalk\022(\n\010junction\030\003 \003(\0132"
  "\026.apollo.hdmap.Junction\022 \n\004lane\030\004 \003(\0132\022."
  "apollo.hdmap.Lane\022)\n\tstop_sign\030\005 \003(\0132\026.a"
  "pollo.hdmap.StopSign\022$\n\006signal\030\006 \003(\0132\024.a"
  "pollo.hdmap.Signal\022&\n\005yield\030\007 \003(\0132\027.apol"
  "lo.hdmap.YieldSign\022&\n\007overlap\030\010 \003(\0132\025.ap"
  "ollo.hdmap.Overlap\022+\n\nclear_area\030\t \003(\0132\027"
  ".apollo.hdmap.ClearArea\022+\n\nspeed_bump\030\n "
  "\003(\0132\027.apollo.hdmap.SpeedBump\022 \n\004road\030\013 \003"
  "(\0132\022.apollo.hdmap.Road\0221\n\rparking_space\030"
  "\014 \003(\0132\032.apollo.hdmap.ParkingSpace\022/\n\014pnc"
  "_junction\030\r \003(\0132\031.apollo.hdmap.PNCJuncti"
  "on"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_deps[12] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fjunction_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_2eproto = {
  false, false, 1322, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_2eproto, "modules/map/proto/map.proto", 
  &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_deps, 12, 3,
  schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_2eproto::offsets,
  file_level_metadata_modules_2fmap_2fproto_2fmap_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_2eproto, file_level_service_descriptors_modules_2fmap_2fproto_2fmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_2eproto);
  return descriptor_table_modules_2fmap_2fproto_2fmap_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_2eproto);
namespace apollo {
namespace hdmap {

// ===================================================================

class Projection::_Internal {
 public:
  using HasBits = decltype(std::declval<Projection>()._has_bits_);
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Projection::Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Projection)
}
Projection::Projection(const Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proj()) {
    proj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proj(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Projection)
}

void Projection::SharedCtor() {
proj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Projection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Projection::ArenaDtor(void* object) {
  Projection* _this = reinterpret_cast< Projection* >(object);
  (void)_this;
}
void Projection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Projection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proj_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Projection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string proj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proj();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.hdmap.Projection.proj");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Projection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Projection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proj = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proj().data(), static_cast<int>(this->_internal_proj().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.Projection.proj");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proj(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Projection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string proj = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proj());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Projection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  const Projection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Projection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Projection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Projection)
    MergeFrom(*source);
  }
}

void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proj()) {
    _internal_set_proj(from._internal_proj());
  }
}

void Projection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::InternalSwap(Projection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proj_.Swap(&other->proj_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Projection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::hdmap::Projection& projection(const Header* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_district(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rev_major(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rev_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::hdmap::Projection&
Header::_Internal::projection(const Header* msg) {
  return *msg->projection_;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date()) {
    date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date(), 
      GetArena());
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_district()) {
    district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_district(), 
      GetArena());
  }
  generation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_generation()) {
    generation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_generation(), 
      GetArena());
  }
  rev_major_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rev_major()) {
    rev_major_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rev_major(), 
      GetArena());
  }
  rev_minor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rev_minor()) {
    rev_minor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rev_minor(), 
      GetArena());
  }
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vendor()) {
    vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor(), 
      GetArena());
  }
  if (from._internal_has_projection()) {
    projection_ = new ::apollo::hdmap::Projection(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Header)
}

void Header::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
generation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rev_major_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rev_minor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&projection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&projection_)) + sizeof(bottom_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rev_major_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rev_minor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete projection_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      district_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      generation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      rev_major_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      rev_minor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      vendor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(projection_ != nullptr);
      projection_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Projection projection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes district = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_district();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes generation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_generation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes rev_major = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_rev_major();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes rev_minor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_rev_minor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double left = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double top = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double right = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bottom = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bytes vendor = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional bytes date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_date(), target);
  }

  // optional .apollo.hdmap.Projection projection = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::projection(this), target, stream);
  }

  // optional bytes district = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_district(), target);
  }

  // optional bytes generation = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_generation(), target);
  }

  // optional bytes rev_major = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_rev_major(), target);
  }

  // optional bytes rev_minor = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_rev_minor(), target);
  }

  // optional double left = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_left(), target);
  }

  // optional double top = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_top(), target);
  }

  // optional double right = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_right(), target);
  }

  // optional double bottom = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_bottom(), target);
  }

  // optional bytes vendor = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_vendor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

    // optional bytes date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_date());
    }

    // optional bytes district = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_district());
    }

    // optional bytes generation = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_generation());
    }

    // optional bytes rev_major = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rev_major());
    }

    // optional bytes rev_minor = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rev_minor());
    }

    // optional bytes vendor = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vendor());
    }

    // optional .apollo.hdmap.Projection projection = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *projection_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double left = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double top = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double right = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double bottom = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_date(from._internal_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_district(from._internal_district());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_generation(from._internal_generation());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_rev_major(from._internal_rev_major());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_rev_minor(from._internal_rev_minor());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_vendor(from._internal_vendor());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_projection()->::apollo::hdmap::Projection::MergeFrom(from._internal_projection());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000200u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000400u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000800u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  generation_.Swap(&other->generation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rev_major_.Swap(&other->rev_major_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rev_minor_.Swap(&other->rev_minor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_.Swap(&other->vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, bottom_)
      + sizeof(Header::bottom_)
      - PROTOBUF_FIELD_OFFSET(Header, projection_)>(
          reinterpret_cast<char*>(&projection_),
          reinterpret_cast<char*>(&other->projection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Map::_Internal {
 public:
  using HasBits = decltype(std::declval<Map>()._has_bits_);
  static const ::apollo::hdmap::Header& header(const Map* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Header&
Map::_Internal::header(const Map* msg) {
  return *msg->header_;
}
void Map::clear_crosswalk() {
  crosswalk_.Clear();
}
void Map::clear_junction() {
  junction_.Clear();
}
void Map::clear_lane() {
  lane_.Clear();
}
void Map::clear_stop_sign() {
  stop_sign_.Clear();
}
void Map::clear_signal() {
  signal_.Clear();
}
void Map::clear_yield() {
  yield_.Clear();
}
void Map::clear_overlap() {
  overlap_.Clear();
}
void Map::clear_clear_area() {
  clear_area_.Clear();
}
void Map::clear_speed_bump() {
  speed_bump_.Clear();
}
void Map::clear_road() {
  road_.Clear();
}
void Map::clear_parking_space() {
  parking_space_.Clear();
}
void Map::clear_pnc_junction() {
  pnc_junction_.Clear();
}
Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crosswalk_(arena),
  junction_(arena),
  lane_(arena),
  stop_sign_(arena),
  signal_(arena),
  yield_(arena),
  overlap_(arena),
  clear_area_(arena),
  speed_bump_(arena),
  road_(arena),
  parking_space_(arena),
  pnc_junction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      crosswalk_(from.crosswalk_),
      junction_(from.junction_),
      lane_(from.lane_),
      stop_sign_(from.stop_sign_),
      signal_(from.signal_),
      yield_(from.yield_),
      overlap_(from.overlap_),
      clear_area_(from.clear_area_),
      speed_bump_(from.speed_bump_),
      road_(from.road_),
      parking_space_(from.parking_space_),
      pnc_junction_(from.pnc_junction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::hdmap::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Map)
}

void Map::SharedCtor() {
header_ = nullptr;
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void Map::ArenaDtor(void* object) {
  Map* _this = reinterpret_cast< Map* >(object);
  (void)_this;
}
void Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crosswalk_.Clear();
  junction_.Clear();
  lane_.Clear();
  stop_sign_.Clear();
  signal_.Clear();
  yield_.Clear();
  overlap_.Clear();
  clear_area_.Clear();
  speed_bump_.Clear();
  road_.Clear();
  parking_space_.Clear();
  pnc_junction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crosswalk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Junction junction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Lane lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.StopSign stop_sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Signal signal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.YieldSign yield = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yield(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Overlap overlap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.ClearArea clear_area = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clear_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_bump(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Road road = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parking_space(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pnc_junction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crosswalk_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_crosswalk(i), target, stream);
  }

  // repeated .apollo.hdmap.Junction junction = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_junction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_junction(i), target, stream);
  }

  // repeated .apollo.hdmap.Lane lane = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_lane(i), target, stream);
  }

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_sign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stop_sign(i), target, stream);
  }

  // repeated .apollo.hdmap.Signal signal = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_signal(i), target, stream);
  }

  // repeated .apollo.hdmap.YieldSign yield = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yield_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_yield(i), target, stream);
  }

  // repeated .apollo.hdmap.Overlap overlap = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overlap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_overlap(i), target, stream);
  }

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clear_area_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_clear_area(i), target, stream);
  }

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_bump_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_speed_bump(i), target, stream);
  }

  // repeated .apollo.hdmap.Road road = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_road(i), target, stream);
  }

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parking_space_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_parking_space(i), target, stream);
  }

  // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pnc_junction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_pnc_junction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  total_size += 1UL * this->_internal_crosswalk_size();
  for (const auto& msg : this->crosswalk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Junction junction = 3;
  total_size += 1UL * this->_internal_junction_size();
  for (const auto& msg : this->junction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Lane lane = 4;
  total_size += 1UL * this->_internal_lane_size();
  for (const auto& msg : this->lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  total_size += 1UL * this->_internal_stop_sign_size();
  for (const auto& msg : this->stop_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Signal signal = 6;
  total_size += 1UL * this->_internal_signal_size();
  for (const auto& msg : this->signal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.YieldSign yield = 7;
  total_size += 1UL * this->_internal_yield_size();
  for (const auto& msg : this->yield_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Overlap overlap = 8;
  total_size += 1UL * this->_internal_overlap_size();
  for (const auto& msg : this->overlap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  total_size += 1UL * this->_internal_clear_area_size();
  for (const auto& msg : this->clear_area_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  total_size += 1UL * this->_internal_speed_bump_size();
  for (const auto& msg : this->speed_bump_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Road road = 11;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->road_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  total_size += 1UL * this->_internal_parking_space_size();
  for (const auto& msg : this->parking_space_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
  total_size += 1UL * this->_internal_pnc_junction_size();
  for (const auto& msg : this->pnc_junction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crosswalk_.MergeFrom(from.crosswalk_);
  junction_.MergeFrom(from.junction_);
  lane_.MergeFrom(from.lane_);
  stop_sign_.MergeFrom(from.stop_sign_);
  signal_.MergeFrom(from.signal_);
  yield_.MergeFrom(from.yield_);
  overlap_.MergeFrom(from.overlap_);
  clear_area_.MergeFrom(from.clear_area_);
  speed_bump_.MergeFrom(from.speed_bump_);
  road_.MergeFrom(from.road_);
  parking_space_.MergeFrom(from.parking_space_);
  pnc_junction_.MergeFrom(from.pnc_junction_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::apollo::hdmap::Header::MergeFrom(from._internal_header());
  }
}

void Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  crosswalk_.InternalSwap(&other->crosswalk_);
  junction_.InternalSwap(&other->junction_);
  lane_.InternalSwap(&other->lane_);
  stop_sign_.InternalSwap(&other->stop_sign_);
  signal_.InternalSwap(&other->signal_);
  yield_.InternalSwap(&other->yield_);
  overlap_.InternalSwap(&other->overlap_);
  clear_area_.InternalSwap(&other->clear_area_);
  speed_bump_.InternalSwap(&other->speed_bump_);
  road_.InternalSwap(&other->road_);
  parking_space_.InternalSwap(&other->parking_space_);
  pnc_junction_.InternalSwap(&other->pnc_junction_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Projection* Arena::CreateMaybeMessage< ::apollo::hdmap::Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Header* Arena::CreateMaybeMessage< ::apollo::hdmap::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Map* Arena::CreateMaybeMessage< ::apollo::hdmap::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Map >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
