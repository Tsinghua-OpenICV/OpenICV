// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_signal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fsignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
#include "modules/map/proto/map_geometry.pb.h"
#include "modules/map/proto/map_id.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_5fsignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2fproto_2fmap_5fsignal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_metadata_getter(int index);
namespace apollo {
namespace hdmap {
class SignInfo;
struct SignInfoDefaultTypeInternal;
extern SignInfoDefaultTypeInternal _SignInfo_default_instance_;
class Signal;
struct SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Subsignal;
struct SubsignalDefaultTypeInternal;
extern SubsignalDefaultTypeInternal _Subsignal_default_instance_;
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::hdmap::SignInfo* Arena::CreateMaybeMessage<::apollo::hdmap::SignInfo>(Arena*);
template<> ::apollo::hdmap::Signal* Arena::CreateMaybeMessage<::apollo::hdmap::Signal>(Arena*);
template<> ::apollo::hdmap::Subsignal* Arena::CreateMaybeMessage<::apollo::hdmap::Subsignal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace hdmap {

enum Subsignal_Type : int {
  Subsignal_Type_UNKNOWN = 1,
  Subsignal_Type_CIRCLE = 2,
  Subsignal_Type_ARROW_LEFT = 3,
  Subsignal_Type_ARROW_FORWARD = 4,
  Subsignal_Type_ARROW_RIGHT = 5,
  Subsignal_Type_ARROW_LEFT_AND_FORWARD = 6,
  Subsignal_Type_ARROW_RIGHT_AND_FORWARD = 7,
  Subsignal_Type_ARROW_U_TURN = 8
};
bool Subsignal_Type_IsValid(int value);
constexpr Subsignal_Type Subsignal_Type_Type_MIN = Subsignal_Type_UNKNOWN;
constexpr Subsignal_Type Subsignal_Type_Type_MAX = Subsignal_Type_ARROW_U_TURN;
constexpr int Subsignal_Type_Type_ARRAYSIZE = Subsignal_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Subsignal_Type_descriptor();
template<typename T>
inline const std::string& Subsignal_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Subsignal_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Subsignal_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Subsignal_Type_descriptor(), enum_t_value);
}
inline bool Subsignal_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Subsignal_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Subsignal_Type>(
    Subsignal_Type_descriptor(), name, value);
}
enum SignInfo_Type : int {
  SignInfo_Type_None = 0,
  SignInfo_Type_NO_RIGHT_TURN_ON_RED = 1
};
bool SignInfo_Type_IsValid(int value);
constexpr SignInfo_Type SignInfo_Type_Type_MIN = SignInfo_Type_None;
constexpr SignInfo_Type SignInfo_Type_Type_MAX = SignInfo_Type_NO_RIGHT_TURN_ON_RED;
constexpr int SignInfo_Type_Type_ARRAYSIZE = SignInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignInfo_Type_descriptor();
template<typename T>
inline const std::string& SignInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SignInfo_Type_descriptor(), enum_t_value);
}
inline bool SignInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SignInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignInfo_Type>(
    SignInfo_Type_descriptor(), name, value);
}
enum Signal_Type : int {
  Signal_Type_UNKNOWN = 1,
  Signal_Type_MIX_2_HORIZONTAL = 2,
  Signal_Type_MIX_2_VERTICAL = 3,
  Signal_Type_MIX_3_HORIZONTAL = 4,
  Signal_Type_MIX_3_VERTICAL = 5,
  Signal_Type_SINGLE = 6
};
bool Signal_Type_IsValid(int value);
constexpr Signal_Type Signal_Type_Type_MIN = Signal_Type_UNKNOWN;
constexpr Signal_Type Signal_Type_Type_MAX = Signal_Type_SINGLE;
constexpr int Signal_Type_Type_ARRAYSIZE = Signal_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signal_Type_descriptor();
template<typename T>
inline const std::string& Signal_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Signal_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Signal_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Signal_Type_descriptor(), enum_t_value);
}
inline bool Signal_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Signal_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Signal_Type>(
    Signal_Type_descriptor(), name, value);
}
// ===================================================================

class Subsignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Subsignal) */ {
 public:
  inline Subsignal() : Subsignal(nullptr) {}
  virtual ~Subsignal();
  explicit constexpr Subsignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subsignal(const Subsignal& from);
  Subsignal(Subsignal&& from) noexcept
    : Subsignal() {
    *this = ::std::move(from);
  }

  inline Subsignal& operator=(const Subsignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subsignal& operator=(Subsignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subsignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subsignal* internal_default_instance() {
    return reinterpret_cast<const Subsignal*>(
               &_Subsignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Subsignal& a, Subsignal& b) {
    a.Swap(&b);
  }
  inline void Swap(Subsignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subsignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subsignal* New() const final {
    return CreateMaybeMessage<Subsignal>(nullptr);
  }

  Subsignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subsignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subsignal& from);
  void MergeFrom(const Subsignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subsignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Subsignal";
  }
  protected:
  explicit Subsignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Subsignal_Type Type;
  static constexpr Type UNKNOWN =
    Subsignal_Type_UNKNOWN;
  static constexpr Type CIRCLE =
    Subsignal_Type_CIRCLE;
  static constexpr Type ARROW_LEFT =
    Subsignal_Type_ARROW_LEFT;
  static constexpr Type ARROW_FORWARD =
    Subsignal_Type_ARROW_FORWARD;
  static constexpr Type ARROW_RIGHT =
    Subsignal_Type_ARROW_RIGHT;
  static constexpr Type ARROW_LEFT_AND_FORWARD =
    Subsignal_Type_ARROW_LEFT_AND_FORWARD;
  static constexpr Type ARROW_RIGHT_AND_FORWARD =
    Subsignal_Type_ARROW_RIGHT_AND_FORWARD;
  static constexpr Type ARROW_U_TURN =
    Subsignal_Type_ARROW_U_TURN;
  static inline bool Type_IsValid(int value) {
    return Subsignal_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Subsignal_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Subsignal_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Subsignal_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Subsignal_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Subsignal_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Subsignal_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocationFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // optional .apollo.common.PointENU location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::apollo::common::PointENU& location() const;
  ::apollo::common::PointENU* release_location();
  ::apollo::common::PointENU* mutable_location();
  void set_allocated_location(::apollo::common::PointENU* location);
  private:
  const ::apollo::common::PointENU& _internal_location() const;
  ::apollo::common::PointENU* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::apollo::common::PointENU* location);
  ::apollo::common::PointENU* unsafe_arena_release_location();

  // optional .apollo.hdmap.Subsignal.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::hdmap::Subsignal_Type type() const;
  void set_type(::apollo::hdmap::Subsignal_Type value);
  private:
  ::apollo::hdmap::Subsignal_Type _internal_type() const;
  void _internal_set_type(::apollo::hdmap::Subsignal_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Subsignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::hdmap::Id* id_;
  ::apollo::common::PointENU* location_;
  int type_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class SignInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.SignInfo) */ {
 public:
  inline SignInfo() : SignInfo(nullptr) {}
  virtual ~SignInfo();
  explicit constexpr SignInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignInfo(const SignInfo& from);
  SignInfo(SignInfo&& from) noexcept
    : SignInfo() {
    *this = ::std::move(from);
  }

  inline SignInfo& operator=(const SignInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignInfo& operator=(SignInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignInfo* internal_default_instance() {
    return reinterpret_cast<const SignInfo*>(
               &_SignInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignInfo& a, SignInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SignInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignInfo* New() const final {
    return CreateMaybeMessage<SignInfo>(nullptr);
  }

  SignInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignInfo& from);
  void MergeFrom(const SignInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.SignInfo";
  }
  protected:
  explicit SignInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SignInfo_Type Type;
  static constexpr Type None =
    SignInfo_Type_None;
  static constexpr Type NO_RIGHT_TURN_ON_RED =
    SignInfo_Type_NO_RIGHT_TURN_ON_RED;
  static inline bool Type_IsValid(int value) {
    return SignInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SignInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SignInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SignInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SignInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SignInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SignInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .apollo.hdmap.SignInfo.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::hdmap::SignInfo_Type type() const;
  void set_type(::apollo::hdmap::SignInfo_Type value);
  private:
  ::apollo::hdmap::SignInfo_Type _internal_type() const;
  void _internal_set_type(::apollo::hdmap::SignInfo_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.SignInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class Signal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {}
  virtual ~Signal();
  explicit constexpr Signal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signal* New() const final {
    return CreateMaybeMessage<Signal>(nullptr);
  }

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Signal_Type Type;
  static constexpr Type UNKNOWN =
    Signal_Type_UNKNOWN;
  static constexpr Type MIX_2_HORIZONTAL =
    Signal_Type_MIX_2_HORIZONTAL;
  static constexpr Type MIX_2_VERTICAL =
    Signal_Type_MIX_2_VERTICAL;
  static constexpr Type MIX_3_HORIZONTAL =
    Signal_Type_MIX_3_HORIZONTAL;
  static constexpr Type MIX_3_VERTICAL =
    Signal_Type_MIX_3_VERTICAL;
  static constexpr Type SINGLE =
    Signal_Type_SINGLE;
  static inline bool Type_IsValid(int value) {
    return Signal_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Signal_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Signal_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Signal_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Signal_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Signal_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Signal_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubsignalFieldNumber = 3,
    kOverlapIdFieldNumber = 4,
    kStopLineFieldNumber = 6,
    kSignInfoFieldNumber = 7,
    kIdFieldNumber = 1,
    kBoundaryFieldNumber = 2,
    kTypeFieldNumber = 5,
  };
  // repeated .apollo.hdmap.Subsignal subsignal = 3;
  int subsignal_size() const;
  private:
  int _internal_subsignal_size() const;
  public:
  void clear_subsignal();
  ::apollo::hdmap::Subsignal* mutable_subsignal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Subsignal >*
      mutable_subsignal();
  private:
  const ::apollo::hdmap::Subsignal& _internal_subsignal(int index) const;
  ::apollo::hdmap::Subsignal* _internal_add_subsignal();
  public:
  const ::apollo::hdmap::Subsignal& subsignal(int index) const;
  ::apollo::hdmap::Subsignal* add_subsignal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Subsignal >&
      subsignal() const;

  // repeated .apollo.hdmap.Id overlap_id = 4;
  int overlap_id_size() const;
  private:
  int _internal_overlap_id_size() const;
  public:
  void clear_overlap_id();
  ::apollo::hdmap::Id* mutable_overlap_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_overlap_id();
  private:
  const ::apollo::hdmap::Id& _internal_overlap_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_overlap_id();
  public:
  const ::apollo::hdmap::Id& overlap_id(int index) const;
  ::apollo::hdmap::Id* add_overlap_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      overlap_id() const;

  // repeated .apollo.hdmap.Curve stop_line = 6;
  int stop_line_size() const;
  private:
  int _internal_stop_line_size() const;
  public:
  void clear_stop_line();
  ::apollo::hdmap::Curve* mutable_stop_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Curve >*
      mutable_stop_line();
  private:
  const ::apollo::hdmap::Curve& _internal_stop_line(int index) const;
  ::apollo::hdmap::Curve* _internal_add_stop_line();
  public:
  const ::apollo::hdmap::Curve& stop_line(int index) const;
  ::apollo::hdmap::Curve* add_stop_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Curve >&
      stop_line() const;

  // repeated .apollo.hdmap.SignInfo sign_info = 7;
  int sign_info_size() const;
  private:
  int _internal_sign_info_size() const;
  public:
  void clear_sign_info();
  ::apollo::hdmap::SignInfo* mutable_sign_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SignInfo >*
      mutable_sign_info();
  private:
  const ::apollo::hdmap::SignInfo& _internal_sign_info(int index) const;
  ::apollo::hdmap::SignInfo* _internal_add_sign_info();
  public:
  const ::apollo::hdmap::SignInfo& sign_info(int index) const;
  ::apollo::hdmap::SignInfo* add_sign_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SignInfo >&
      sign_info() const;

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // optional .apollo.hdmap.Polygon boundary = 2;
  bool has_boundary() const;
  private:
  bool _internal_has_boundary() const;
  public:
  void clear_boundary();
  const ::apollo::hdmap::Polygon& boundary() const;
  ::apollo::hdmap::Polygon* release_boundary();
  ::apollo::hdmap::Polygon* mutable_boundary();
  void set_allocated_boundary(::apollo::hdmap::Polygon* boundary);
  private:
  const ::apollo::hdmap::Polygon& _internal_boundary() const;
  ::apollo::hdmap::Polygon* _internal_mutable_boundary();
  public:
  void unsafe_arena_set_allocated_boundary(
      ::apollo::hdmap::Polygon* boundary);
  ::apollo::hdmap::Polygon* unsafe_arena_release_boundary();

  // optional .apollo.hdmap.Signal.Type type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::hdmap::Signal_Type type() const;
  void set_type(::apollo::hdmap::Signal_Type value);
  private:
  ::apollo::hdmap::Signal_Type _internal_type() const;
  void _internal_set_type(::apollo::hdmap::Signal_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Signal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Subsignal > subsignal_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > overlap_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Curve > stop_line_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SignInfo > sign_info_;
  ::apollo::hdmap::Id* id_;
  ::apollo::hdmap::Polygon* boundary_;
  int type_;
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subsignal

// optional .apollo.hdmap.Id id = 1;
inline bool Subsignal::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Subsignal::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& Subsignal::_internal_id() const {
  const ::apollo::hdmap::Id* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& Subsignal::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Subsignal.id)
  return _internal_id();
}
inline void Subsignal::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Subsignal.id)
}
inline ::apollo::hdmap::Id* Subsignal::release_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::hdmap::Id* Subsignal::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Subsignal.id)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* Subsignal::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::apollo::hdmap::Id* Subsignal::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Subsignal.id)
  return _internal_mutable_id();
}
inline void Subsignal::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Subsignal.id)
}

// optional .apollo.hdmap.Subsignal.Type type = 2;
inline bool Subsignal::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Subsignal::has_type() const {
  return _internal_has_type();
}
inline void Subsignal::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::hdmap::Subsignal_Type Subsignal::_internal_type() const {
  return static_cast< ::apollo::hdmap::Subsignal_Type >(type_);
}
inline ::apollo::hdmap::Subsignal_Type Subsignal::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Subsignal.type)
  return _internal_type();
}
inline void Subsignal::_internal_set_type(::apollo::hdmap::Subsignal_Type value) {
  assert(::apollo::hdmap::Subsignal_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Subsignal::set_type(::apollo::hdmap::Subsignal_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Subsignal.type)
}

// optional .apollo.common.PointENU location = 3;
inline bool Subsignal::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool Subsignal::has_location() const {
  return _internal_has_location();
}
inline const ::apollo::common::PointENU& Subsignal::_internal_location() const {
  const ::apollo::common::PointENU* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& Subsignal::location() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Subsignal.location)
  return _internal_location();
}
inline void Subsignal::unsafe_arena_set_allocated_location(
    ::apollo::common::PointENU* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Subsignal.location)
}
inline ::apollo::common::PointENU* Subsignal::release_location() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointENU* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::PointENU* Subsignal::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Subsignal.location)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointENU* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* Subsignal::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::apollo::common::PointENU* Subsignal::mutable_location() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Subsignal.location)
  return _internal_mutable_location();
}
inline void Subsignal::set_allocated_location(::apollo::common::PointENU* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location)->GetArena();
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Subsignal.location)
}

// -------------------------------------------------------------------

// SignInfo

// optional .apollo.hdmap.SignInfo.Type type = 1;
inline bool SignInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignInfo::has_type() const {
  return _internal_has_type();
}
inline void SignInfo::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::hdmap::SignInfo_Type SignInfo::_internal_type() const {
  return static_cast< ::apollo::hdmap::SignInfo_Type >(type_);
}
inline ::apollo::hdmap::SignInfo_Type SignInfo::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.SignInfo.type)
  return _internal_type();
}
inline void SignInfo::_internal_set_type(::apollo::hdmap::SignInfo_Type value) {
  assert(::apollo::hdmap::SignInfo_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void SignInfo::set_type(::apollo::hdmap::SignInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.SignInfo.type)
}

// -------------------------------------------------------------------

// Signal

// optional .apollo.hdmap.Id id = 1;
inline bool Signal::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Signal::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& Signal::_internal_id() const {
  const ::apollo::hdmap::Id* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& Signal::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.id)
  return _internal_id();
}
inline void Signal::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Signal.id)
}
inline ::apollo::hdmap::Id* Signal::release_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::hdmap::Id* Signal::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Signal.id)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* Signal::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::apollo::hdmap::Id* Signal::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.id)
  return _internal_mutable_id();
}
inline void Signal::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Signal.id)
}

// optional .apollo.hdmap.Polygon boundary = 2;
inline bool Signal::_internal_has_boundary() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || boundary_ != nullptr);
  return value;
}
inline bool Signal::has_boundary() const {
  return _internal_has_boundary();
}
inline const ::apollo::hdmap::Polygon& Signal::_internal_boundary() const {
  const ::apollo::hdmap::Polygon* p = boundary_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Polygon&>(
      ::apollo::hdmap::_Polygon_default_instance_);
}
inline const ::apollo::hdmap::Polygon& Signal::boundary() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.boundary)
  return _internal_boundary();
}
inline void Signal::unsafe_arena_set_allocated_boundary(
    ::apollo::hdmap::Polygon* boundary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundary_);
  }
  boundary_ = boundary;
  if (boundary) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Signal.boundary)
}
inline ::apollo::hdmap::Polygon* Signal::release_boundary() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Polygon* temp = boundary_;
  boundary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::hdmap::Polygon* Signal::unsafe_arena_release_boundary() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Signal.boundary)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Polygon* temp = boundary_;
  boundary_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Polygon* Signal::_internal_mutable_boundary() {
  _has_bits_[0] |= 0x00000002u;
  if (boundary_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Polygon>(GetArena());
    boundary_ = p;
  }
  return boundary_;
}
inline ::apollo::hdmap::Polygon* Signal::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.boundary)
  return _internal_mutable_boundary();
}
inline void Signal::set_allocated_boundary(::apollo::hdmap::Polygon* boundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundary_);
  }
  if (boundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundary)->GetArena();
    if (message_arena != submessage_arena) {
      boundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  boundary_ = boundary;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Signal.boundary)
}

// repeated .apollo.hdmap.Subsignal subsignal = 3;
inline int Signal::_internal_subsignal_size() const {
  return subsignal_.size();
}
inline int Signal::subsignal_size() const {
  return _internal_subsignal_size();
}
inline void Signal::clear_subsignal() {
  subsignal_.Clear();
}
inline ::apollo::hdmap::Subsignal* Signal::mutable_subsignal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.subsignal)
  return subsignal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Subsignal >*
Signal::mutable_subsignal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Signal.subsignal)
  return &subsignal_;
}
inline const ::apollo::hdmap::Subsignal& Signal::_internal_subsignal(int index) const {
  return subsignal_.Get(index);
}
inline const ::apollo::hdmap::Subsignal& Signal::subsignal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.subsignal)
  return _internal_subsignal(index);
}
inline ::apollo::hdmap::Subsignal* Signal::_internal_add_subsignal() {
  return subsignal_.Add();
}
inline ::apollo::hdmap::Subsignal* Signal::add_subsignal() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Signal.subsignal)
  return _internal_add_subsignal();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Subsignal >&
Signal::subsignal() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Signal.subsignal)
  return subsignal_;
}

// repeated .apollo.hdmap.Id overlap_id = 4;
inline int Signal::_internal_overlap_id_size() const {
  return overlap_id_.size();
}
inline int Signal::overlap_id_size() const {
  return _internal_overlap_id_size();
}
inline ::apollo::hdmap::Id* Signal::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
Signal::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Signal.overlap_id)
  return &overlap_id_;
}
inline const ::apollo::hdmap::Id& Signal::_internal_overlap_id(int index) const {
  return overlap_id_.Get(index);
}
inline const ::apollo::hdmap::Id& Signal::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.overlap_id)
  return _internal_overlap_id(index);
}
inline ::apollo::hdmap::Id* Signal::_internal_add_overlap_id() {
  return overlap_id_.Add();
}
inline ::apollo::hdmap::Id* Signal::add_overlap_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Signal.overlap_id)
  return _internal_add_overlap_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
Signal::overlap_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Signal.overlap_id)
  return overlap_id_;
}

// optional .apollo.hdmap.Signal.Type type = 5;
inline bool Signal::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Signal::has_type() const {
  return _internal_has_type();
}
inline void Signal::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::hdmap::Signal_Type Signal::_internal_type() const {
  return static_cast< ::apollo::hdmap::Signal_Type >(type_);
}
inline ::apollo::hdmap::Signal_Type Signal::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.type)
  return _internal_type();
}
inline void Signal::_internal_set_type(::apollo::hdmap::Signal_Type value) {
  assert(::apollo::hdmap::Signal_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Signal::set_type(::apollo::hdmap::Signal_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Signal.type)
}

// repeated .apollo.hdmap.Curve stop_line = 6;
inline int Signal::_internal_stop_line_size() const {
  return stop_line_.size();
}
inline int Signal::stop_line_size() const {
  return _internal_stop_line_size();
}
inline ::apollo::hdmap::Curve* Signal::mutable_stop_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.stop_line)
  return stop_line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Curve >*
Signal::mutable_stop_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Signal.stop_line)
  return &stop_line_;
}
inline const ::apollo::hdmap::Curve& Signal::_internal_stop_line(int index) const {
  return stop_line_.Get(index);
}
inline const ::apollo::hdmap::Curve& Signal::stop_line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.stop_line)
  return _internal_stop_line(index);
}
inline ::apollo::hdmap::Curve* Signal::_internal_add_stop_line() {
  return stop_line_.Add();
}
inline ::apollo::hdmap::Curve* Signal::add_stop_line() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Signal.stop_line)
  return _internal_add_stop_line();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Curve >&
Signal::stop_line() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Signal.stop_line)
  return stop_line_;
}

// repeated .apollo.hdmap.SignInfo sign_info = 7;
inline int Signal::_internal_sign_info_size() const {
  return sign_info_.size();
}
inline int Signal::sign_info_size() const {
  return _internal_sign_info_size();
}
inline void Signal::clear_sign_info() {
  sign_info_.Clear();
}
inline ::apollo::hdmap::SignInfo* Signal::mutable_sign_info(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Signal.sign_info)
  return sign_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SignInfo >*
Signal::mutable_sign_info() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Signal.sign_info)
  return &sign_info_;
}
inline const ::apollo::hdmap::SignInfo& Signal::_internal_sign_info(int index) const {
  return sign_info_.Get(index);
}
inline const ::apollo::hdmap::SignInfo& Signal::sign_info(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Signal.sign_info)
  return _internal_sign_info(index);
}
inline ::apollo::hdmap::SignInfo* Signal::_internal_add_sign_info() {
  return sign_info_.Add();
}
inline ::apollo::hdmap::SignInfo* Signal::add_sign_info() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Signal.sign_info)
  return _internal_add_sign_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SignInfo >&
Signal::sign_info() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Signal.sign_info)
  return sign_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::hdmap::Subsignal_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::Subsignal_Type>() {
  return ::apollo::hdmap::Subsignal_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::hdmap::SignInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::SignInfo_Type>() {
  return ::apollo::hdmap::SignInfo_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::hdmap::Signal_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::Signal_Type>() {
  return ::apollo::hdmap::Signal_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5fsignal_2eproto
