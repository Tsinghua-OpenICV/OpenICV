// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/probabilistic_fusion_config.proto

#ifndef PROTOBUF_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace fusion {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto();
void protobuf_AssignDesc_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto();
void protobuf_ShutdownFile_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto();

class ProbabilisticFusionConfig;

// ===================================================================

class ProbabilisticFusionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.fusion.ProbabilisticFusionConfig) */ {
 public:
  ProbabilisticFusionConfig();
  virtual ~ProbabilisticFusionConfig();

  ProbabilisticFusionConfig(const ProbabilisticFusionConfig& from);

  inline ProbabilisticFusionConfig& operator=(const ProbabilisticFusionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProbabilisticFusionConfig& default_instance();

  void Swap(ProbabilisticFusionConfig* other);

  // implements Message ----------------------------------------------

  inline ProbabilisticFusionConfig* New() const { return New(NULL); }

  ProbabilisticFusionConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProbabilisticFusionConfig& from);
  void MergeFrom(const ProbabilisticFusionConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProbabilisticFusionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_lidar = 1 [default = true];
  bool has_use_lidar() const;
  void clear_use_lidar();
  static const int kUseLidarFieldNumber = 1;
  bool use_lidar() const;
  void set_use_lidar(bool value);

  // optional bool use_radar = 2 [default = true];
  bool has_use_radar() const;
  void clear_use_radar();
  static const int kUseRadarFieldNumber = 2;
  bool use_radar() const;
  void set_use_radar(bool value);

  // optional bool use_camera = 3 [default = true];
  bool has_use_camera() const;
  void clear_use_camera();
  static const int kUseCameraFieldNumber = 3;
  bool use_camera() const;
  void set_use_camera(bool value);

  // optional string tracker_method = 4 [default = "PbfTracker"];
  bool has_tracker_method() const;
  void clear_tracker_method();
  static const int kTrackerMethodFieldNumber = 4;
  const ::std::string& tracker_method() const;
  void set_tracker_method(const ::std::string& value);
  void set_tracker_method(const char* value);
  void set_tracker_method(const char* value, size_t size);
  ::std::string* mutable_tracker_method();
  ::std::string* release_tracker_method();
  void set_allocated_tracker_method(::std::string* tracker_method);

  // optional string data_association_method = 5 [default = "HMAssociation"];
  bool has_data_association_method() const;
  void clear_data_association_method();
  static const int kDataAssociationMethodFieldNumber = 5;
  const ::std::string& data_association_method() const;
  void set_data_association_method(const ::std::string& value);
  void set_data_association_method(const char* value);
  void set_data_association_method(const char* value, size_t size);
  ::std::string* mutable_data_association_method();
  ::std::string* release_data_association_method();
  void set_allocated_data_association_method(::std::string* data_association_method);

  // optional string gate_keeper_method = 6 [default = "PbfGatekeeper"];
  bool has_gate_keeper_method() const;
  void clear_gate_keeper_method();
  static const int kGateKeeperMethodFieldNumber = 6;
  const ::std::string& gate_keeper_method() const;
  void set_gate_keeper_method(const ::std::string& value);
  void set_gate_keeper_method(const char* value);
  void set_gate_keeper_method(const char* value, size_t size);
  ::std::string* mutable_gate_keeper_method();
  ::std::string* release_gate_keeper_method();
  void set_allocated_gate_keeper_method(::std::string* gate_keeper_method);

  // repeated string prohibition_sensors = 7;
  int prohibition_sensors_size() const;
  void clear_prohibition_sensors();
  static const int kProhibitionSensorsFieldNumber = 7;
  const ::std::string& prohibition_sensors(int index) const;
  ::std::string* mutable_prohibition_sensors(int index);
  void set_prohibition_sensors(int index, const ::std::string& value);
  void set_prohibition_sensors(int index, const char* value);
  void set_prohibition_sensors(int index, const char* value, size_t size);
  ::std::string* add_prohibition_sensors();
  void add_prohibition_sensors(const ::std::string& value);
  void add_prohibition_sensors(const char* value);
  void add_prohibition_sensors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& prohibition_sensors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_prohibition_sensors();

  // optional double max_lidar_invisible_period = 8 [default = 0.25];
  bool has_max_lidar_invisible_period() const;
  void clear_max_lidar_invisible_period();
  static const int kMaxLidarInvisiblePeriodFieldNumber = 8;
  double max_lidar_invisible_period() const;
  void set_max_lidar_invisible_period(double value);

  // optional double max_radar_invisible_period = 9 [default = 0.5];
  bool has_max_radar_invisible_period() const;
  void clear_max_radar_invisible_period();
  static const int kMaxRadarInvisiblePeriodFieldNumber = 9;
  double max_radar_invisible_period() const;
  void set_max_radar_invisible_period(double value);

  // optional double max_camera_invisible_period = 10 [default = 0.75];
  bool has_max_camera_invisible_period() const;
  void clear_max_camera_invisible_period();
  static const int kMaxCameraInvisiblePeriodFieldNumber = 10;
  double max_camera_invisible_period() const;
  void set_max_camera_invisible_period(double value);

  // optional int64 max_cached_frame_num = 11 [default = 50];
  bool has_max_cached_frame_num() const;
  void clear_max_cached_frame_num();
  static const int kMaxCachedFrameNumFieldNumber = 11;
  ::google::protobuf::int64 max_cached_frame_num() const;
  void set_max_cached_frame_num(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.fusion.ProbabilisticFusionConfig)
 private:
  inline void set_has_use_lidar();
  inline void clear_has_use_lidar();
  inline void set_has_use_radar();
  inline void clear_has_use_radar();
  inline void set_has_use_camera();
  inline void clear_has_use_camera();
  inline void set_has_tracker_method();
  inline void clear_has_tracker_method();
  inline void set_has_data_association_method();
  inline void clear_has_data_association_method();
  inline void set_has_gate_keeper_method();
  inline void clear_has_gate_keeper_method();
  inline void set_has_max_lidar_invisible_period();
  inline void clear_has_max_lidar_invisible_period();
  inline void set_has_max_radar_invisible_period();
  inline void clear_has_max_radar_invisible_period();
  inline void set_has_max_camera_invisible_period();
  inline void clear_has_max_camera_invisible_period();
  inline void set_has_max_cached_frame_num();
  inline void clear_has_max_cached_frame_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_tracker_method_;
  ::google::protobuf::internal::ArenaStringPtr tracker_method_;
  static ::std::string* _default_data_association_method_;
  ::google::protobuf::internal::ArenaStringPtr data_association_method_;
  static ::std::string* _default_gate_keeper_method_;
  ::google::protobuf::internal::ArenaStringPtr gate_keeper_method_;
  ::google::protobuf::RepeatedPtrField< ::std::string> prohibition_sensors_;
  double max_lidar_invisible_period_;
  double max_radar_invisible_period_;
  double max_camera_invisible_period_;
  ::google::protobuf::int64 max_cached_frame_num_;
  bool use_lidar_;
  bool use_radar_;
  bool use_camera_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ProbabilisticFusionConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbabilisticFusionConfig

// optional bool use_lidar = 1 [default = true];
inline bool ProbabilisticFusionConfig::has_use_lidar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_use_lidar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProbabilisticFusionConfig::clear_has_use_lidar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProbabilisticFusionConfig::clear_use_lidar() {
  use_lidar_ = true;
  clear_has_use_lidar();
}
inline bool ProbabilisticFusionConfig::use_lidar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.use_lidar)
  return use_lidar_;
}
inline void ProbabilisticFusionConfig::set_use_lidar(bool value) {
  set_has_use_lidar();
  use_lidar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.use_lidar)
}

// optional bool use_radar = 2 [default = true];
inline bool ProbabilisticFusionConfig::has_use_radar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_use_radar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProbabilisticFusionConfig::clear_has_use_radar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProbabilisticFusionConfig::clear_use_radar() {
  use_radar_ = true;
  clear_has_use_radar();
}
inline bool ProbabilisticFusionConfig::use_radar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.use_radar)
  return use_radar_;
}
inline void ProbabilisticFusionConfig::set_use_radar(bool value) {
  set_has_use_radar();
  use_radar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.use_radar)
}

// optional bool use_camera = 3 [default = true];
inline bool ProbabilisticFusionConfig::has_use_camera() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_use_camera() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProbabilisticFusionConfig::clear_has_use_camera() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProbabilisticFusionConfig::clear_use_camera() {
  use_camera_ = true;
  clear_has_use_camera();
}
inline bool ProbabilisticFusionConfig::use_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.use_camera)
  return use_camera_;
}
inline void ProbabilisticFusionConfig::set_use_camera(bool value) {
  set_has_use_camera();
  use_camera_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.use_camera)
}

// optional string tracker_method = 4 [default = "PbfTracker"];
inline bool ProbabilisticFusionConfig::has_tracker_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_tracker_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProbabilisticFusionConfig::clear_has_tracker_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProbabilisticFusionConfig::clear_tracker_method() {
  tracker_method_.ClearToDefaultNoArena(_default_tracker_method_);
  clear_has_tracker_method();
}
inline const ::std::string& ProbabilisticFusionConfig::tracker_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
  return tracker_method_.GetNoArena(_default_tracker_method_);
}
inline void ProbabilisticFusionConfig::set_tracker_method(const ::std::string& value) {
  set_has_tracker_method();
  tracker_method_.SetNoArena(_default_tracker_method_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}
inline void ProbabilisticFusionConfig::set_tracker_method(const char* value) {
  set_has_tracker_method();
  tracker_method_.SetNoArena(_default_tracker_method_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}
inline void ProbabilisticFusionConfig::set_tracker_method(const char* value, size_t size) {
  set_has_tracker_method();
  tracker_method_.SetNoArena(_default_tracker_method_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}
inline ::std::string* ProbabilisticFusionConfig::mutable_tracker_method() {
  set_has_tracker_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
  return tracker_method_.MutableNoArena(_default_tracker_method_);
}
inline ::std::string* ProbabilisticFusionConfig::release_tracker_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
  clear_has_tracker_method();
  return tracker_method_.ReleaseNoArena(_default_tracker_method_);
}
inline void ProbabilisticFusionConfig::set_allocated_tracker_method(::std::string* tracker_method) {
  if (tracker_method != NULL) {
    set_has_tracker_method();
  } else {
    clear_has_tracker_method();
  }
  tracker_method_.SetAllocatedNoArena(_default_tracker_method_, tracker_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}

// optional string data_association_method = 5 [default = "HMAssociation"];
inline bool ProbabilisticFusionConfig::has_data_association_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_data_association_method() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProbabilisticFusionConfig::clear_has_data_association_method() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProbabilisticFusionConfig::clear_data_association_method() {
  data_association_method_.ClearToDefaultNoArena(_default_data_association_method_);
  clear_has_data_association_method();
}
inline const ::std::string& ProbabilisticFusionConfig::data_association_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
  return data_association_method_.GetNoArena(_default_data_association_method_);
}
inline void ProbabilisticFusionConfig::set_data_association_method(const ::std::string& value) {
  set_has_data_association_method();
  data_association_method_.SetNoArena(_default_data_association_method_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}
inline void ProbabilisticFusionConfig::set_data_association_method(const char* value) {
  set_has_data_association_method();
  data_association_method_.SetNoArena(_default_data_association_method_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}
inline void ProbabilisticFusionConfig::set_data_association_method(const char* value, size_t size) {
  set_has_data_association_method();
  data_association_method_.SetNoArena(_default_data_association_method_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}
inline ::std::string* ProbabilisticFusionConfig::mutable_data_association_method() {
  set_has_data_association_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
  return data_association_method_.MutableNoArena(_default_data_association_method_);
}
inline ::std::string* ProbabilisticFusionConfig::release_data_association_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
  clear_has_data_association_method();
  return data_association_method_.ReleaseNoArena(_default_data_association_method_);
}
inline void ProbabilisticFusionConfig::set_allocated_data_association_method(::std::string* data_association_method) {
  if (data_association_method != NULL) {
    set_has_data_association_method();
  } else {
    clear_has_data_association_method();
  }
  data_association_method_.SetAllocatedNoArena(_default_data_association_method_, data_association_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}

// optional string gate_keeper_method = 6 [default = "PbfGatekeeper"];
inline bool ProbabilisticFusionConfig::has_gate_keeper_method() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_gate_keeper_method() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProbabilisticFusionConfig::clear_has_gate_keeper_method() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProbabilisticFusionConfig::clear_gate_keeper_method() {
  gate_keeper_method_.ClearToDefaultNoArena(_default_gate_keeper_method_);
  clear_has_gate_keeper_method();
}
inline const ::std::string& ProbabilisticFusionConfig::gate_keeper_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
  return gate_keeper_method_.GetNoArena(_default_gate_keeper_method_);
}
inline void ProbabilisticFusionConfig::set_gate_keeper_method(const ::std::string& value) {
  set_has_gate_keeper_method();
  gate_keeper_method_.SetNoArena(_default_gate_keeper_method_, value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}
inline void ProbabilisticFusionConfig::set_gate_keeper_method(const char* value) {
  set_has_gate_keeper_method();
  gate_keeper_method_.SetNoArena(_default_gate_keeper_method_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}
inline void ProbabilisticFusionConfig::set_gate_keeper_method(const char* value, size_t size) {
  set_has_gate_keeper_method();
  gate_keeper_method_.SetNoArena(_default_gate_keeper_method_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}
inline ::std::string* ProbabilisticFusionConfig::mutable_gate_keeper_method() {
  set_has_gate_keeper_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
  return gate_keeper_method_.MutableNoArena(_default_gate_keeper_method_);
}
inline ::std::string* ProbabilisticFusionConfig::release_gate_keeper_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
  clear_has_gate_keeper_method();
  return gate_keeper_method_.ReleaseNoArena(_default_gate_keeper_method_);
}
inline void ProbabilisticFusionConfig::set_allocated_gate_keeper_method(::std::string* gate_keeper_method) {
  if (gate_keeper_method != NULL) {
    set_has_gate_keeper_method();
  } else {
    clear_has_gate_keeper_method();
  }
  gate_keeper_method_.SetAllocatedNoArena(_default_gate_keeper_method_, gate_keeper_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}

// repeated string prohibition_sensors = 7;
inline int ProbabilisticFusionConfig::prohibition_sensors_size() const {
  return prohibition_sensors_.size();
}
inline void ProbabilisticFusionConfig::clear_prohibition_sensors() {
  prohibition_sensors_.Clear();
}
inline const ::std::string& ProbabilisticFusionConfig::prohibition_sensors(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_.Get(index);
}
inline ::std::string* ProbabilisticFusionConfig::mutable_prohibition_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_.Mutable(index);
}
inline void ProbabilisticFusionConfig::set_prohibition_sensors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  prohibition_sensors_.Mutable(index)->assign(value);
}
inline void ProbabilisticFusionConfig::set_prohibition_sensors(int index, const char* value) {
  prohibition_sensors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
inline void ProbabilisticFusionConfig::set_prohibition_sensors(int index, const char* value, size_t size) {
  prohibition_sensors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
inline ::std::string* ProbabilisticFusionConfig::add_prohibition_sensors() {
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_.Add();
}
inline void ProbabilisticFusionConfig::add_prohibition_sensors(const ::std::string& value) {
  prohibition_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
inline void ProbabilisticFusionConfig::add_prohibition_sensors(const char* value) {
  prohibition_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
inline void ProbabilisticFusionConfig::add_prohibition_sensors(const char* value, size_t size) {
  prohibition_sensors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProbabilisticFusionConfig::prohibition_sensors() const {
  // @@protoc_insertion_point(field_list:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProbabilisticFusionConfig::mutable_prohibition_sensors() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return &prohibition_sensors_;
}

// optional double max_lidar_invisible_period = 8 [default = 0.25];
inline bool ProbabilisticFusionConfig::has_max_lidar_invisible_period() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_max_lidar_invisible_period() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProbabilisticFusionConfig::clear_has_max_lidar_invisible_period() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProbabilisticFusionConfig::clear_max_lidar_invisible_period() {
  max_lidar_invisible_period_ = 0.25;
  clear_has_max_lidar_invisible_period();
}
inline double ProbabilisticFusionConfig::max_lidar_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_lidar_invisible_period)
  return max_lidar_invisible_period_;
}
inline void ProbabilisticFusionConfig::set_max_lidar_invisible_period(double value) {
  set_has_max_lidar_invisible_period();
  max_lidar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_lidar_invisible_period)
}

// optional double max_radar_invisible_period = 9 [default = 0.5];
inline bool ProbabilisticFusionConfig::has_max_radar_invisible_period() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_max_radar_invisible_period() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProbabilisticFusionConfig::clear_has_max_radar_invisible_period() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProbabilisticFusionConfig::clear_max_radar_invisible_period() {
  max_radar_invisible_period_ = 0.5;
  clear_has_max_radar_invisible_period();
}
inline double ProbabilisticFusionConfig::max_radar_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_radar_invisible_period)
  return max_radar_invisible_period_;
}
inline void ProbabilisticFusionConfig::set_max_radar_invisible_period(double value) {
  set_has_max_radar_invisible_period();
  max_radar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_radar_invisible_period)
}

// optional double max_camera_invisible_period = 10 [default = 0.75];
inline bool ProbabilisticFusionConfig::has_max_camera_invisible_period() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_max_camera_invisible_period() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProbabilisticFusionConfig::clear_has_max_camera_invisible_period() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProbabilisticFusionConfig::clear_max_camera_invisible_period() {
  max_camera_invisible_period_ = 0.75;
  clear_has_max_camera_invisible_period();
}
inline double ProbabilisticFusionConfig::max_camera_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_camera_invisible_period)
  return max_camera_invisible_period_;
}
inline void ProbabilisticFusionConfig::set_max_camera_invisible_period(double value) {
  set_has_max_camera_invisible_period();
  max_camera_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_camera_invisible_period)
}

// optional int64 max_cached_frame_num = 11 [default = 50];
inline bool ProbabilisticFusionConfig::has_max_cached_frame_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProbabilisticFusionConfig::set_has_max_cached_frame_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProbabilisticFusionConfig::clear_has_max_cached_frame_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProbabilisticFusionConfig::clear_max_cached_frame_num() {
  max_cached_frame_num_ = GOOGLE_LONGLONG(50);
  clear_has_max_cached_frame_num();
}
inline ::google::protobuf::int64 ProbabilisticFusionConfig::max_cached_frame_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_cached_frame_num)
  return max_cached_frame_num_;
}
inline void ProbabilisticFusionConfig::set_max_cached_frame_num(::google::protobuf::int64 value) {
  set_has_max_cached_frame_num();
  max_cached_frame_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_cached_frame_num)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fusion
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fperception_2fproto_2fprobabilistic_5ffusion_5fconfig_2eproto__INCLUDED
