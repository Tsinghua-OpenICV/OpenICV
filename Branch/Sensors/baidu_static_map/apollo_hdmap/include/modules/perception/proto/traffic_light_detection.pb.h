// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light_detection.proto

#ifndef PROTOBUF_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto__INCLUDED
#define PROTOBUF_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
void protobuf_AssignDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
void protobuf_ShutdownFile_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();

class TrafficLight;
class TrafficLightBox;
class TrafficLightDebug;
class TrafficLightDetection;

enum TrafficLight_Color {
  TrafficLight_Color_UNKNOWN = 0,
  TrafficLight_Color_RED = 1,
  TrafficLight_Color_YELLOW = 2,
  TrafficLight_Color_GREEN = 3,
  TrafficLight_Color_BLACK = 4
};
bool TrafficLight_Color_IsValid(int value);
const TrafficLight_Color TrafficLight_Color_Color_MIN = TrafficLight_Color_UNKNOWN;
const TrafficLight_Color TrafficLight_Color_Color_MAX = TrafficLight_Color_BLACK;
const int TrafficLight_Color_Color_ARRAYSIZE = TrafficLight_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor();
inline const ::std::string& TrafficLight_Color_Name(TrafficLight_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLight_Color_descriptor(), value);
}
inline bool TrafficLight_Color_Parse(
    const ::std::string& name, TrafficLight_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLight_Color>(
    TrafficLight_Color_descriptor(), name, value);
}
enum TrafficLightDetection_CameraID {
  TrafficLightDetection_CameraID_CAMERA_FRONT_LONG = 0,
  TrafficLightDetection_CameraID_CAMERA_FRONT_NARROW = 1,
  TrafficLightDetection_CameraID_CAMERA_FRONT_SHORT = 2,
  TrafficLightDetection_CameraID_CAMERA_FRONT_WIDE = 3
};
bool TrafficLightDetection_CameraID_IsValid(int value);
const TrafficLightDetection_CameraID TrafficLightDetection_CameraID_CameraID_MIN = TrafficLightDetection_CameraID_CAMERA_FRONT_LONG;
const TrafficLightDetection_CameraID TrafficLightDetection_CameraID_CameraID_MAX = TrafficLightDetection_CameraID_CAMERA_FRONT_WIDE;
const int TrafficLightDetection_CameraID_CameraID_ARRAYSIZE = TrafficLightDetection_CameraID_CameraID_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficLightDetection_CameraID_descriptor();
inline const ::std::string& TrafficLightDetection_CameraID_Name(TrafficLightDetection_CameraID value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficLightDetection_CameraID_descriptor(), value);
}
inline bool TrafficLightDetection_CameraID_Parse(
    const ::std::string& name, TrafficLightDetection_CameraID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficLightDetection_CameraID>(
    TrafficLightDetection_CameraID_descriptor(), name, value);
}
// ===================================================================

class TrafficLightBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLightBox) */ {
 public:
  TrafficLightBox();
  virtual ~TrafficLightBox();

  TrafficLightBox(const TrafficLightBox& from);

  inline TrafficLightBox& operator=(const TrafficLightBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightBox& default_instance();

  void Swap(TrafficLightBox* other);

  // implements Message ----------------------------------------------

  inline TrafficLightBox* New() const { return New(NULL); }

  TrafficLightBox* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLightBox& from);
  void MergeFrom(const TrafficLightBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficLightBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional .apollo.perception.TrafficLight.Color color = 5;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 5;
  ::apollo::perception::TrafficLight_Color color() const;
  void set_color(::apollo::perception::TrafficLight_Color value);

  // optional bool selected = 6;
  bool has_selected() const;
  void clear_selected();
  static const int kSelectedFieldNumber = 6;
  bool selected() const;
  void set_selected(bool value);

  // optional string camera_name = 7;
  bool has_camera_name() const;
  void clear_camera_name();
  static const int kCameraNameFieldNumber = 7;
  const ::std::string& camera_name() const;
  void set_camera_name(const ::std::string& value);
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  ::std::string* mutable_camera_name();
  ::std::string* release_camera_name();
  void set_allocated_camera_name(::std::string* camera_name);

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLightBox)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_selected();
  inline void clear_has_selected();
  inline void set_has_camera_name();
  inline void clear_has_camera_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  int color_;
  bool selected_;
  ::google::protobuf::internal::ArenaStringPtr camera_name_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();

  void InitAsDefaultInstance();
  static TrafficLightBox* default_instance_;
};
// -------------------------------------------------------------------

class TrafficLightDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLightDebug) */ {
 public:
  TrafficLightDebug();
  virtual ~TrafficLightDebug();

  TrafficLightDebug(const TrafficLightDebug& from);

  inline TrafficLightDebug& operator=(const TrafficLightDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightDebug& default_instance();

  void Swap(TrafficLightDebug* other);

  // implements Message ----------------------------------------------

  inline TrafficLightDebug* New() const { return New(NULL); }

  TrafficLightDebug* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLightDebug& from);
  void MergeFrom(const TrafficLightDebug& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficLightDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  bool has_cropbox() const;
  void clear_cropbox();
  static const int kCropboxFieldNumber = 1;
  const ::apollo::perception::TrafficLightBox& cropbox() const;
  ::apollo::perception::TrafficLightBox* mutable_cropbox();
  ::apollo::perception::TrafficLightBox* release_cropbox();
  void set_allocated_cropbox(::apollo::perception::TrafficLightBox* cropbox);

  // repeated .apollo.perception.TrafficLightBox box = 2;
  int box_size() const;
  void clear_box();
  static const int kBoxFieldNumber = 2;
  const ::apollo::perception::TrafficLightBox& box(int index) const;
  ::apollo::perception::TrafficLightBox* mutable_box(int index);
  ::apollo::perception::TrafficLightBox* add_box();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
      mutable_box();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
      box() const;

  // optional int32 signal_num = 3;
  bool has_signal_num() const;
  void clear_signal_num();
  static const int kSignalNumFieldNumber = 3;
  ::google::protobuf::int32 signal_num() const;
  void set_signal_num(::google::protobuf::int32 value);

  // optional int32 valid_pos = 4;
  bool has_valid_pos() const;
  void clear_valid_pos();
  static const int kValidPosFieldNumber = 4;
  ::google::protobuf::int32 valid_pos() const;
  void set_valid_pos(::google::protobuf::int32 value);

  // optional double ts_diff_pos = 5;
  bool has_ts_diff_pos() const;
  void clear_ts_diff_pos();
  static const int kTsDiffPosFieldNumber = 5;
  double ts_diff_pos() const;
  void set_ts_diff_pos(double value);

  // optional double ts_diff_sys = 6;
  bool has_ts_diff_sys() const;
  void clear_ts_diff_sys();
  static const int kTsDiffSysFieldNumber = 6;
  double ts_diff_sys() const;
  void set_ts_diff_sys(double value);

  // optional int32 project_error = 7;
  bool has_project_error() const;
  void clear_project_error();
  static const int kProjectErrorFieldNumber = 7;
  ::google::protobuf::int32 project_error() const;
  void set_project_error(::google::protobuf::int32 value);

  // optional double distance_to_stop_line = 8;
  bool has_distance_to_stop_line() const;
  void clear_distance_to_stop_line();
  static const int kDistanceToStopLineFieldNumber = 8;
  double distance_to_stop_line() const;
  void set_distance_to_stop_line(double value);

  // optional int32 camera_id = 9 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_camera_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_camera_id();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCameraIdFieldNumber = 9;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 camera_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_camera_id(::google::protobuf::int32 value);

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  int crop_roi_size() const;
  void clear_crop_roi();
  static const int kCropRoiFieldNumber = 10;
  const ::apollo::perception::TrafficLightBox& crop_roi(int index) const;
  ::apollo::perception::TrafficLightBox* mutable_crop_roi(int index);
  ::apollo::perception::TrafficLightBox* add_crop_roi();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
      mutable_crop_roi();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
      crop_roi() const;

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  int projected_roi_size() const;
  void clear_projected_roi();
  static const int kProjectedRoiFieldNumber = 11;
  const ::apollo::perception::TrafficLightBox& projected_roi(int index) const;
  ::apollo::perception::TrafficLightBox* mutable_projected_roi(int index);
  ::apollo::perception::TrafficLightBox* add_projected_roi();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
      mutable_projected_roi();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
      projected_roi() const;

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  int rectified_roi_size() const;
  void clear_rectified_roi();
  static const int kRectifiedRoiFieldNumber = 12;
  const ::apollo::perception::TrafficLightBox& rectified_roi(int index) const;
  ::apollo::perception::TrafficLightBox* mutable_rectified_roi(int index);
  ::apollo::perception::TrafficLightBox* add_rectified_roi();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
      mutable_rectified_roi();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
      rectified_roi() const;

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  int debug_roi_size() const;
  void clear_debug_roi();
  static const int kDebugRoiFieldNumber = 13;
  const ::apollo::perception::TrafficLightBox& debug_roi(int index) const;
  ::apollo::perception::TrafficLightBox* mutable_debug_roi(int index);
  ::apollo::perception::TrafficLightBox* add_debug_roi();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
      mutable_debug_roi();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
      debug_roi() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLightDebug)
 private:
  inline void set_has_cropbox();
  inline void clear_has_cropbox();
  inline void set_has_signal_num();
  inline void clear_has_signal_num();
  inline void set_has_valid_pos();
  inline void clear_has_valid_pos();
  inline void set_has_ts_diff_pos();
  inline void clear_has_ts_diff_pos();
  inline void set_has_ts_diff_sys();
  inline void clear_has_ts_diff_sys();
  inline void set_has_project_error();
  inline void clear_has_project_error();
  inline void set_has_distance_to_stop_line();
  inline void clear_has_distance_to_stop_line();
  inline void set_has_camera_id();
  inline void clear_has_camera_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::TrafficLightBox* cropbox_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox > box_;
  ::google::protobuf::int32 signal_num_;
  ::google::protobuf::int32 valid_pos_;
  double ts_diff_pos_;
  double ts_diff_sys_;
  double distance_to_stop_line_;
  ::google::protobuf::int32 project_error_;
  ::google::protobuf::int32 camera_id_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox > crop_roi_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox > projected_roi_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox > rectified_roi_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox > debug_roi_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();

  void InitAsDefaultInstance();
  static TrafficLightDebug* default_instance_;
};
// -------------------------------------------------------------------

class TrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight& default_instance();

  void Swap(TrafficLight* other);

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const { return New(NULL); }

  TrafficLight* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficLight_Color Color;
  static const Color UNKNOWN =
    TrafficLight_Color_UNKNOWN;
  static const Color RED =
    TrafficLight_Color_RED;
  static const Color YELLOW =
    TrafficLight_Color_YELLOW;
  static const Color GREEN =
    TrafficLight_Color_GREEN;
  static const Color BLACK =
    TrafficLight_Color_BLACK;
  static inline bool Color_IsValid(int value) {
    return TrafficLight_Color_IsValid(value);
  }
  static const Color Color_MIN =
    TrafficLight_Color_Color_MIN;
  static const Color Color_MAX =
    TrafficLight_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    TrafficLight_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return TrafficLight_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return TrafficLight_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return TrafficLight_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.TrafficLight.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::apollo::perception::TrafficLight_Color color() const;
  void set_color(::apollo::perception::TrafficLight_Color value);

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double confidence = 3 [default = 1];
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  double confidence() const;
  void set_confidence(double value);

  // optional double tracking_time = 4;
  bool has_tracking_time() const;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 4;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional bool blink = 5;
  bool has_blink() const;
  void clear_blink();
  static const int kBlinkFieldNumber = 5;
  bool blink() const;
  void set_blink(bool value);

  // optional double remaining_time = 6;
  bool has_remaining_time() const;
  void clear_remaining_time();
  static const int kRemainingTimeFieldNumber = 6;
  double remaining_time() const;
  void set_remaining_time(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLight)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_tracking_time();
  inline void clear_has_tracking_time();
  inline void set_has_blink();
  inline void clear_has_blink();
  inline void set_has_remaining_time();
  inline void clear_has_remaining_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double confidence_;
  int color_;
  bool blink_;
  double tracking_time_;
  double remaining_time_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();

  void InitAsDefaultInstance();
  static TrafficLight* default_instance_;
};
// -------------------------------------------------------------------

class TrafficLightDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.TrafficLightDetection) */ {
 public:
  TrafficLightDetection();
  virtual ~TrafficLightDetection();

  TrafficLightDetection(const TrafficLightDetection& from);

  inline TrafficLightDetection& operator=(const TrafficLightDetection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightDetection& default_instance();

  void Swap(TrafficLightDetection* other);

  // implements Message ----------------------------------------------

  inline TrafficLightDetection* New() const { return New(NULL); }

  TrafficLightDetection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLightDetection& from);
  void MergeFrom(const TrafficLightDetection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficLightDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrafficLightDetection_CameraID CameraID;
  static const CameraID CAMERA_FRONT_LONG =
    TrafficLightDetection_CameraID_CAMERA_FRONT_LONG;
  static const CameraID CAMERA_FRONT_NARROW =
    TrafficLightDetection_CameraID_CAMERA_FRONT_NARROW;
  static const CameraID CAMERA_FRONT_SHORT =
    TrafficLightDetection_CameraID_CAMERA_FRONT_SHORT;
  static const CameraID CAMERA_FRONT_WIDE =
    TrafficLightDetection_CameraID_CAMERA_FRONT_WIDE;
  static inline bool CameraID_IsValid(int value) {
    return TrafficLightDetection_CameraID_IsValid(value);
  }
  static const CameraID CameraID_MIN =
    TrafficLightDetection_CameraID_CameraID_MIN;
  static const CameraID CameraID_MAX =
    TrafficLightDetection_CameraID_CameraID_MAX;
  static const int CameraID_ARRAYSIZE =
    TrafficLightDetection_CameraID_CameraID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraID_descriptor() {
    return TrafficLightDetection_CameraID_descriptor();
  }
  static inline const ::std::string& CameraID_Name(CameraID value) {
    return TrafficLightDetection_CameraID_Name(value);
  }
  static inline bool CameraID_Parse(const ::std::string& name,
      CameraID* value) {
    return TrafficLightDetection_CameraID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  int traffic_light_size() const;
  void clear_traffic_light();
  static const int kTrafficLightFieldNumber = 1;
  const ::apollo::perception::TrafficLight& traffic_light(int index) const;
  ::apollo::perception::TrafficLight* mutable_traffic_light(int index);
  ::apollo::perception::TrafficLight* add_traffic_light();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >*
      mutable_traffic_light();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >&
      traffic_light() const;

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  bool has_traffic_light_debug() const;
  void clear_traffic_light_debug();
  static const int kTrafficLightDebugFieldNumber = 3;
  const ::apollo::perception::TrafficLightDebug& traffic_light_debug() const;
  ::apollo::perception::TrafficLightDebug* mutable_traffic_light_debug();
  ::apollo::perception::TrafficLightDebug* release_traffic_light_debug();
  void set_allocated_traffic_light_debug(::apollo::perception::TrafficLightDebug* traffic_light_debug);

  // optional bool contain_lights = 4;
  bool has_contain_lights() const;
  void clear_contain_lights();
  static const int kContainLightsFieldNumber = 4;
  bool contain_lights() const;
  void set_contain_lights(bool value);

  // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 5;
  ::apollo::perception::TrafficLightDetection_CameraID camera_id() const;
  void set_camera_id(::apollo::perception::TrafficLightDetection_CameraID value);

  // @@protoc_insertion_point(class_scope:apollo.perception.TrafficLightDetection)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_traffic_light_debug();
  inline void clear_has_traffic_light_debug();
  inline void set_has_contain_lights();
  inline void clear_has_contain_lights();
  inline void set_has_camera_id();
  inline void clear_has_camera_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight > traffic_light_;
  ::apollo::perception::TrafficLightDebug* traffic_light_debug_;
  bool contain_lights_;
  int camera_id_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto();

  void InitAsDefaultInstance();
  static TrafficLightDetection* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightBox

// optional int32 x = 1;
inline bool TrafficLightBox::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLightBox::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLightBox::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLightBox::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TrafficLightBox::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.x)
  return x_;
}
inline void TrafficLightBox::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.x)
}

// optional int32 y = 2;
inline bool TrafficLightBox::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLightBox::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLightBox::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLightBox::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TrafficLightBox::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.y)
  return y_;
}
inline void TrafficLightBox::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.y)
}

// optional int32 width = 3;
inline bool TrafficLightBox::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLightBox::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLightBox::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLightBox::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 TrafficLightBox::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.width)
  return width_;
}
inline void TrafficLightBox::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.width)
}

// optional int32 height = 4;
inline bool TrafficLightBox::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLightBox::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLightBox::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLightBox::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 TrafficLightBox::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.height)
  return height_;
}
inline void TrafficLightBox::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.height)
}

// optional .apollo.perception.TrafficLight.Color color = 5;
inline bool TrafficLightBox::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLightBox::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficLightBox::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficLightBox::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::apollo::perception::TrafficLight_Color TrafficLightBox::color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
inline void TrafficLightBox::set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.color)
}

// optional bool selected = 6;
inline bool TrafficLightBox::has_selected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficLightBox::set_has_selected() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrafficLightBox::clear_has_selected() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrafficLightBox::clear_selected() {
  selected_ = false;
  clear_has_selected();
}
inline bool TrafficLightBox::selected() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.selected)
  return selected_;
}
inline void TrafficLightBox::set_selected(bool value) {
  set_has_selected();
  selected_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.selected)
}

// optional string camera_name = 7;
inline bool TrafficLightBox::has_camera_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrafficLightBox::set_has_camera_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrafficLightBox::clear_has_camera_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrafficLightBox::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_name();
}
inline const ::std::string& TrafficLightBox::camera_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightBox.camera_name)
  return camera_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightBox::set_camera_name(const ::std::string& value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightBox.camera_name)
}
inline void TrafficLightBox::set_camera_name(const char* value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.TrafficLightBox.camera_name)
}
inline void TrafficLightBox::set_camera_name(const char* value, size_t size) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.TrafficLightBox.camera_name)
}
inline ::std::string* TrafficLightBox::mutable_camera_name() {
  set_has_camera_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightBox.camera_name)
  return camera_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLightBox::release_camera_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightBox.camera_name)
  clear_has_camera_name();
  return camera_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightBox::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name != NULL) {
    set_has_camera_name();
  } else {
    clear_has_camera_name();
  }
  camera_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightBox.camera_name)
}

// -------------------------------------------------------------------

// TrafficLightDebug

// optional .apollo.perception.TrafficLightBox cropbox = 1;
inline bool TrafficLightDebug::has_cropbox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLightDebug::set_has_cropbox() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLightDebug::clear_has_cropbox() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLightDebug::clear_cropbox() {
  if (cropbox_ != NULL) cropbox_->::apollo::perception::TrafficLightBox::Clear();
  clear_has_cropbox();
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::cropbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.cropbox)
  return cropbox_ != NULL ? *cropbox_ : *default_instance_->cropbox_;
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_cropbox() {
  set_has_cropbox();
  if (cropbox_ == NULL) {
    cropbox_ = new ::apollo::perception::TrafficLightBox;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.cropbox)
  return cropbox_;
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::release_cropbox() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDebug.cropbox)
  clear_has_cropbox();
  ::apollo::perception::TrafficLightBox* temp = cropbox_;
  cropbox_ = NULL;
  return temp;
}
inline void TrafficLightDebug::set_allocated_cropbox(::apollo::perception::TrafficLightBox* cropbox) {
  delete cropbox_;
  cropbox_ = cropbox;
  if (cropbox) {
    set_has_cropbox();
  } else {
    clear_has_cropbox();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDebug.cropbox)
}

// repeated .apollo.perception.TrafficLightBox box = 2;
inline int TrafficLightDebug::box_size() const {
  return box_.size();
}
inline void TrafficLightDebug::clear_box() {
  box_.Clear();
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::box(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.box)
  return box_.Get(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_box(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.box)
  return box_.Mutable(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::add_box() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDebug.box)
  return box_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
TrafficLightDebug::mutable_box() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDebug.box)
  return &box_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
TrafficLightDebug::box() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDebug.box)
  return box_;
}

// optional int32 signal_num = 3;
inline bool TrafficLightDebug::has_signal_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLightDebug::set_has_signal_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLightDebug::clear_has_signal_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLightDebug::clear_signal_num() {
  signal_num_ = 0;
  clear_has_signal_num();
}
inline ::google::protobuf::int32 TrafficLightDebug::signal_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.signal_num)
  return signal_num_;
}
inline void TrafficLightDebug::set_signal_num(::google::protobuf::int32 value) {
  set_has_signal_num();
  signal_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.signal_num)
}

// optional int32 valid_pos = 4;
inline bool TrafficLightDebug::has_valid_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLightDebug::set_has_valid_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLightDebug::clear_has_valid_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLightDebug::clear_valid_pos() {
  valid_pos_ = 0;
  clear_has_valid_pos();
}
inline ::google::protobuf::int32 TrafficLightDebug::valid_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.valid_pos)
  return valid_pos_;
}
inline void TrafficLightDebug::set_valid_pos(::google::protobuf::int32 value) {
  set_has_valid_pos();
  valid_pos_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.valid_pos)
}

// optional double ts_diff_pos = 5;
inline bool TrafficLightDebug::has_ts_diff_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLightDebug::set_has_ts_diff_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficLightDebug::clear_has_ts_diff_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficLightDebug::clear_ts_diff_pos() {
  ts_diff_pos_ = 0;
  clear_has_ts_diff_pos();
}
inline double TrafficLightDebug::ts_diff_pos() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.ts_diff_pos)
  return ts_diff_pos_;
}
inline void TrafficLightDebug::set_ts_diff_pos(double value) {
  set_has_ts_diff_pos();
  ts_diff_pos_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.ts_diff_pos)
}

// optional double ts_diff_sys = 6;
inline bool TrafficLightDebug::has_ts_diff_sys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficLightDebug::set_has_ts_diff_sys() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrafficLightDebug::clear_has_ts_diff_sys() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrafficLightDebug::clear_ts_diff_sys() {
  ts_diff_sys_ = 0;
  clear_has_ts_diff_sys();
}
inline double TrafficLightDebug::ts_diff_sys() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.ts_diff_sys)
  return ts_diff_sys_;
}
inline void TrafficLightDebug::set_ts_diff_sys(double value) {
  set_has_ts_diff_sys();
  ts_diff_sys_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.ts_diff_sys)
}

// optional int32 project_error = 7;
inline bool TrafficLightDebug::has_project_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrafficLightDebug::set_has_project_error() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrafficLightDebug::clear_has_project_error() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrafficLightDebug::clear_project_error() {
  project_error_ = 0;
  clear_has_project_error();
}
inline ::google::protobuf::int32 TrafficLightDebug::project_error() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.project_error)
  return project_error_;
}
inline void TrafficLightDebug::set_project_error(::google::protobuf::int32 value) {
  set_has_project_error();
  project_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.project_error)
}

// optional double distance_to_stop_line = 8;
inline bool TrafficLightDebug::has_distance_to_stop_line() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrafficLightDebug::set_has_distance_to_stop_line() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrafficLightDebug::clear_has_distance_to_stop_line() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrafficLightDebug::clear_distance_to_stop_line() {
  distance_to_stop_line_ = 0;
  clear_has_distance_to_stop_line();
}
inline double TrafficLightDebug::distance_to_stop_line() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.distance_to_stop_line)
  return distance_to_stop_line_;
}
inline void TrafficLightDebug::set_distance_to_stop_line(double value) {
  set_has_distance_to_stop_line();
  distance_to_stop_line_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.distance_to_stop_line)
}

// optional int32 camera_id = 9 [deprecated = true];
inline bool TrafficLightDebug::has_camera_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrafficLightDebug::set_has_camera_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrafficLightDebug::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrafficLightDebug::clear_camera_id() {
  camera_id_ = 0;
  clear_has_camera_id();
}
inline ::google::protobuf::int32 TrafficLightDebug::camera_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.camera_id)
  return camera_id_;
}
inline void TrafficLightDebug::set_camera_id(::google::protobuf::int32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDebug.camera_id)
}

// repeated .apollo.perception.TrafficLightBox crop_roi = 10;
inline int TrafficLightDebug::crop_roi_size() const {
  return crop_roi_.size();
}
inline void TrafficLightDebug::clear_crop_roi() {
  crop_roi_.Clear();
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::crop_roi(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.crop_roi)
  return crop_roi_.Get(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_crop_roi(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.crop_roi)
  return crop_roi_.Mutable(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::add_crop_roi() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDebug.crop_roi)
  return crop_roi_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
TrafficLightDebug::mutable_crop_roi() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDebug.crop_roi)
  return &crop_roi_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
TrafficLightDebug::crop_roi() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDebug.crop_roi)
  return crop_roi_;
}

// repeated .apollo.perception.TrafficLightBox projected_roi = 11;
inline int TrafficLightDebug::projected_roi_size() const {
  return projected_roi_.size();
}
inline void TrafficLightDebug::clear_projected_roi() {
  projected_roi_.Clear();
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::projected_roi(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.projected_roi)
  return projected_roi_.Get(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_projected_roi(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.projected_roi)
  return projected_roi_.Mutable(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::add_projected_roi() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDebug.projected_roi)
  return projected_roi_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
TrafficLightDebug::mutable_projected_roi() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDebug.projected_roi)
  return &projected_roi_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
TrafficLightDebug::projected_roi() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDebug.projected_roi)
  return projected_roi_;
}

// repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
inline int TrafficLightDebug::rectified_roi_size() const {
  return rectified_roi_.size();
}
inline void TrafficLightDebug::clear_rectified_roi() {
  rectified_roi_.Clear();
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::rectified_roi(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.rectified_roi)
  return rectified_roi_.Get(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_rectified_roi(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.rectified_roi)
  return rectified_roi_.Mutable(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::add_rectified_roi() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDebug.rectified_roi)
  return rectified_roi_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
TrafficLightDebug::mutable_rectified_roi() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDebug.rectified_roi)
  return &rectified_roi_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
TrafficLightDebug::rectified_roi() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDebug.rectified_roi)
  return rectified_roi_;
}

// repeated .apollo.perception.TrafficLightBox debug_roi = 13;
inline int TrafficLightDebug::debug_roi_size() const {
  return debug_roi_.size();
}
inline void TrafficLightDebug::clear_debug_roi() {
  debug_roi_.Clear();
}
inline const ::apollo::perception::TrafficLightBox& TrafficLightDebug::debug_roi(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDebug.debug_roi)
  return debug_roi_.Get(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::mutable_debug_roi(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDebug.debug_roi)
  return debug_roi_.Mutable(index);
}
inline ::apollo::perception::TrafficLightBox* TrafficLightDebug::add_debug_roi() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDebug.debug_roi)
  return debug_roi_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >*
TrafficLightDebug::mutable_debug_roi() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDebug.debug_roi)
  return &debug_roi_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLightBox >&
TrafficLightDebug::debug_roi() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDebug.debug_roi)
  return debug_roi_;
}

// -------------------------------------------------------------------

// TrafficLight

// optional .apollo.perception.TrafficLight.Color color = 1;
inline bool TrafficLight::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLight::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLight::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLight::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::apollo::perception::TrafficLight_Color TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.color)
  return static_cast< ::apollo::perception::TrafficLight_Color >(color_);
}
inline void TrafficLight::set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.color)
}

// optional string id = 2;
inline bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLight::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.id)
}
inline void TrafficLight::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.TrafficLight.id)
}
inline void TrafficLight::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.TrafficLight.id)
}
inline ::std::string* TrafficLight::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLight.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLight.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLight.id)
}

// optional double confidence = 3 [default = 1];
inline bool TrafficLight::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLight::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLight::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLight::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
inline double TrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.confidence)
  return confidence_;
}
inline void TrafficLight::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.confidence)
}

// optional double tracking_time = 4;
inline bool TrafficLight::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLight::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLight::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLight::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
inline double TrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.tracking_time)
  return tracking_time_;
}
inline void TrafficLight::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.tracking_time)
}

// optional bool blink = 5;
inline bool TrafficLight::has_blink() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLight::set_has_blink() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficLight::clear_has_blink() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficLight::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
inline bool TrafficLight::blink() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.blink)
  return blink_;
}
inline void TrafficLight::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.blink)
}

// optional double remaining_time = 6;
inline bool TrafficLight::has_remaining_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficLight::set_has_remaining_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrafficLight::clear_has_remaining_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrafficLight::clear_remaining_time() {
  remaining_time_ = 0;
  clear_has_remaining_time();
}
inline double TrafficLight::remaining_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLight.remaining_time)
  return remaining_time_;
}
inline void TrafficLight::set_remaining_time(double value) {
  set_has_remaining_time();
  remaining_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLight.remaining_time)
}

// -------------------------------------------------------------------

// TrafficLightDetection

// optional .apollo.common.Header header = 2;
inline bool TrafficLightDetection::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficLightDetection::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficLightDetection::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficLightDetection::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& TrafficLightDetection::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* TrafficLightDetection::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.header)
  return header_;
}
inline ::apollo::common::Header* TrafficLightDetection::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDetection.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TrafficLightDetection::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDetection.header)
}

// repeated .apollo.perception.TrafficLight traffic_light = 1;
inline int TrafficLightDetection::traffic_light_size() const {
  return traffic_light_.size();
}
inline void TrafficLightDetection::clear_traffic_light() {
  traffic_light_.Clear();
}
inline const ::apollo::perception::TrafficLight& TrafficLightDetection::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Get(index);
}
inline ::apollo::perception::TrafficLight* TrafficLightDetection::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Mutable(index);
}
inline ::apollo::perception::TrafficLight* TrafficLightDetection::add_traffic_light() {
  // @@protoc_insertion_point(field_add:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >*
TrafficLightDetection::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.TrafficLightDetection.traffic_light)
  return &traffic_light_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::TrafficLight >&
TrafficLightDetection::traffic_light() const {
  // @@protoc_insertion_point(field_list:apollo.perception.TrafficLightDetection.traffic_light)
  return traffic_light_;
}

// optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
inline bool TrafficLightDetection::has_traffic_light_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLightDetection::set_has_traffic_light_debug() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLightDetection::clear_has_traffic_light_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLightDetection::clear_traffic_light_debug() {
  if (traffic_light_debug_ != NULL) traffic_light_debug_->::apollo::perception::TrafficLightDebug::Clear();
  clear_has_traffic_light_debug();
}
inline const ::apollo::perception::TrafficLightDebug& TrafficLightDetection::traffic_light_debug() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.traffic_light_debug)
  return traffic_light_debug_ != NULL ? *traffic_light_debug_ : *default_instance_->traffic_light_debug_;
}
inline ::apollo::perception::TrafficLightDebug* TrafficLightDetection::mutable_traffic_light_debug() {
  set_has_traffic_light_debug();
  if (traffic_light_debug_ == NULL) {
    traffic_light_debug_ = new ::apollo::perception::TrafficLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.TrafficLightDetection.traffic_light_debug)
  return traffic_light_debug_;
}
inline ::apollo::perception::TrafficLightDebug* TrafficLightDetection::release_traffic_light_debug() {
  // @@protoc_insertion_point(field_release:apollo.perception.TrafficLightDetection.traffic_light_debug)
  clear_has_traffic_light_debug();
  ::apollo::perception::TrafficLightDebug* temp = traffic_light_debug_;
  traffic_light_debug_ = NULL;
  return temp;
}
inline void TrafficLightDetection::set_allocated_traffic_light_debug(::apollo::perception::TrafficLightDebug* traffic_light_debug) {
  delete traffic_light_debug_;
  traffic_light_debug_ = traffic_light_debug;
  if (traffic_light_debug) {
    set_has_traffic_light_debug();
  } else {
    clear_has_traffic_light_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.TrafficLightDetection.traffic_light_debug)
}

// optional bool contain_lights = 4;
inline bool TrafficLightDetection::has_contain_lights() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficLightDetection::set_has_contain_lights() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficLightDetection::clear_has_contain_lights() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficLightDetection::clear_contain_lights() {
  contain_lights_ = false;
  clear_has_contain_lights();
}
inline bool TrafficLightDetection::contain_lights() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.contain_lights)
  return contain_lights_;
}
inline void TrafficLightDetection::set_contain_lights(bool value) {
  set_has_contain_lights();
  contain_lights_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDetection.contain_lights)
}

// optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
inline bool TrafficLightDetection::has_camera_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficLightDetection::set_has_camera_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficLightDetection::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficLightDetection::clear_camera_id() {
  camera_id_ = 0;
  clear_has_camera_id();
}
inline ::apollo::perception::TrafficLightDetection_CameraID TrafficLightDetection::camera_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.TrafficLightDetection.camera_id)
  return static_cast< ::apollo::perception::TrafficLightDetection_CameraID >(camera_id_);
}
inline void TrafficLightDetection::set_camera_id(::apollo::perception::TrafficLightDetection_CameraID value) {
  assert(::apollo::perception::TrafficLightDetection_CameraID_IsValid(value));
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.TrafficLightDetection.camera_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::perception::TrafficLight_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::TrafficLight_Color>() {
  return ::apollo::perception::TrafficLight_Color_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::TrafficLightDetection_CameraID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::TrafficLightDetection_CameraID>() {
  return ::apollo::perception::TrafficLightDetection_CameraID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto__INCLUDED
