// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto

#ifndef PROTOBUF_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto__INCLUDED
#define PROTOBUF_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/map/proto/map_lane.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

class BBox2D;
class CIPVInfo;
class DebugMessage;
class LaneMarker;
class LaneMarkers;
class LightStatus;
class PerceptionObstacle;
class PerceptionObstacles;
class SensorMeasurement;
class Trajectory;

enum PerceptionObstacle_Type {
  PerceptionObstacle_Type_UNKNOWN = 0,
  PerceptionObstacle_Type_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_Type_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_Type_PEDESTRIAN = 3,
  PerceptionObstacle_Type_BICYCLE = 4,
  PerceptionObstacle_Type_VEHICLE = 5
};
bool PerceptionObstacle_Type_IsValid(int value);
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MIN = PerceptionObstacle_Type_UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MAX = PerceptionObstacle_Type_VEHICLE;
const int PerceptionObstacle_Type_Type_ARRAYSIZE = PerceptionObstacle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor();
inline const ::std::string& PerceptionObstacle_Type_Name(PerceptionObstacle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_Type_descriptor(), value);
}
inline bool PerceptionObstacle_Type_Parse(
    const ::std::string& name, PerceptionObstacle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_Type>(
    PerceptionObstacle_Type_descriptor(), name, value);
}
enum PerceptionObstacle_ConfidenceType {
  PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN = 0,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN = 1,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR = 2
};
bool PerceptionObstacle_ConfidenceType_IsValid(int value);
const PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MIN = PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MAX = PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
const int PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE = PerceptionObstacle_ConfidenceType_ConfidenceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor();
inline const ::std::string& PerceptionObstacle_ConfidenceType_Name(PerceptionObstacle_ConfidenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_ConfidenceType_descriptor(), value);
}
inline bool PerceptionObstacle_ConfidenceType_Parse(
    const ::std::string& name, PerceptionObstacle_ConfidenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_ConfidenceType>(
    PerceptionObstacle_ConfidenceType_descriptor(), name, value);
}
enum PerceptionObstacle_SubType {
  PerceptionObstacle_SubType_ST_UNKNOWN = 0,
  PerceptionObstacle_SubType_ST_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_SubType_ST_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_SubType_ST_CAR = 3,
  PerceptionObstacle_SubType_ST_VAN = 4,
  PerceptionObstacle_SubType_ST_TRUCK = 5,
  PerceptionObstacle_SubType_ST_BUS = 6,
  PerceptionObstacle_SubType_ST_CYCLIST = 7,
  PerceptionObstacle_SubType_ST_MOTORCYCLIST = 8,
  PerceptionObstacle_SubType_ST_TRICYCLIST = 9,
  PerceptionObstacle_SubType_ST_PEDESTRIAN = 10,
  PerceptionObstacle_SubType_ST_TRAFFICCONE = 11
};
bool PerceptionObstacle_SubType_IsValid(int value);
const PerceptionObstacle_SubType PerceptionObstacle_SubType_SubType_MIN = PerceptionObstacle_SubType_ST_UNKNOWN;
const PerceptionObstacle_SubType PerceptionObstacle_SubType_SubType_MAX = PerceptionObstacle_SubType_ST_TRAFFICCONE;
const int PerceptionObstacle_SubType_SubType_ARRAYSIZE = PerceptionObstacle_SubType_SubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_SubType_descriptor();
inline const ::std::string& PerceptionObstacle_SubType_Name(PerceptionObstacle_SubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_SubType_descriptor(), value);
}
inline bool PerceptionObstacle_SubType_Parse(
    const ::std::string& name, PerceptionObstacle_SubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_SubType>(
    PerceptionObstacle_SubType_descriptor(), name, value);
}
// ===================================================================

class BBox2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.BBox2D) */ {
 public:
  BBox2D();
  virtual ~BBox2D();

  BBox2D(const BBox2D& from);

  inline BBox2D& operator=(const BBox2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBox2D& default_instance();

  void Swap(BBox2D* other);

  // implements Message ----------------------------------------------

  inline BBox2D* New() const { return New(NULL); }

  BBox2D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBox2D& from);
  void MergeFrom(const BBox2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBox2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double xmin = 1;
  bool has_xmin() const;
  void clear_xmin();
  static const int kXminFieldNumber = 1;
  double xmin() const;
  void set_xmin(double value);

  // optional double ymin = 2;
  bool has_ymin() const;
  void clear_ymin();
  static const int kYminFieldNumber = 2;
  double ymin() const;
  void set_ymin(double value);

  // optional double xmax = 3;
  bool has_xmax() const;
  void clear_xmax();
  static const int kXmaxFieldNumber = 3;
  double xmax() const;
  void set_xmax(double value);

  // optional double ymax = 4;
  bool has_ymax() const;
  void clear_ymax();
  static const int kYmaxFieldNumber = 4;
  double ymax() const;
  void set_ymax(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.BBox2D)
 private:
  inline void set_has_xmin();
  inline void clear_has_xmin();
  inline void set_has_ymin();
  inline void clear_has_ymin();
  inline void set_has_xmax();
  inline void clear_has_xmax();
  inline void set_has_ymax();
  inline void clear_has_ymax();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double xmin_;
  double ymin_;
  double xmax_;
  double ymax_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static BBox2D* default_instance_;
};
// -------------------------------------------------------------------

class LightStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LightStatus) */ {
 public:
  LightStatus();
  virtual ~LightStatus();

  LightStatus(const LightStatus& from);

  inline LightStatus& operator=(const LightStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightStatus& default_instance();

  void Swap(LightStatus* other);

  // implements Message ----------------------------------------------

  inline LightStatus* New() const { return New(NULL); }

  LightStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightStatus& from);
  void MergeFrom(const LightStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LightStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double brake_visible = 1;
  bool has_brake_visible() const;
  void clear_brake_visible();
  static const int kBrakeVisibleFieldNumber = 1;
  double brake_visible() const;
  void set_brake_visible(double value);

  // optional double brake_switch_on = 2;
  bool has_brake_switch_on() const;
  void clear_brake_switch_on();
  static const int kBrakeSwitchOnFieldNumber = 2;
  double brake_switch_on() const;
  void set_brake_switch_on(double value);

  // optional double left_turn_visible = 3;
  bool has_left_turn_visible() const;
  void clear_left_turn_visible();
  static const int kLeftTurnVisibleFieldNumber = 3;
  double left_turn_visible() const;
  void set_left_turn_visible(double value);

  // optional double left_turn_switch_on = 4;
  bool has_left_turn_switch_on() const;
  void clear_left_turn_switch_on();
  static const int kLeftTurnSwitchOnFieldNumber = 4;
  double left_turn_switch_on() const;
  void set_left_turn_switch_on(double value);

  // optional double right_turn_visible = 5;
  bool has_right_turn_visible() const;
  void clear_right_turn_visible();
  static const int kRightTurnVisibleFieldNumber = 5;
  double right_turn_visible() const;
  void set_right_turn_visible(double value);

  // optional double right_turn_switch_on = 6;
  bool has_right_turn_switch_on() const;
  void clear_right_turn_switch_on();
  static const int kRightTurnSwitchOnFieldNumber = 6;
  double right_turn_switch_on() const;
  void set_right_turn_switch_on(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.LightStatus)
 private:
  inline void set_has_brake_visible();
  inline void clear_has_brake_visible();
  inline void set_has_brake_switch_on();
  inline void clear_has_brake_switch_on();
  inline void set_has_left_turn_visible();
  inline void clear_has_left_turn_visible();
  inline void set_has_left_turn_switch_on();
  inline void clear_has_left_turn_switch_on();
  inline void set_has_right_turn_visible();
  inline void clear_has_right_turn_visible();
  inline void set_has_right_turn_switch_on();
  inline void clear_has_right_turn_switch_on();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double brake_visible_;
  double brake_switch_on_;
  double left_turn_visible_;
  double left_turn_switch_on_;
  double right_turn_visible_;
  double right_turn_switch_on_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static LightStatus* default_instance_;
};
// -------------------------------------------------------------------

class SensorMeasurement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.SensorMeasurement) */ {
 public:
  SensorMeasurement();
  virtual ~SensorMeasurement();

  SensorMeasurement(const SensorMeasurement& from);

  inline SensorMeasurement& operator=(const SensorMeasurement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorMeasurement& default_instance();

  void Swap(SensorMeasurement* other);

  // implements Message ----------------------------------------------

  inline SensorMeasurement* New() const { return New(NULL); }

  SensorMeasurement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorMeasurement& from);
  void MergeFrom(const SensorMeasurement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorMeasurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::std::string& sensor_id() const;
  void set_sensor_id(const ::std::string& value);
  void set_sensor_id(const char* value);
  void set_sensor_id(const char* value, size_t size);
  ::std::string* mutable_sensor_id();
  ::std::string* release_sensor_id();
  void set_allocated_sensor_id(::std::string* sensor_id);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .apollo.common.Point3D position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* mutable_position();
  ::apollo::common::Point3D* release_position();
  void set_allocated_position(::apollo::common::Point3D* position);

  // optional double theta = 4;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  double theta() const;
  void set_theta(double value);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional double width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // optional double height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // optional .apollo.common.Point3D velocity = 8;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 8;
  const ::apollo::common::Point3D& velocity() const;
  ::apollo::common::Point3D* mutable_velocity();
  ::apollo::common::Point3D* release_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);

  // optional .apollo.perception.PerceptionObstacle.Type type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
  bool has_sub_type() const;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 10;
  ::apollo::perception::PerceptionObstacle_SubType sub_type() const;
  void set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);

  // optional double timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  double timestamp() const;
  void set_timestamp(double value);

  // optional .apollo.perception.BBox2D box = 12;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 12;
  const ::apollo::perception::BBox2D& box() const;
  ::apollo::perception::BBox2D* mutable_box();
  ::apollo::perception::BBox2D* release_box();
  void set_allocated_box(::apollo::perception::BBox2D* box);

  // @@protoc_insertion_point(class_scope:apollo.perception.SensorMeasurement)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_box();
  inline void clear_has_box();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sensor_id_;
  ::apollo::common::Point3D* position_;
  double theta_;
  double length_;
  ::google::protobuf::int32 id_;
  int type_;
  double width_;
  double height_;
  ::apollo::common::Point3D* velocity_;
  double timestamp_;
  ::apollo::perception::BBox2D* box_;
  int sub_type_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static SensorMeasurement* default_instance_;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  void Swap(Trajectory* other);

  // implements Message ----------------------------------------------

  inline Trajectory* New() const { return New(NULL); }

  Trajectory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double probability = 1;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 1;
  double probability() const;
  void set_probability(double value);

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 2;
  const ::apollo::common::TrajectoryPoint& trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::apollo::common::TrajectoryPoint* add_trajectory_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      trajectory_point() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.Trajectory)
 private:
  inline void set_has_probability();
  inline void clear_has_probability();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double probability_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint > trajectory_point_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static Trajectory* default_instance_;
};
// -------------------------------------------------------------------

class DebugMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.DebugMessage) */ {
 public:
  DebugMessage();
  virtual ~DebugMessage();

  DebugMessage(const DebugMessage& from);

  inline DebugMessage& operator=(const DebugMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugMessage& default_instance();

  void Swap(DebugMessage* other);

  // implements Message ----------------------------------------------

  inline DebugMessage* New() const { return New(NULL); }

  DebugMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugMessage& from);
  void MergeFrom(const DebugMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.Trajectory trajectory = 1;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 1;
  const ::apollo::perception::Trajectory& trajectory(int index) const;
  ::apollo::perception::Trajectory* mutable_trajectory(int index);
  ::apollo::perception::Trajectory* add_trajectory();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::Trajectory >*
      mutable_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Trajectory >&
      trajectory() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.DebugMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::Trajectory > trajectory_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static DebugMessage* default_instance_;
};
// -------------------------------------------------------------------

class PerceptionObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacle) */ {
 public:
  PerceptionObstacle();
  virtual ~PerceptionObstacle();

  PerceptionObstacle(const PerceptionObstacle& from);

  inline PerceptionObstacle& operator=(const PerceptionObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacle& default_instance();

  void Swap(PerceptionObstacle* other);

  // implements Message ----------------------------------------------

  inline PerceptionObstacle* New() const { return New(NULL); }

  PerceptionObstacle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerceptionObstacle& from);
  void MergeFrom(const PerceptionObstacle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerceptionObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PerceptionObstacle_Type Type;
  static const Type UNKNOWN =
    PerceptionObstacle_Type_UNKNOWN;
  static const Type UNKNOWN_MOVABLE =
    PerceptionObstacle_Type_UNKNOWN_MOVABLE;
  static const Type UNKNOWN_UNMOVABLE =
    PerceptionObstacle_Type_UNKNOWN_UNMOVABLE;
  static const Type PEDESTRIAN =
    PerceptionObstacle_Type_PEDESTRIAN;
  static const Type BICYCLE =
    PerceptionObstacle_Type_BICYCLE;
  static const Type VEHICLE =
    PerceptionObstacle_Type_VEHICLE;
  static inline bool Type_IsValid(int value) {
    return PerceptionObstacle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PerceptionObstacle_Type_Type_MIN;
  static const Type Type_MAX =
    PerceptionObstacle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PerceptionObstacle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PerceptionObstacle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PerceptionObstacle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PerceptionObstacle_Type_Parse(name, value);
  }

  typedef PerceptionObstacle_ConfidenceType ConfidenceType;
  static const ConfidenceType CONFIDENCE_UNKNOWN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
  static const ConfidenceType CONFIDENCE_CNN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN;
  static const ConfidenceType CONFIDENCE_RADAR =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
  static inline bool ConfidenceType_IsValid(int value) {
    return PerceptionObstacle_ConfidenceType_IsValid(value);
  }
  static const ConfidenceType ConfidenceType_MIN =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MIN;
  static const ConfidenceType ConfidenceType_MAX =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MAX;
  static const int ConfidenceType_ARRAYSIZE =
    PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfidenceType_descriptor() {
    return PerceptionObstacle_ConfidenceType_descriptor();
  }
  static inline const ::std::string& ConfidenceType_Name(ConfidenceType value) {
    return PerceptionObstacle_ConfidenceType_Name(value);
  }
  static inline bool ConfidenceType_Parse(const ::std::string& name,
      ConfidenceType* value) {
    return PerceptionObstacle_ConfidenceType_Parse(name, value);
  }

  typedef PerceptionObstacle_SubType SubType;
  static const SubType ST_UNKNOWN =
    PerceptionObstacle_SubType_ST_UNKNOWN;
  static const SubType ST_UNKNOWN_MOVABLE =
    PerceptionObstacle_SubType_ST_UNKNOWN_MOVABLE;
  static const SubType ST_UNKNOWN_UNMOVABLE =
    PerceptionObstacle_SubType_ST_UNKNOWN_UNMOVABLE;
  static const SubType ST_CAR =
    PerceptionObstacle_SubType_ST_CAR;
  static const SubType ST_VAN =
    PerceptionObstacle_SubType_ST_VAN;
  static const SubType ST_TRUCK =
    PerceptionObstacle_SubType_ST_TRUCK;
  static const SubType ST_BUS =
    PerceptionObstacle_SubType_ST_BUS;
  static const SubType ST_CYCLIST =
    PerceptionObstacle_SubType_ST_CYCLIST;
  static const SubType ST_MOTORCYCLIST =
    PerceptionObstacle_SubType_ST_MOTORCYCLIST;
  static const SubType ST_TRICYCLIST =
    PerceptionObstacle_SubType_ST_TRICYCLIST;
  static const SubType ST_PEDESTRIAN =
    PerceptionObstacle_SubType_ST_PEDESTRIAN;
  static const SubType ST_TRAFFICCONE =
    PerceptionObstacle_SubType_ST_TRAFFICCONE;
  static inline bool SubType_IsValid(int value) {
    return PerceptionObstacle_SubType_IsValid(value);
  }
  static const SubType SubType_MIN =
    PerceptionObstacle_SubType_SubType_MIN;
  static const SubType SubType_MAX =
    PerceptionObstacle_SubType_SubType_MAX;
  static const int SubType_ARRAYSIZE =
    PerceptionObstacle_SubType_SubType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SubType_descriptor() {
    return PerceptionObstacle_SubType_descriptor();
  }
  static inline const ::std::string& SubType_Name(SubType value) {
    return PerceptionObstacle_SubType_Name(value);
  }
  static inline bool SubType_Parse(const ::std::string& name,
      SubType* value) {
    return PerceptionObstacle_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .apollo.common.Point3D position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* mutable_position();
  ::apollo::common::Point3D* release_position();
  void set_allocated_position(::apollo::common::Point3D* position);

  // optional double theta = 3;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // optional .apollo.common.Point3D velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::apollo::common::Point3D& velocity() const;
  ::apollo::common::Point3D* mutable_velocity();
  ::apollo::common::Point3D* release_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional double width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // optional double height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // repeated .apollo.common.Point3D polygon_point = 8;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 8;
  const ::apollo::common::Point3D& polygon_point(int index) const;
  ::apollo::common::Point3D* mutable_polygon_point(int index);
  ::apollo::common::Point3D* add_polygon_point();
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
      polygon_point() const;

  // optional double tracking_time = 9;
  bool has_tracking_time() const;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 9;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);

  // optional double timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  double timestamp() const;
  void set_timestamp(double value);

  // repeated double point_cloud = 12 [packed = true];
  int point_cloud_size() const;
  void clear_point_cloud();
  static const int kPointCloudFieldNumber = 12;
  double point_cloud(int index) const;
  void set_point_cloud(int index, double value);
  void add_point_cloud(double value);
  const ::google::protobuf::RepeatedField< double >&
      point_cloud() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_point_cloud();

  // optional double confidence = 13 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_confidence() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_confidence();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kConfidenceFieldNumber = 13;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double confidence() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_confidence(double value);

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_confidence_type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_confidence_type();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kConfidenceTypeFieldNumber = 14;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::perception::PerceptionObstacle_ConfidenceType confidence_type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value);

  // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int drops_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_drops();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDropsFieldNumber = 15;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::common::Point3D& drops(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::Point3D* mutable_drops(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::common::Point3D* add_drops();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_drops();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
      drops() const;

  // optional .apollo.common.Point3D acceleration = 16;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 16;
  const ::apollo::common::Point3D& acceleration() const;
  ::apollo::common::Point3D* mutable_acceleration();
  ::apollo::common::Point3D* release_acceleration();
  void set_allocated_acceleration(::apollo::common::Point3D* acceleration);

  // optional .apollo.common.Point3D anchor_point = 17;
  bool has_anchor_point() const;
  void clear_anchor_point();
  static const int kAnchorPointFieldNumber = 17;
  const ::apollo::common::Point3D& anchor_point() const;
  ::apollo::common::Point3D* mutable_anchor_point();
  ::apollo::common::Point3D* release_anchor_point();
  void set_allocated_anchor_point(::apollo::common::Point3D* anchor_point);

  // optional .apollo.perception.BBox2D bbox2d = 18;
  bool has_bbox2d() const;
  void clear_bbox2d();
  static const int kBbox2DFieldNumber = 18;
  const ::apollo::perception::BBox2D& bbox2d() const;
  ::apollo::perception::BBox2D* mutable_bbox2d();
  ::apollo::perception::BBox2D* release_bbox2d();
  void set_allocated_bbox2d(::apollo::perception::BBox2D* bbox2d);

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
  bool has_sub_type() const;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 19;
  ::apollo::perception::PerceptionObstacle_SubType sub_type() const;
  void set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);

  // repeated .apollo.perception.SensorMeasurement measurements = 20;
  int measurements_size() const;
  void clear_measurements();
  static const int kMeasurementsFieldNumber = 20;
  const ::apollo::perception::SensorMeasurement& measurements(int index) const;
  ::apollo::perception::SensorMeasurement* mutable_measurements(int index);
  ::apollo::perception::SensorMeasurement* add_measurements();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeasurement >*
      mutable_measurements();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeasurement >&
      measurements() const;

  // optional double height_above_ground = 21 [default = nan];
  bool has_height_above_ground() const;
  void clear_height_above_ground();
  static const int kHeightAboveGroundFieldNumber = 21;
  double height_above_ground() const;
  void set_height_above_ground(double value);

  // repeated double position_covariance = 22 [packed = true];
  int position_covariance_size() const;
  void clear_position_covariance();
  static const int kPositionCovarianceFieldNumber = 22;
  double position_covariance(int index) const;
  void set_position_covariance(int index, double value);
  void add_position_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      position_covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position_covariance();

  // repeated double velocity_covariance = 23 [packed = true];
  int velocity_covariance_size() const;
  void clear_velocity_covariance();
  static const int kVelocityCovarianceFieldNumber = 23;
  double velocity_covariance(int index) const;
  void set_velocity_covariance(int index, double value);
  void add_velocity_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      velocity_covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_velocity_covariance();

  // repeated double acceleration_covariance = 24 [packed = true];
  int acceleration_covariance_size() const;
  void clear_acceleration_covariance();
  static const int kAccelerationCovarianceFieldNumber = 24;
  double acceleration_covariance(int index) const;
  void set_acceleration_covariance(int index, double value);
  void add_acceleration_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      acceleration_covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_acceleration_covariance();

  // optional .apollo.perception.LightStatus light_status = 25;
  bool has_light_status() const;
  void clear_light_status();
  static const int kLightStatusFieldNumber = 25;
  const ::apollo::perception::LightStatus& light_status() const;
  ::apollo::perception::LightStatus* mutable_light_status();
  ::apollo::perception::LightStatus* release_light_status();
  void set_allocated_light_status(::apollo::perception::LightStatus* light_status);

  // optional .apollo.perception.DebugMessage msg = 26;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 26;
  const ::apollo::perception::DebugMessage& msg() const;
  ::apollo::perception::DebugMessage* mutable_msg();
  ::apollo::perception::DebugMessage* release_msg();
  void set_allocated_msg(::apollo::perception::DebugMessage* msg);

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_tracking_time();
  inline void clear_has_tracking_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_confidence_type();
  inline void clear_has_confidence_type();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_anchor_point();
  inline void clear_has_anchor_point();
  inline void set_has_bbox2d();
  inline void clear_has_bbox2d();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();
  inline void set_has_height_above_ground();
  inline void clear_has_height_above_ground();
  inline void set_has_light_status();
  inline void clear_has_light_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Point3D* position_;
  double theta_;
  ::apollo::common::Point3D* velocity_;
  double length_;
  ::google::protobuf::int32 id_;
  int type_;
  double width_;
  double height_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D > polygon_point_;
  double tracking_time_;
  double timestamp_;
  ::google::protobuf::RepeatedField< double > point_cloud_;
  mutable int _point_cloud_cached_byte_size_;
  double confidence_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D > drops_;
  ::apollo::common::Point3D* acceleration_;
  int confidence_type_;
  int sub_type_;
  ::apollo::common::Point3D* anchor_point_;
  ::apollo::perception::BBox2D* bbox2d_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeasurement > measurements_;
  double height_above_ground_;
  ::google::protobuf::RepeatedField< double > position_covariance_;
  mutable int _position_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > velocity_covariance_;
  mutable int _velocity_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > acceleration_covariance_;
  mutable int _acceleration_covariance_cached_byte_size_;
  ::apollo::perception::LightStatus* light_status_;
  ::apollo::perception::DebugMessage* msg_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static PerceptionObstacle* default_instance_;
};
// -------------------------------------------------------------------

class LaneMarker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LaneMarker) */ {
 public:
  LaneMarker();
  virtual ~LaneMarker();

  LaneMarker(const LaneMarker& from);

  inline LaneMarker& operator=(const LaneMarker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMarker& default_instance();

  void Swap(LaneMarker* other);

  // implements Message ----------------------------------------------

  inline LaneMarker* New() const { return New(NULL); }

  LaneMarker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneMarker& from);
  void MergeFrom(const LaneMarker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneMarker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  bool has_lane_type() const;
  void clear_lane_type();
  static const int kLaneTypeFieldNumber = 1;
  ::apollo::hdmap::LaneBoundaryType_Type lane_type() const;
  void set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value);

  // optional double quality = 2;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  double quality() const;
  void set_quality(double value);

  // optional int32 model_degree = 3;
  bool has_model_degree() const;
  void clear_model_degree();
  static const int kModelDegreeFieldNumber = 3;
  ::google::protobuf::int32 model_degree() const;
  void set_model_degree(::google::protobuf::int32 value);

  // optional double c0_position = 4;
  bool has_c0_position() const;
  void clear_c0_position();
  static const int kC0PositionFieldNumber = 4;
  double c0_position() const;
  void set_c0_position(double value);

  // optional double c1_heading_angle = 5;
  bool has_c1_heading_angle() const;
  void clear_c1_heading_angle();
  static const int kC1HeadingAngleFieldNumber = 5;
  double c1_heading_angle() const;
  void set_c1_heading_angle(double value);

  // optional double c2_curvature = 6;
  bool has_c2_curvature() const;
  void clear_c2_curvature();
  static const int kC2CurvatureFieldNumber = 6;
  double c2_curvature() const;
  void set_c2_curvature(double value);

  // optional double c3_curvature_derivative = 7;
  bool has_c3_curvature_derivative() const;
  void clear_c3_curvature_derivative();
  static const int kC3CurvatureDerivativeFieldNumber = 7;
  double c3_curvature_derivative() const;
  void set_c3_curvature_derivative(double value);

  // optional double view_range = 8;
  bool has_view_range() const;
  void clear_view_range();
  static const int kViewRangeFieldNumber = 8;
  double view_range() const;
  void set_view_range(double value);

  // optional double longitude_start = 9;
  bool has_longitude_start() const;
  void clear_longitude_start();
  static const int kLongitudeStartFieldNumber = 9;
  double longitude_start() const;
  void set_longitude_start(double value);

  // optional double longitude_end = 10;
  bool has_longitude_end() const;
  void clear_longitude_end();
  static const int kLongitudeEndFieldNumber = 10;
  double longitude_end() const;
  void set_longitude_end(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.LaneMarker)
 private:
  inline void set_has_lane_type();
  inline void clear_has_lane_type();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_model_degree();
  inline void clear_has_model_degree();
  inline void set_has_c0_position();
  inline void clear_has_c0_position();
  inline void set_has_c1_heading_angle();
  inline void clear_has_c1_heading_angle();
  inline void set_has_c2_curvature();
  inline void clear_has_c2_curvature();
  inline void set_has_c3_curvature_derivative();
  inline void clear_has_c3_curvature_derivative();
  inline void set_has_view_range();
  inline void clear_has_view_range();
  inline void set_has_longitude_start();
  inline void clear_has_longitude_start();
  inline void set_has_longitude_end();
  inline void clear_has_longitude_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double quality_;
  int lane_type_;
  ::google::protobuf::int32 model_degree_;
  double c0_position_;
  double c1_heading_angle_;
  double c2_curvature_;
  double c3_curvature_derivative_;
  double view_range_;
  double longitude_start_;
  double longitude_end_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static LaneMarker* default_instance_;
};
// -------------------------------------------------------------------

class LaneMarkers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LaneMarkers) */ {
 public:
  LaneMarkers();
  virtual ~LaneMarkers();

  LaneMarkers(const LaneMarkers& from);

  inline LaneMarkers& operator=(const LaneMarkers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMarkers& default_instance();

  void Swap(LaneMarkers* other);

  // implements Message ----------------------------------------------

  inline LaneMarkers* New() const { return New(NULL); }

  LaneMarkers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneMarkers& from);
  void MergeFrom(const LaneMarkers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneMarkers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  bool has_left_lane_marker() const;
  void clear_left_lane_marker();
  static const int kLeftLaneMarkerFieldNumber = 1;
  const ::apollo::perception::LaneMarker& left_lane_marker() const;
  ::apollo::perception::LaneMarker* mutable_left_lane_marker();
  ::apollo::perception::LaneMarker* release_left_lane_marker();
  void set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker);

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  bool has_right_lane_marker() const;
  void clear_right_lane_marker();
  static const int kRightLaneMarkerFieldNumber = 2;
  const ::apollo::perception::LaneMarker& right_lane_marker() const;
  ::apollo::perception::LaneMarker* mutable_right_lane_marker();
  ::apollo::perception::LaneMarker* release_right_lane_marker();
  void set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker);

  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  int next_left_lane_marker_size() const;
  void clear_next_left_lane_marker();
  static const int kNextLeftLaneMarkerFieldNumber = 3;
  const ::apollo::perception::LaneMarker& next_left_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* mutable_next_left_lane_marker(int index);
  ::apollo::perception::LaneMarker* add_next_left_lane_marker();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
      mutable_next_left_lane_marker();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
      next_left_lane_marker() const;

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  int next_right_lane_marker_size() const;
  void clear_next_right_lane_marker();
  static const int kNextRightLaneMarkerFieldNumber = 4;
  const ::apollo::perception::LaneMarker& next_right_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* mutable_next_right_lane_marker(int index);
  ::apollo::perception::LaneMarker* add_next_right_lane_marker();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
      mutable_next_right_lane_marker();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
      next_right_lane_marker() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.LaneMarkers)
 private:
  inline void set_has_left_lane_marker();
  inline void clear_has_left_lane_marker();
  inline void set_has_right_lane_marker();
  inline void clear_has_right_lane_marker();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::LaneMarker* left_lane_marker_;
  ::apollo::perception::LaneMarker* right_lane_marker_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker > next_left_lane_marker_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker > next_right_lane_marker_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static LaneMarkers* default_instance_;
};
// -------------------------------------------------------------------

class CIPVInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.CIPVInfo) */ {
 public:
  CIPVInfo();
  virtual ~CIPVInfo();

  CIPVInfo(const CIPVInfo& from);

  inline CIPVInfo& operator=(const CIPVInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CIPVInfo& default_instance();

  void Swap(CIPVInfo* other);

  // implements Message ----------------------------------------------

  inline CIPVInfo* New() const { return New(NULL); }

  CIPVInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CIPVInfo& from);
  void MergeFrom(const CIPVInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIPVInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cipv_id = 1;
  bool has_cipv_id() const;
  void clear_cipv_id();
  static const int kCipvIdFieldNumber = 1;
  ::google::protobuf::int32 cipv_id() const;
  void set_cipv_id(::google::protobuf::int32 value);

  // repeated int32 potential_cipv_id = 2;
  int potential_cipv_id_size() const;
  void clear_potential_cipv_id();
  static const int kPotentialCipvIdFieldNumber = 2;
  ::google::protobuf::int32 potential_cipv_id(int index) const;
  void set_potential_cipv_id(int index, ::google::protobuf::int32 value);
  void add_potential_cipv_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      potential_cipv_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_potential_cipv_id();

  // @@protoc_insertion_point(class_scope:apollo.perception.CIPVInfo)
 private:
  inline void set_has_cipv_id();
  inline void clear_has_cipv_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > potential_cipv_id_;
  ::google::protobuf::int32 cipv_id_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static CIPVInfo* default_instance_;
};
// -------------------------------------------------------------------

class PerceptionObstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacles) */ {
 public:
  PerceptionObstacles();
  virtual ~PerceptionObstacles();

  PerceptionObstacles(const PerceptionObstacles& from);

  inline PerceptionObstacles& operator=(const PerceptionObstacles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacles& default_instance();

  void Swap(PerceptionObstacles* other);

  // implements Message ----------------------------------------------

  inline PerceptionObstacles* New() const { return New(NULL); }

  PerceptionObstacles* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerceptionObstacles& from);
  void MergeFrom(const PerceptionObstacles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerceptionObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  int perception_obstacle_size() const;
  void clear_perception_obstacle();
  static const int kPerceptionObstacleFieldNumber = 1;
  const ::apollo::perception::PerceptionObstacle& perception_obstacle(int index) const;
  ::apollo::perception::PerceptionObstacle* mutable_perception_obstacle(int index);
  ::apollo::perception::PerceptionObstacle* add_perception_obstacle();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
      mutable_perception_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
      perception_obstacle() const;

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::apollo::common::ErrorCode error_code() const;
  void set_error_code(::apollo::common::ErrorCode value);

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  bool has_lane_marker() const;
  void clear_lane_marker();
  static const int kLaneMarkerFieldNumber = 4;
  const ::apollo::perception::LaneMarkers& lane_marker() const;
  ::apollo::perception::LaneMarkers* mutable_lane_marker();
  ::apollo::perception::LaneMarkers* release_lane_marker();
  void set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker);

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  bool has_cipv_info() const;
  void clear_cipv_info();
  static const int kCipvInfoFieldNumber = 5;
  const ::apollo::perception::CIPVInfo& cipv_info() const;
  ::apollo::perception::CIPVInfo* mutable_cipv_info();
  ::apollo::perception::CIPVInfo* release_cipv_info();
  void set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info);

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacles)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_lane_marker();
  inline void clear_has_lane_marker();
  inline void set_has_cipv_info();
  inline void clear_has_cipv_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle > perception_obstacle_;
  ::apollo::common::Header* header_;
  ::apollo::perception::LaneMarkers* lane_marker_;
  ::apollo::perception::CIPVInfo* cipv_info_;
  int error_code_;
  friend void  protobuf_AddDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_AssignDesc_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();
  friend void protobuf_ShutdownFile_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto();

  void InitAsDefaultInstance();
  static PerceptionObstacles* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BBox2D

// optional double xmin = 1;
inline bool BBox2D::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBox2D::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBox2D::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBox2D::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
inline double BBox2D::xmin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.xmin)
  return xmin_;
}
inline void BBox2D::set_xmin(double value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.xmin)
}

// optional double ymin = 2;
inline bool BBox2D::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBox2D::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBox2D::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBox2D::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
inline double BBox2D::ymin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.ymin)
  return ymin_;
}
inline void BBox2D::set_ymin(double value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.ymin)
}

// optional double xmax = 3;
inline bool BBox2D::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBox2D::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBox2D::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBox2D::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
inline double BBox2D::xmax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.xmax)
  return xmax_;
}
inline void BBox2D::set_xmax(double value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.xmax)
}

// optional double ymax = 4;
inline bool BBox2D::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBox2D::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBox2D::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBox2D::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
inline double BBox2D::ymax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.ymax)
  return ymax_;
}
inline void BBox2D::set_ymax(double value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.ymax)
}

// -------------------------------------------------------------------

// LightStatus

// optional double brake_visible = 1;
inline bool LightStatus::has_brake_visible() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightStatus::set_has_brake_visible() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightStatus::clear_has_brake_visible() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightStatus::clear_brake_visible() {
  brake_visible_ = 0;
  clear_has_brake_visible();
}
inline double LightStatus::brake_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.brake_visible)
  return brake_visible_;
}
inline void LightStatus::set_brake_visible(double value) {
  set_has_brake_visible();
  brake_visible_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.brake_visible)
}

// optional double brake_switch_on = 2;
inline bool LightStatus::has_brake_switch_on() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightStatus::set_has_brake_switch_on() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightStatus::clear_has_brake_switch_on() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightStatus::clear_brake_switch_on() {
  brake_switch_on_ = 0;
  clear_has_brake_switch_on();
}
inline double LightStatus::brake_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.brake_switch_on)
  return brake_switch_on_;
}
inline void LightStatus::set_brake_switch_on(double value) {
  set_has_brake_switch_on();
  brake_switch_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.brake_switch_on)
}

// optional double left_turn_visible = 3;
inline bool LightStatus::has_left_turn_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightStatus::set_has_left_turn_visible() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LightStatus::clear_has_left_turn_visible() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LightStatus::clear_left_turn_visible() {
  left_turn_visible_ = 0;
  clear_has_left_turn_visible();
}
inline double LightStatus::left_turn_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.left_turn_visible)
  return left_turn_visible_;
}
inline void LightStatus::set_left_turn_visible(double value) {
  set_has_left_turn_visible();
  left_turn_visible_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.left_turn_visible)
}

// optional double left_turn_switch_on = 4;
inline bool LightStatus::has_left_turn_switch_on() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LightStatus::set_has_left_turn_switch_on() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LightStatus::clear_has_left_turn_switch_on() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LightStatus::clear_left_turn_switch_on() {
  left_turn_switch_on_ = 0;
  clear_has_left_turn_switch_on();
}
inline double LightStatus::left_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.left_turn_switch_on)
  return left_turn_switch_on_;
}
inline void LightStatus::set_left_turn_switch_on(double value) {
  set_has_left_turn_switch_on();
  left_turn_switch_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.left_turn_switch_on)
}

// optional double right_turn_visible = 5;
inline bool LightStatus::has_right_turn_visible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LightStatus::set_has_right_turn_visible() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LightStatus::clear_has_right_turn_visible() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LightStatus::clear_right_turn_visible() {
  right_turn_visible_ = 0;
  clear_has_right_turn_visible();
}
inline double LightStatus::right_turn_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.right_turn_visible)
  return right_turn_visible_;
}
inline void LightStatus::set_right_turn_visible(double value) {
  set_has_right_turn_visible();
  right_turn_visible_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.right_turn_visible)
}

// optional double right_turn_switch_on = 6;
inline bool LightStatus::has_right_turn_switch_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LightStatus::set_has_right_turn_switch_on() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LightStatus::clear_has_right_turn_switch_on() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LightStatus::clear_right_turn_switch_on() {
  right_turn_switch_on_ = 0;
  clear_has_right_turn_switch_on();
}
inline double LightStatus::right_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.right_turn_switch_on)
  return right_turn_switch_on_;
}
inline void LightStatus::set_right_turn_switch_on(double value) {
  set_has_right_turn_switch_on();
  right_turn_switch_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.right_turn_switch_on)
}

// -------------------------------------------------------------------

// SensorMeasurement

// optional string sensor_id = 1;
inline bool SensorMeasurement::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorMeasurement::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorMeasurement::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorMeasurement::clear_sensor_id() {
  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_id();
}
inline const ::std::string& SensorMeasurement::sensor_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.sensor_id)
  return sensor_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMeasurement::set_sensor_id(const ::std::string& value) {
  set_has_sensor_id();
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.sensor_id)
}
inline void SensorMeasurement::set_sensor_id(const char* value) {
  set_has_sensor_id();
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.SensorMeasurement.sensor_id)
}
inline void SensorMeasurement::set_sensor_id(const char* value, size_t size) {
  set_has_sensor_id();
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.SensorMeasurement.sensor_id)
}
inline ::std::string* SensorMeasurement::mutable_sensor_id() {
  set_has_sensor_id();
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.sensor_id)
  return sensor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMeasurement::release_sensor_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.sensor_id)
  clear_has_sensor_id();
  return sensor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMeasurement::set_allocated_sensor_id(::std::string* sensor_id) {
  if (sensor_id != NULL) {
    set_has_sensor_id();
  } else {
    clear_has_sensor_id();
  }
  sensor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.sensor_id)
}

// optional int32 id = 2;
inline bool SensorMeasurement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorMeasurement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorMeasurement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorMeasurement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SensorMeasurement::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.id)
  return id_;
}
inline void SensorMeasurement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.id)
}

// optional .apollo.common.Point3D position = 3;
inline bool SensorMeasurement::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorMeasurement::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorMeasurement::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorMeasurement::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
inline const ::apollo::common::Point3D& SensorMeasurement::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::common::Point3D* SensorMeasurement::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.position)
  return position_;
}
inline ::apollo::common::Point3D* SensorMeasurement::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void SensorMeasurement::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.position)
}

// optional double theta = 4;
inline bool SensorMeasurement::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorMeasurement::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorMeasurement::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorMeasurement::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double SensorMeasurement::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.theta)
  return theta_;
}
inline void SensorMeasurement::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.theta)
}

// optional double length = 5;
inline bool SensorMeasurement::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorMeasurement::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorMeasurement::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorMeasurement::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double SensorMeasurement::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.length)
  return length_;
}
inline void SensorMeasurement::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.length)
}

// optional double width = 6;
inline bool SensorMeasurement::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorMeasurement::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorMeasurement::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorMeasurement::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double SensorMeasurement::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.width)
  return width_;
}
inline void SensorMeasurement::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.width)
}

// optional double height = 7;
inline bool SensorMeasurement::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorMeasurement::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorMeasurement::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorMeasurement::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double SensorMeasurement::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.height)
  return height_;
}
inline void SensorMeasurement::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.height)
}

// optional .apollo.common.Point3D velocity = 8;
inline bool SensorMeasurement::has_velocity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorMeasurement::set_has_velocity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SensorMeasurement::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SensorMeasurement::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
  clear_has_velocity();
}
inline const ::apollo::common::Point3D& SensorMeasurement::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::apollo::common::Point3D* SensorMeasurement::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.velocity)
  return velocity_;
}
inline ::apollo::common::Point3D* SensorMeasurement::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.velocity)
  clear_has_velocity();
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void SensorMeasurement::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.velocity)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 9;
inline bool SensorMeasurement::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorMeasurement::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SensorMeasurement::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SensorMeasurement::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::perception::PerceptionObstacle_Type SensorMeasurement::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
inline void SensorMeasurement::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.type)
}

// optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
inline bool SensorMeasurement::has_sub_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorMeasurement::set_has_sub_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SensorMeasurement::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SensorMeasurement::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
inline ::apollo::perception::PerceptionObstacle_SubType SensorMeasurement::sub_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.sub_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_SubType >(sub_type_);
}
inline void SensorMeasurement::set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  assert(::apollo::perception::PerceptionObstacle_SubType_IsValid(value));
  set_has_sub_type();
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.sub_type)
}

// optional double timestamp = 11;
inline bool SensorMeasurement::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SensorMeasurement::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SensorMeasurement::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SensorMeasurement::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double SensorMeasurement::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.timestamp)
  return timestamp_;
}
inline void SensorMeasurement::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.timestamp)
}

// optional .apollo.perception.BBox2D box = 12;
inline bool SensorMeasurement::has_box() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SensorMeasurement::set_has_box() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SensorMeasurement::clear_has_box() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SensorMeasurement::clear_box() {
  if (box_ != NULL) box_->::apollo::perception::BBox2D::Clear();
  clear_has_box();
}
inline const ::apollo::perception::BBox2D& SensorMeasurement::box() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::apollo::perception::BBox2D* SensorMeasurement::mutable_box() {
  set_has_box();
  if (box_ == NULL) {
    box_ = new ::apollo::perception::BBox2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.box)
  return box_;
}
inline ::apollo::perception::BBox2D* SensorMeasurement::release_box() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.box)
  clear_has_box();
  ::apollo::perception::BBox2D* temp = box_;
  box_ = NULL;
  return temp;
}
inline void SensorMeasurement::set_allocated_box(::apollo::perception::BBox2D* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.box)
}

// -------------------------------------------------------------------

// Trajectory

// optional double probability = 1;
inline bool Trajectory::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trajectory::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trajectory::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline double Trajectory::probability() const {
  // @@protoc_insertion_point(field_get:apollo.perception.Trajectory.probability)
  return probability_;
}
inline void Trajectory::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.Trajectory.probability)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
inline int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
inline const ::apollo::common::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::apollo::common::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::apollo::common::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.Trajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.Trajectory.trajectory_point)
  return trajectory_point_;
}

// -------------------------------------------------------------------

// DebugMessage

// repeated .apollo.perception.Trajectory trajectory = 1;
inline int DebugMessage::trajectory_size() const {
  return trajectory_.size();
}
inline void DebugMessage::clear_trajectory() {
  trajectory_.Clear();
}
inline const ::apollo::perception::Trajectory& DebugMessage::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.DebugMessage.trajectory)
  return trajectory_.Get(index);
}
inline ::apollo::perception::Trajectory* DebugMessage::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.DebugMessage.trajectory)
  return trajectory_.Mutable(index);
}
inline ::apollo::perception::Trajectory* DebugMessage::add_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.perception.DebugMessage.trajectory)
  return trajectory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::Trajectory >*
DebugMessage::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.DebugMessage.trajectory)
  return &trajectory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::Trajectory >&
DebugMessage::trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.perception.DebugMessage.trajectory)
  return trajectory_;
}

// -------------------------------------------------------------------

// PerceptionObstacle

// optional int32 id = 1;
inline bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.id)
  return id_;
}
inline void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.id)
}

// optional .apollo.common.Point3D position = 2;
inline bool PerceptionObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerceptionObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerceptionObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerceptionObstacle::clear_position() {
  if (position_ != NULL) position_->::apollo::common::Point3D::Clear();
  clear_has_position();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.position)
  return position_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_position(::apollo::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.position)
}

// optional double theta = 3;
inline bool PerceptionObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerceptionObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerceptionObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.theta)
  return theta_;
}
inline void PerceptionObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.theta)
}

// optional .apollo.common.Point3D velocity = 4;
inline bool PerceptionObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerceptionObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerceptionObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerceptionObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::apollo::common::Point3D::Clear();
  clear_has_velocity();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.velocity)
  return velocity_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.velocity)
  clear_has_velocity();
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
inline bool PerceptionObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerceptionObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerceptionObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerceptionObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.length)
  return length_;
}
inline void PerceptionObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.length)
}

// optional double width = 6;
inline bool PerceptionObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerceptionObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PerceptionObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PerceptionObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.width)
  return width_;
}
inline void PerceptionObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.width)
}

// optional double height = 7;
inline bool PerceptionObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerceptionObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PerceptionObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PerceptionObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height)
  return height_;
}
inline void PerceptionObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height)
}

// repeated .apollo.common.Point3D polygon_point = 8;
inline int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
inline void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::apollo::common::Point3D* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
inline bool PerceptionObstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerceptionObstacle::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PerceptionObstacle::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
inline double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
inline void PerceptionObstacle::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.tracking_time)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 10;
inline bool PerceptionObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerceptionObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PerceptionObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PerceptionObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
inline void PerceptionObstacle::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
inline bool PerceptionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerceptionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PerceptionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.timestamp)
  return timestamp_;
}
inline void PerceptionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
inline int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
inline void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
inline double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
inline void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.point_cloud)
}
inline void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.point_cloud)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// optional double confidence = 13 [deprecated = true];
inline bool PerceptionObstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PerceptionObstacle::set_has_confidence() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PerceptionObstacle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PerceptionObstacle::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence)
  return confidence_;
}
inline void PerceptionObstacle::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence)
}

// optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
inline bool PerceptionObstacle::has_confidence_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PerceptionObstacle::set_has_confidence_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PerceptionObstacle::clear_has_confidence_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 0;
  clear_has_confidence_type();
}
inline ::apollo::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
inline void PerceptionObstacle::set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value) {
  assert(::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(value));
  set_has_confidence_type();
  confidence_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence_type)
}

// repeated .apollo.common.Point3D drops = 15 [deprecated = true];
inline int PerceptionObstacle::drops_size() const {
  return drops_.size();
}
inline void PerceptionObstacle::clear_drops() {
  drops_.Clear();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.drops)
  return drops_.Get(index);
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.drops)
  return drops_.Mutable(index);
}
inline ::apollo::common::Point3D* PerceptionObstacle::add_drops() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.drops)
  return drops_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.drops)
  return &drops_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.drops)
  return drops_;
}

// optional .apollo.common.Point3D acceleration = 16;
inline bool PerceptionObstacle::has_acceleration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PerceptionObstacle::set_has_acceleration() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PerceptionObstacle::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PerceptionObstacle::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::apollo::common::Point3D::Clear();
  clear_has_acceleration();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.acceleration)
  return acceleration_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.acceleration)
  clear_has_acceleration();
  ::apollo::common::Point3D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_acceleration(::apollo::common::Point3D* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.acceleration)
}

// optional .apollo.common.Point3D anchor_point = 17;
inline bool PerceptionObstacle::has_anchor_point() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PerceptionObstacle::set_has_anchor_point() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PerceptionObstacle::clear_has_anchor_point() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PerceptionObstacle::clear_anchor_point() {
  if (anchor_point_ != NULL) anchor_point_->::apollo::common::Point3D::Clear();
  clear_has_anchor_point();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::anchor_point() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.anchor_point)
  return anchor_point_ != NULL ? *anchor_point_ : *default_instance_->anchor_point_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_anchor_point() {
  set_has_anchor_point();
  if (anchor_point_ == NULL) {
    anchor_point_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.anchor_point)
  return anchor_point_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_anchor_point() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.anchor_point)
  clear_has_anchor_point();
  ::apollo::common::Point3D* temp = anchor_point_;
  anchor_point_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_anchor_point(::apollo::common::Point3D* anchor_point) {
  delete anchor_point_;
  anchor_point_ = anchor_point;
  if (anchor_point) {
    set_has_anchor_point();
  } else {
    clear_has_anchor_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.anchor_point)
}

// optional .apollo.perception.BBox2D bbox2d = 18;
inline bool PerceptionObstacle::has_bbox2d() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PerceptionObstacle::set_has_bbox2d() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PerceptionObstacle::clear_has_bbox2d() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PerceptionObstacle::clear_bbox2d() {
  if (bbox2d_ != NULL) bbox2d_->::apollo::perception::BBox2D::Clear();
  clear_has_bbox2d();
}
inline const ::apollo::perception::BBox2D& PerceptionObstacle::bbox2d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.bbox2d)
  return bbox2d_ != NULL ? *bbox2d_ : *default_instance_->bbox2d_;
}
inline ::apollo::perception::BBox2D* PerceptionObstacle::mutable_bbox2d() {
  set_has_bbox2d();
  if (bbox2d_ == NULL) {
    bbox2d_ = new ::apollo::perception::BBox2D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.bbox2d)
  return bbox2d_;
}
inline ::apollo::perception::BBox2D* PerceptionObstacle::release_bbox2d() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.bbox2d)
  clear_has_bbox2d();
  ::apollo::perception::BBox2D* temp = bbox2d_;
  bbox2d_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_bbox2d(::apollo::perception::BBox2D* bbox2d) {
  delete bbox2d_;
  bbox2d_ = bbox2d;
  if (bbox2d) {
    set_has_bbox2d();
  } else {
    clear_has_bbox2d();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.bbox2d)
}

// optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
inline bool PerceptionObstacle::has_sub_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PerceptionObstacle::set_has_sub_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PerceptionObstacle::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PerceptionObstacle::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
inline ::apollo::perception::PerceptionObstacle_SubType PerceptionObstacle::sub_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.sub_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_SubType >(sub_type_);
}
inline void PerceptionObstacle::set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  assert(::apollo::perception::PerceptionObstacle_SubType_IsValid(value));
  set_has_sub_type();
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.sub_type)
}

// repeated .apollo.perception.SensorMeasurement measurements = 20;
inline int PerceptionObstacle::measurements_size() const {
  return measurements_.size();
}
inline void PerceptionObstacle::clear_measurements() {
  measurements_.Clear();
}
inline const ::apollo::perception::SensorMeasurement& PerceptionObstacle::measurements(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.measurements)
  return measurements_.Get(index);
}
inline ::apollo::perception::SensorMeasurement* PerceptionObstacle::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.measurements)
  return measurements_.Mutable(index);
}
inline ::apollo::perception::SensorMeasurement* PerceptionObstacle::add_measurements() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.measurements)
  return measurements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeasurement >*
PerceptionObstacle::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.measurements)
  return &measurements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeasurement >&
PerceptionObstacle::measurements() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.measurements)
  return measurements_;
}

// optional double height_above_ground = 21 [default = nan];
inline bool PerceptionObstacle::has_height_above_ground() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PerceptionObstacle::set_has_height_above_ground() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PerceptionObstacle::clear_has_height_above_ground() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PerceptionObstacle::clear_height_above_ground() {
  height_above_ground_ = ::google::protobuf::internal::NaN();
  clear_has_height_above_ground();
}
inline double PerceptionObstacle::height_above_ground() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height_above_ground)
  return height_above_ground_;
}
inline void PerceptionObstacle::set_height_above_ground(double value) {
  set_has_height_above_ground();
  height_above_ground_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height_above_ground)
}

// repeated double position_covariance = 22 [packed = true];
inline int PerceptionObstacle::position_covariance_size() const {
  return position_covariance_.size();
}
inline void PerceptionObstacle::clear_position_covariance() {
  position_covariance_.Clear();
}
inline double PerceptionObstacle::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position_covariance)
  return position_covariance_.Get(index);
}
inline void PerceptionObstacle::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.position_covariance)
}
inline void PerceptionObstacle::add_position_covariance(double value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.position_covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::position_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.position_covariance)
  return position_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.position_covariance)
  return &position_covariance_;
}

// repeated double velocity_covariance = 23 [packed = true];
inline int PerceptionObstacle::velocity_covariance_size() const {
  return velocity_covariance_.size();
}
inline void PerceptionObstacle::clear_velocity_covariance() {
  velocity_covariance_.Clear();
}
inline double PerceptionObstacle::velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity_covariance)
  return velocity_covariance_.Get(index);
}
inline void PerceptionObstacle::set_velocity_covariance(int index, double value) {
  velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.velocity_covariance)
}
inline void PerceptionObstacle::add_velocity_covariance(double value) {
  velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::velocity_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.velocity_covariance)
  return velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.velocity_covariance)
  return &velocity_covariance_;
}

// repeated double acceleration_covariance = 24 [packed = true];
inline int PerceptionObstacle::acceleration_covariance_size() const {
  return acceleration_covariance_.size();
}
inline void PerceptionObstacle::clear_acceleration_covariance() {
  acceleration_covariance_.Clear();
}
inline double PerceptionObstacle::acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return acceleration_covariance_.Get(index);
}
inline void PerceptionObstacle::set_acceleration_covariance(int index, double value) {
  acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.acceleration_covariance)
}
inline void PerceptionObstacle::add_acceleration_covariance(double value) {
  acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.acceleration_covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return acceleration_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return &acceleration_covariance_;
}

// optional .apollo.perception.LightStatus light_status = 25;
inline bool PerceptionObstacle::has_light_status() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PerceptionObstacle::set_has_light_status() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PerceptionObstacle::clear_has_light_status() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PerceptionObstacle::clear_light_status() {
  if (light_status_ != NULL) light_status_->::apollo::perception::LightStatus::Clear();
  clear_has_light_status();
}
inline const ::apollo::perception::LightStatus& PerceptionObstacle::light_status() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.light_status)
  return light_status_ != NULL ? *light_status_ : *default_instance_->light_status_;
}
inline ::apollo::perception::LightStatus* PerceptionObstacle::mutable_light_status() {
  set_has_light_status();
  if (light_status_ == NULL) {
    light_status_ = new ::apollo::perception::LightStatus;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.light_status)
  return light_status_;
}
inline ::apollo::perception::LightStatus* PerceptionObstacle::release_light_status() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.light_status)
  clear_has_light_status();
  ::apollo::perception::LightStatus* temp = light_status_;
  light_status_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_light_status(::apollo::perception::LightStatus* light_status) {
  delete light_status_;
  light_status_ = light_status;
  if (light_status) {
    set_has_light_status();
  } else {
    clear_has_light_status();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.light_status)
}

// optional .apollo.perception.DebugMessage msg = 26;
inline bool PerceptionObstacle::has_msg() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PerceptionObstacle::set_has_msg() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PerceptionObstacle::clear_has_msg() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PerceptionObstacle::clear_msg() {
  if (msg_ != NULL) msg_->::apollo::perception::DebugMessage::Clear();
  clear_has_msg();
}
inline const ::apollo::perception::DebugMessage& PerceptionObstacle::msg() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::apollo::perception::DebugMessage* PerceptionObstacle::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::apollo::perception::DebugMessage;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.msg)
  return msg_;
}
inline ::apollo::perception::DebugMessage* PerceptionObstacle::release_msg() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.msg)
  clear_has_msg();
  ::apollo::perception::DebugMessage* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_msg(::apollo::perception::DebugMessage* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.msg)
}

// -------------------------------------------------------------------

// LaneMarker

// optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
inline bool LaneMarker::has_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneMarker::set_has_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneMarker::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneMarker::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
inline ::apollo::hdmap::LaneBoundaryType_Type LaneMarker::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.lane_type)
  return static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(lane_type_);
}
inline void LaneMarker::set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value) {
  assert(::apollo::hdmap::LaneBoundaryType_Type_IsValid(value));
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.lane_type)
}

// optional double quality = 2;
inline bool LaneMarker::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneMarker::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneMarker::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneMarker::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline double LaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.quality)
  return quality_;
}
inline void LaneMarker::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.quality)
}

// optional int32 model_degree = 3;
inline bool LaneMarker::has_model_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneMarker::set_has_model_degree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneMarker::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneMarker::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
inline ::google::protobuf::int32 LaneMarker::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.model_degree)
  return model_degree_;
}
inline void LaneMarker::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.model_degree)
}

// optional double c0_position = 4;
inline bool LaneMarker::has_c0_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneMarker::set_has_c0_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneMarker::clear_has_c0_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneMarker::clear_c0_position() {
  c0_position_ = 0;
  clear_has_c0_position();
}
inline double LaneMarker::c0_position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c0_position)
  return c0_position_;
}
inline void LaneMarker::set_c0_position(double value) {
  set_has_c0_position();
  c0_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c0_position)
}

// optional double c1_heading_angle = 5;
inline bool LaneMarker::has_c1_heading_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneMarker::set_has_c1_heading_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneMarker::clear_has_c1_heading_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneMarker::clear_c1_heading_angle() {
  c1_heading_angle_ = 0;
  clear_has_c1_heading_angle();
}
inline double LaneMarker::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c1_heading_angle)
  return c1_heading_angle_;
}
inline void LaneMarker::set_c1_heading_angle(double value) {
  set_has_c1_heading_angle();
  c1_heading_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c1_heading_angle)
}

// optional double c2_curvature = 6;
inline bool LaneMarker::has_c2_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneMarker::set_has_c2_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneMarker::clear_has_c2_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneMarker::clear_c2_curvature() {
  c2_curvature_ = 0;
  clear_has_c2_curvature();
}
inline double LaneMarker::c2_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c2_curvature)
  return c2_curvature_;
}
inline void LaneMarker::set_c2_curvature(double value) {
  set_has_c2_curvature();
  c2_curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c2_curvature)
}

// optional double c3_curvature_derivative = 7;
inline bool LaneMarker::has_c3_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneMarker::set_has_c3_curvature_derivative() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneMarker::clear_has_c3_curvature_derivative() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneMarker::clear_c3_curvature_derivative() {
  c3_curvature_derivative_ = 0;
  clear_has_c3_curvature_derivative();
}
inline double LaneMarker::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c3_curvature_derivative)
  return c3_curvature_derivative_;
}
inline void LaneMarker::set_c3_curvature_derivative(double value) {
  set_has_c3_curvature_derivative();
  c3_curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c3_curvature_derivative)
}

// optional double view_range = 8;
inline bool LaneMarker::has_view_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneMarker::set_has_view_range() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaneMarker::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaneMarker::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
inline double LaneMarker::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.view_range)
  return view_range_;
}
inline void LaneMarker::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.view_range)
}

// optional double longitude_start = 9;
inline bool LaneMarker::has_longitude_start() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaneMarker::set_has_longitude_start() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaneMarker::clear_has_longitude_start() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaneMarker::clear_longitude_start() {
  longitude_start_ = 0;
  clear_has_longitude_start();
}
inline double LaneMarker::longitude_start() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_start)
  return longitude_start_;
}
inline void LaneMarker::set_longitude_start(double value) {
  set_has_longitude_start();
  longitude_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_start)
}

// optional double longitude_end = 10;
inline bool LaneMarker::has_longitude_end() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaneMarker::set_has_longitude_end() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaneMarker::clear_has_longitude_end() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaneMarker::clear_longitude_end() {
  longitude_end_ = 0;
  clear_has_longitude_end();
}
inline double LaneMarker::longitude_end() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_end)
  return longitude_end_;
}
inline void LaneMarker::set_longitude_end(double value) {
  set_has_longitude_end();
  longitude_end_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_end)
}

// -------------------------------------------------------------------

// LaneMarkers

// optional .apollo.perception.LaneMarker left_lane_marker = 1;
inline bool LaneMarkers::has_left_lane_marker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneMarkers::set_has_left_lane_marker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneMarkers::clear_has_left_lane_marker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneMarkers::clear_left_lane_marker() {
  if (left_lane_marker_ != NULL) left_lane_marker_->::apollo::perception::LaneMarker::Clear();
  clear_has_left_lane_marker();
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::left_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.left_lane_marker)
  return left_lane_marker_ != NULL ? *left_lane_marker_ : *default_instance_->left_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_left_lane_marker() {
  set_has_left_lane_marker();
  if (left_lane_marker_ == NULL) {
    left_lane_marker_ = new ::apollo::perception::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.left_lane_marker)
  return left_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::release_left_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.left_lane_marker)
  clear_has_left_lane_marker();
  ::apollo::perception::LaneMarker* temp = left_lane_marker_;
  left_lane_marker_ = NULL;
  return temp;
}
inline void LaneMarkers::set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker) {
  delete left_lane_marker_;
  left_lane_marker_ = left_lane_marker;
  if (left_lane_marker) {
    set_has_left_lane_marker();
  } else {
    clear_has_left_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.left_lane_marker)
}

// optional .apollo.perception.LaneMarker right_lane_marker = 2;
inline bool LaneMarkers::has_right_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneMarkers::set_has_right_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneMarkers::clear_has_right_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneMarkers::clear_right_lane_marker() {
  if (right_lane_marker_ != NULL) right_lane_marker_->::apollo::perception::LaneMarker::Clear();
  clear_has_right_lane_marker();
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::right_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.right_lane_marker)
  return right_lane_marker_ != NULL ? *right_lane_marker_ : *default_instance_->right_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_right_lane_marker() {
  set_has_right_lane_marker();
  if (right_lane_marker_ == NULL) {
    right_lane_marker_ = new ::apollo::perception::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.right_lane_marker)
  return right_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::release_right_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.right_lane_marker)
  clear_has_right_lane_marker();
  ::apollo::perception::LaneMarker* temp = right_lane_marker_;
  right_lane_marker_ = NULL;
  return temp;
}
inline void LaneMarkers::set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker) {
  delete right_lane_marker_;
  right_lane_marker_ = right_lane_marker;
  if (right_lane_marker) {
    set_has_right_lane_marker();
  } else {
    clear_has_right_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.right_lane_marker)
}

// repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
inline int LaneMarkers::next_left_lane_marker_size() const {
  return next_left_lane_marker_.size();
}
inline void LaneMarkers::clear_next_left_lane_marker() {
  next_left_lane_marker_.Clear();
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::next_left_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Get(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_next_left_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Mutable(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::add_next_left_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return &next_left_lane_marker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_left_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_;
}

// repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
inline int LaneMarkers::next_right_lane_marker_size() const {
  return next_right_lane_marker_.size();
}
inline void LaneMarkers::clear_next_right_lane_marker() {
  next_right_lane_marker_.Clear();
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::next_right_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Get(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_next_right_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Mutable(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::add_next_right_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return &next_right_lane_marker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_right_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_;
}

// -------------------------------------------------------------------

// CIPVInfo

// optional int32 cipv_id = 1;
inline bool CIPVInfo::has_cipv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CIPVInfo::set_has_cipv_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CIPVInfo::clear_has_cipv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CIPVInfo::clear_cipv_id() {
  cipv_id_ = 0;
  clear_has_cipv_id();
}
inline ::google::protobuf::int32 CIPVInfo::cipv_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.cipv_id)
  return cipv_id_;
}
inline void CIPVInfo::set_cipv_id(::google::protobuf::int32 value) {
  set_has_cipv_id();
  cipv_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.cipv_id)
}

// repeated int32 potential_cipv_id = 2;
inline int CIPVInfo::potential_cipv_id_size() const {
  return potential_cipv_id_.size();
}
inline void CIPVInfo::clear_potential_cipv_id() {
  potential_cipv_id_.Clear();
}
inline ::google::protobuf::int32 CIPVInfo::potential_cipv_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_.Get(index);
}
inline void CIPVInfo::set_potential_cipv_id(int index, ::google::protobuf::int32 value) {
  potential_cipv_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.potential_cipv_id)
}
inline void CIPVInfo::add_potential_cipv_id(::google::protobuf::int32 value) {
  potential_cipv_id_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.CIPVInfo.potential_cipv_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CIPVInfo::potential_cipv_id() const {
  // @@protoc_insertion_point(field_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CIPVInfo::mutable_potential_cipv_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return &potential_cipv_id_;
}

// -------------------------------------------------------------------

// PerceptionObstacles

// repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
inline int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
inline void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
inline const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .apollo.common.Header header = 2;
inline bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.header)
  return header_;
}
inline ::apollo::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PerceptionObstacles::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
inline bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::apollo::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.error_code)
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
inline void PerceptionObstacles::set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacles.error_code)
}

// optional .apollo.perception.LaneMarkers lane_marker = 4;
inline bool PerceptionObstacles::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerceptionObstacles::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerceptionObstacles::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerceptionObstacles::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
  clear_has_lane_marker();
}
inline const ::apollo::perception::LaneMarkers& PerceptionObstacles::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_ : *default_instance_->lane_marker_;
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::apollo::perception::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.lane_marker)
  return lane_marker_;
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.lane_marker)
  clear_has_lane_marker();
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
inline void PerceptionObstacles::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.lane_marker)
}

// optional .apollo.perception.CIPVInfo cipv_info = 5;
inline bool PerceptionObstacles::has_cipv_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerceptionObstacles::set_has_cipv_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerceptionObstacles::clear_has_cipv_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerceptionObstacles::clear_cipv_info() {
  if (cipv_info_ != NULL) cipv_info_->::apollo::perception::CIPVInfo::Clear();
  clear_has_cipv_info();
}
inline const ::apollo::perception::CIPVInfo& PerceptionObstacles::cipv_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.cipv_info)
  return cipv_info_ != NULL ? *cipv_info_ : *default_instance_->cipv_info_;
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::mutable_cipv_info() {
  set_has_cipv_info();
  if (cipv_info_ == NULL) {
    cipv_info_ = new ::apollo::perception::CIPVInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.cipv_info)
  return cipv_info_;
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::release_cipv_info() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.cipv_info)
  clear_has_cipv_info();
  ::apollo::perception::CIPVInfo* temp = cipv_info_;
  cipv_info_ = NULL;
  return temp;
}
inline void PerceptionObstacles::set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info) {
  delete cipv_info_;
  cipv_info_ = cipv_info;
  if (cipv_info) {
    set_has_cipv_info();
  } else {
    clear_has_cipv_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.cipv_info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_Type>() {
  return ::apollo::perception::PerceptionObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_ConfidenceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_ConfidenceType>() {
  return ::apollo::perception::PerceptionObstacle_ConfidenceType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_SubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_SubType>() {
  return ::apollo::perception::PerceptionObstacle_SubType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto__INCLUDED
