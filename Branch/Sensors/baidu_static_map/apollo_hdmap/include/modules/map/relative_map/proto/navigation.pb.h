// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigation.proto

#ifndef PROTOBUF_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto__INCLUDED
#define PROTOBUF_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/localization/proto/localization.pb.h"
#include "modules/map/proto/map.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace relative_map {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
void protobuf_AssignDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
void protobuf_ShutdownFile_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();

class MapMsg;
class NavigationInfo;
class NavigationPath;

// ===================================================================

class NavigationPath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.NavigationPath) */ {
 public:
  NavigationPath();
  virtual ~NavigationPath();

  NavigationPath(const NavigationPath& from);

  inline NavigationPath& operator=(const NavigationPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationPath& default_instance();

  void Swap(NavigationPath* other);

  // implements Message ----------------------------------------------

  inline NavigationPath* New() const { return New(NULL); }

  NavigationPath* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavigationPath& from);
  void MergeFrom(const NavigationPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NavigationPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Path path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::apollo::common::Path& path() const;
  ::apollo::common::Path* mutable_path();
  ::apollo::common::Path* release_path();
  void set_allocated_path(::apollo::common::Path* path);

  // optional uint32 path_priority = 2;
  bool has_path_priority() const;
  void clear_path_priority();
  static const int kPathPriorityFieldNumber = 2;
  ::google::protobuf::uint32 path_priority() const;
  void set_path_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.relative_map.NavigationPath)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_path_priority();
  inline void clear_has_path_priority();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Path* path_;
  ::google::protobuf::uint32 path_priority_;
  friend void  protobuf_AddDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
  friend void protobuf_AssignDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
  friend void protobuf_ShutdownFile_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();

  void InitAsDefaultInstance();
  static NavigationPath* default_instance_;
};
// -------------------------------------------------------------------

class NavigationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.NavigationInfo) */ {
 public:
  NavigationInfo();
  virtual ~NavigationInfo();

  NavigationInfo(const NavigationInfo& from);

  inline NavigationInfo& operator=(const NavigationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationInfo& default_instance();

  void Swap(NavigationInfo* other);

  // implements Message ----------------------------------------------

  inline NavigationInfo* New() const { return New(NULL); }

  NavigationInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavigationInfo& from);
  void MergeFrom(const NavigationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NavigationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  int navigation_path_size() const;
  void clear_navigation_path();
  static const int kNavigationPathFieldNumber = 2;
  const ::apollo::relative_map::NavigationPath& navigation_path(int index) const;
  ::apollo::relative_map::NavigationPath* mutable_navigation_path(int index);
  ::apollo::relative_map::NavigationPath* add_navigation_path();
  ::google::protobuf::RepeatedPtrField< ::apollo::relative_map::NavigationPath >*
      mutable_navigation_path();
  const ::google::protobuf::RepeatedPtrField< ::apollo::relative_map::NavigationPath >&
      navigation_path() const;

  // @@protoc_insertion_point(class_scope:apollo.relative_map.NavigationInfo)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::apollo::relative_map::NavigationPath > navigation_path_;
  friend void  protobuf_AddDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
  friend void protobuf_AssignDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
  friend void protobuf_ShutdownFile_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();

  void InitAsDefaultInstance();
  static NavigationInfo* default_instance_;
};
// -------------------------------------------------------------------

class MapMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.MapMsg) */ {
 public:
  MapMsg();
  virtual ~MapMsg();

  MapMsg(const MapMsg& from);

  inline MapMsg& operator=(const MapMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapMsg& default_instance();

  void Swap(MapMsg* other);

  // implements Message ----------------------------------------------

  inline MapMsg* New() const { return New(NULL); }

  MapMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapMsg& from);
  void MergeFrom(const MapMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* mutable_header();
  ::apollo::common::Header* release_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.hdmap.Map hdmap = 2;
  bool has_hdmap() const;
  void clear_hdmap();
  static const int kHdmapFieldNumber = 2;
  const ::apollo::hdmap::Map& hdmap() const;
  ::apollo::hdmap::Map* mutable_hdmap();
  ::apollo::hdmap::Map* release_hdmap();
  void set_allocated_hdmap(::apollo::hdmap::Map* hdmap);

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  int navigation_path_size() const;
  void clear_navigation_path();
  static const int kNavigationPathFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >&
      navigation_path() const;
  ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >*
      mutable_navigation_path();

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  bool has_lane_marker() const;
  void clear_lane_marker();
  static const int kLaneMarkerFieldNumber = 4;
  const ::apollo::perception::LaneMarkers& lane_marker() const;
  ::apollo::perception::LaneMarkers* mutable_lane_marker();
  ::apollo::perception::LaneMarkers* release_lane_marker();
  void set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker);

  // optional .apollo.localization.LocalizationEstimate localization = 5;
  bool has_localization() const;
  void clear_localization();
  static const int kLocalizationFieldNumber = 5;
  const ::apollo::localization::LocalizationEstimate& localization() const;
  ::apollo::localization::LocalizationEstimate* mutable_localization();
  ::apollo::localization::LocalizationEstimate* release_localization();
  void set_allocated_localization(::apollo::localization::LocalizationEstimate* localization);

  // @@protoc_insertion_point(class_scope:apollo.relative_map.MapMsg)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_hdmap();
  inline void clear_has_hdmap();
  inline void set_has_lane_marker();
  inline void clear_has_lane_marker();
  inline void set_has_localization();
  inline void clear_has_localization();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::hdmap::Map* hdmap_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::apollo::relative_map::NavigationPath,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      MapMsg_NavigationPathEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::apollo::relative_map::NavigationPath,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > navigation_path_;
  ::apollo::perception::LaneMarkers* lane_marker_;
  ::apollo::localization::LocalizationEstimate* localization_;
  friend void  protobuf_AddDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
  friend void protobuf_AssignDesc_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();
  friend void protobuf_ShutdownFile_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto();

  void InitAsDefaultInstance();
  static MapMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationPath

// optional .apollo.common.Path path = 1;
inline bool NavigationPath::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationPath::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationPath::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationPath::clear_path() {
  if (path_ != NULL) path_->::apollo::common::Path::Clear();
  clear_has_path();
}
inline const ::apollo::common::Path& NavigationPath::path() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationPath.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::apollo::common::Path* NavigationPath::mutable_path() {
  set_has_path();
  if (path_ == NULL) {
    path_ = new ::apollo::common::Path;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigationPath.path)
  return path_;
}
inline ::apollo::common::Path* NavigationPath::release_path() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.NavigationPath.path)
  clear_has_path();
  ::apollo::common::Path* temp = path_;
  path_ = NULL;
  return temp;
}
inline void NavigationPath::set_allocated_path(::apollo::common::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    set_has_path();
  } else {
    clear_has_path();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.NavigationPath.path)
}

// optional uint32 path_priority = 2;
inline bool NavigationPath::has_path_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigationPath::set_has_path_priority() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigationPath::clear_has_path_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavigationPath::clear_path_priority() {
  path_priority_ = 0u;
  clear_has_path_priority();
}
inline ::google::protobuf::uint32 NavigationPath::path_priority() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationPath.path_priority)
  return path_priority_;
}
inline void NavigationPath::set_path_priority(::google::protobuf::uint32 value) {
  set_has_path_priority();
  path_priority_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationPath.path_priority)
}

// -------------------------------------------------------------------

// NavigationInfo

// optional .apollo.common.Header header = 1;
inline bool NavigationInfo::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationInfo::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationInfo::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationInfo::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& NavigationInfo::header() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* NavigationInfo::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigationInfo.header)
  return header_;
}
inline ::apollo::common::Header* NavigationInfo::release_header() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.NavigationInfo.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void NavigationInfo::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.NavigationInfo.header)
}

// repeated .apollo.relative_map.NavigationPath navigation_path = 2;
inline int NavigationInfo::navigation_path_size() const {
  return navigation_path_.size();
}
inline void NavigationInfo::clear_navigation_path() {
  navigation_path_.Clear();
}
inline const ::apollo::relative_map::NavigationPath& NavigationInfo::navigation_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Get(index);
}
inline ::apollo::relative_map::NavigationPath* NavigationInfo::mutable_navigation_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Mutable(index);
}
inline ::apollo::relative_map::NavigationPath* NavigationInfo::add_navigation_path() {
  // @@protoc_insertion_point(field_add:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::relative_map::NavigationPath >*
NavigationInfo::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.relative_map.NavigationInfo.navigation_path)
  return &navigation_path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::relative_map::NavigationPath >&
NavigationInfo::navigation_path() const {
  // @@protoc_insertion_point(field_list:apollo.relative_map.NavigationInfo.navigation_path)
  return navigation_path_;
}

// -------------------------------------------------------------------

// MapMsg

// optional .apollo.common.Header header = 1;
inline bool MapMsg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapMsg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapMsg::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& MapMsg::header() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* MapMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::apollo::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.header)
  return header_;
}
inline ::apollo::common::Header* MapMsg::release_header() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void MapMsg::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.header)
}

// optional .apollo.hdmap.Map hdmap = 2;
inline bool MapMsg::has_hdmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapMsg::set_has_hdmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapMsg::clear_has_hdmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapMsg::clear_hdmap() {
  if (hdmap_ != NULL) hdmap_->::apollo::hdmap::Map::Clear();
  clear_has_hdmap();
}
inline const ::apollo::hdmap::Map& MapMsg::hdmap() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.hdmap)
  return hdmap_ != NULL ? *hdmap_ : *default_instance_->hdmap_;
}
inline ::apollo::hdmap::Map* MapMsg::mutable_hdmap() {
  set_has_hdmap();
  if (hdmap_ == NULL) {
    hdmap_ = new ::apollo::hdmap::Map;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.hdmap)
  return hdmap_;
}
inline ::apollo::hdmap::Map* MapMsg::release_hdmap() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.hdmap)
  clear_has_hdmap();
  ::apollo::hdmap::Map* temp = hdmap_;
  hdmap_ = NULL;
  return temp;
}
inline void MapMsg::set_allocated_hdmap(::apollo::hdmap::Map* hdmap) {
  delete hdmap_;
  hdmap_ = hdmap;
  if (hdmap) {
    set_has_hdmap();
  } else {
    clear_has_hdmap();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.hdmap)
}

// map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
inline int MapMsg::navigation_path_size() const {
  return navigation_path_.size();
}
inline void MapMsg::clear_navigation_path() {
  navigation_path_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >&
MapMsg::navigation_path() const {
  // @@protoc_insertion_point(field_map:apollo.relative_map.MapMsg.navigation_path)
  return navigation_path_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >*
MapMsg::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_map:apollo.relative_map.MapMsg.navigation_path)
  return navigation_path_.MutableMap();
}

// optional .apollo.perception.LaneMarkers lane_marker = 4;
inline bool MapMsg::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapMsg::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapMsg::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapMsg::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::apollo::perception::LaneMarkers::Clear();
  clear_has_lane_marker();
}
inline const ::apollo::perception::LaneMarkers& MapMsg::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_ : *default_instance_->lane_marker_;
}
inline ::apollo::perception::LaneMarkers* MapMsg::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::apollo::perception::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.lane_marker)
  return lane_marker_;
}
inline ::apollo::perception::LaneMarkers* MapMsg::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.lane_marker)
  clear_has_lane_marker();
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
inline void MapMsg::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.lane_marker)
}

// optional .apollo.localization.LocalizationEstimate localization = 5;
inline bool MapMsg::has_localization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapMsg::set_has_localization() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapMsg::clear_has_localization() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapMsg::clear_localization() {
  if (localization_ != NULL) localization_->::apollo::localization::LocalizationEstimate::Clear();
  clear_has_localization();
}
inline const ::apollo::localization::LocalizationEstimate& MapMsg::localization() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapMsg.localization)
  return localization_ != NULL ? *localization_ : *default_instance_->localization_;
}
inline ::apollo::localization::LocalizationEstimate* MapMsg::mutable_localization() {
  set_has_localization();
  if (localization_ == NULL) {
    localization_ = new ::apollo::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.MapMsg.localization)
  return localization_;
}
inline ::apollo::localization::LocalizationEstimate* MapMsg::release_localization() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.MapMsg.localization)
  clear_has_localization();
  ::apollo::localization::LocalizationEstimate* temp = localization_;
  localization_ = NULL;
  return temp;
}
inline void MapMsg::set_allocated_localization(::apollo::localization::LocalizationEstimate* localization) {
  delete localization_;
  localization_ = localization;
  if (localization) {
    set_has_localization();
  } else {
    clear_has_localization();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.MapMsg.localization)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto__INCLUDED
