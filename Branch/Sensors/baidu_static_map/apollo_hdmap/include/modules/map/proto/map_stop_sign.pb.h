// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_stop_sign.proto

#ifndef PROTOBUF_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto__INCLUDED
#define PROTOBUF_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_id.pb.h"
#include "modules/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace hdmap {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto();
void protobuf_AssignDesc_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto();
void protobuf_ShutdownFile_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto();

class StopSign;

enum StopSign_StopType {
  StopSign_StopType_UNKNOWN = 0,
  StopSign_StopType_ONE_WAY = 1,
  StopSign_StopType_TWO_WAY = 2,
  StopSign_StopType_THREE_WAY = 3,
  StopSign_StopType_FOUR_WAY = 4,
  StopSign_StopType_ALL_WAY = 5
};
bool StopSign_StopType_IsValid(int value);
const StopSign_StopType StopSign_StopType_StopType_MIN = StopSign_StopType_UNKNOWN;
const StopSign_StopType StopSign_StopType_StopType_MAX = StopSign_StopType_ALL_WAY;
const int StopSign_StopType_StopType_ARRAYSIZE = StopSign_StopType_StopType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopSign_StopType_descriptor();
inline const ::std::string& StopSign_StopType_Name(StopSign_StopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopSign_StopType_descriptor(), value);
}
inline bool StopSign_StopType_Parse(
    const ::std::string& name, StopSign_StopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopSign_StopType>(
    StopSign_StopType_descriptor(), name, value);
}
// ===================================================================

class StopSign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.StopSign) */ {
 public:
  StopSign();
  virtual ~StopSign();

  StopSign(const StopSign& from);

  inline StopSign& operator=(const StopSign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopSign& default_instance();

  void Swap(StopSign* other);

  // implements Message ----------------------------------------------

  inline StopSign* New() const { return New(NULL); }

  StopSign* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopSign& from);
  void MergeFrom(const StopSign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StopSign_StopType StopType;
  static const StopType UNKNOWN =
    StopSign_StopType_UNKNOWN;
  static const StopType ONE_WAY =
    StopSign_StopType_ONE_WAY;
  static const StopType TWO_WAY =
    StopSign_StopType_TWO_WAY;
  static const StopType THREE_WAY =
    StopSign_StopType_THREE_WAY;
  static const StopType FOUR_WAY =
    StopSign_StopType_FOUR_WAY;
  static const StopType ALL_WAY =
    StopSign_StopType_ALL_WAY;
  static inline bool StopType_IsValid(int value) {
    return StopSign_StopType_IsValid(value);
  }
  static const StopType StopType_MIN =
    StopSign_StopType_StopType_MIN;
  static const StopType StopType_MAX =
    StopSign_StopType_StopType_MAX;
  static const int StopType_ARRAYSIZE =
    StopSign_StopType_StopType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StopType_descriptor() {
    return StopSign_StopType_descriptor();
  }
  static inline const ::std::string& StopType_Name(StopType value) {
    return StopSign_StopType_Name(value);
  }
  static inline bool StopType_Parse(const ::std::string& name,
      StopType* value) {
    return StopSign_StopType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::apollo::hdmap::Id& id() const;
  ::apollo::hdmap::Id* mutable_id();
  ::apollo::hdmap::Id* release_id();
  void set_allocated_id(::apollo::hdmap::Id* id);

  // repeated .apollo.hdmap.Curve stop_line = 2;
  int stop_line_size() const;
  void clear_stop_line();
  static const int kStopLineFieldNumber = 2;
  const ::apollo::hdmap::Curve& stop_line(int index) const;
  ::apollo::hdmap::Curve* mutable_stop_line(int index);
  ::apollo::hdmap::Curve* add_stop_line();
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Curve >*
      mutable_stop_line();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Curve >&
      stop_line() const;

  // repeated .apollo.hdmap.Id overlap_id = 3;
  int overlap_id_size() const;
  void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 3;
  const ::apollo::hdmap::Id& overlap_id(int index) const;
  ::apollo::hdmap::Id* mutable_overlap_id(int index);
  ::apollo::hdmap::Id* add_overlap_id();
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_overlap_id();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
      overlap_id() const;

  // optional .apollo.hdmap.StopSign.StopType type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::apollo::hdmap::StopSign_StopType type() const;
  void set_type(::apollo::hdmap::StopSign_StopType value);

  // @@protoc_insertion_point(class_scope:apollo.hdmap.StopSign)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::hdmap::Id* id_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Curve > stop_line_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id > overlap_id_;
  int type_;
  friend void  protobuf_AddDesc_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto();
  friend void protobuf_AssignDesc_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto();
  friend void protobuf_ShutdownFile_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto();

  void InitAsDefaultInstance();
  static StopSign* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StopSign

// optional .apollo.hdmap.Id id = 1;
inline bool StopSign::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopSign::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopSign::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopSign::clear_id() {
  if (id_ != NULL) id_->::apollo::hdmap::Id::Clear();
  clear_has_id();
}
inline const ::apollo::hdmap::Id& StopSign::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.StopSign.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::apollo::hdmap::Id* StopSign::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::apollo::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.StopSign.id)
  return id_;
}
inline ::apollo::hdmap::Id* StopSign::release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.StopSign.id)
  clear_has_id();
  ::apollo::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void StopSign::set_allocated_id(::apollo::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.StopSign.id)
}

// repeated .apollo.hdmap.Curve stop_line = 2;
inline int StopSign::stop_line_size() const {
  return stop_line_.size();
}
inline void StopSign::clear_stop_line() {
  stop_line_.Clear();
}
inline const ::apollo::hdmap::Curve& StopSign::stop_line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.StopSign.stop_line)
  return stop_line_.Get(index);
}
inline ::apollo::hdmap::Curve* StopSign::mutable_stop_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.StopSign.stop_line)
  return stop_line_.Mutable(index);
}
inline ::apollo::hdmap::Curve* StopSign::add_stop_line() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.StopSign.stop_line)
  return stop_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Curve >*
StopSign::mutable_stop_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.StopSign.stop_line)
  return &stop_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Curve >&
StopSign::stop_line() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.StopSign.stop_line)
  return stop_line_;
}

// repeated .apollo.hdmap.Id overlap_id = 3;
inline int StopSign::overlap_id_size() const {
  return overlap_id_.size();
}
inline void StopSign::clear_overlap_id() {
  overlap_id_.Clear();
}
inline const ::apollo::hdmap::Id& StopSign::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.StopSign.overlap_id)
  return overlap_id_.Get(index);
}
inline ::apollo::hdmap::Id* StopSign::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.StopSign.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::apollo::hdmap::Id* StopSign::add_overlap_id() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.StopSign.overlap_id)
  return overlap_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >*
StopSign::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.StopSign.overlap_id)
  return &overlap_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Id >&
StopSign::overlap_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.StopSign.overlap_id)
  return overlap_id_;
}

// optional .apollo.hdmap.StopSign.StopType type = 4;
inline bool StopSign::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopSign::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopSign::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopSign::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::hdmap::StopSign_StopType StopSign::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.StopSign.type)
  return static_cast< ::apollo::hdmap::StopSign_StopType >(type_);
}
inline void StopSign::set_type(::apollo::hdmap::StopSign_StopType value) {
  assert(::apollo::hdmap::StopSign_StopType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.StopSign.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::hdmap::StopSign_StopType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::StopSign_StopType>() {
  return ::apollo::hdmap::StopSign_StopType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto__INCLUDED
