// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/pose.proto

#ifndef PROTOBUF_modules_2flocalization_2fproto_2fpose_2eproto__INCLUDED
#define PROTOBUF_modules_2flocalization_2fproto_2fpose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2flocalization_2fproto_2fpose_2eproto();
void protobuf_AssignDesc_modules_2flocalization_2fproto_2fpose_2eproto();
void protobuf_ShutdownFile_modules_2flocalization_2fproto_2fpose_2eproto();

class Pose;

// ===================================================================

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  void Swap(Pose* other);

  // implements Message ----------------------------------------------

  inline Pose* New() const { return New(NULL); }

  Pose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PointENU position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::apollo::common::PointENU& position() const;
  ::apollo::common::PointENU* mutable_position();
  ::apollo::common::PointENU* release_position();
  void set_allocated_position(::apollo::common::PointENU* position);

  // optional .apollo.common.Quaternion orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::apollo::common::Quaternion& orientation() const;
  ::apollo::common::Quaternion* mutable_orientation();
  ::apollo::common::Quaternion* release_orientation();
  void set_allocated_orientation(::apollo::common::Quaternion* orientation);

  // optional .apollo.common.Point3D linear_velocity = 3;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 3;
  const ::apollo::common::Point3D& linear_velocity() const;
  ::apollo::common::Point3D* mutable_linear_velocity();
  ::apollo::common::Point3D* release_linear_velocity();
  void set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity);

  // optional .apollo.common.Point3D linear_acceleration = 4;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 4;
  const ::apollo::common::Point3D& linear_acceleration() const;
  ::apollo::common::Point3D* mutable_linear_acceleration();
  ::apollo::common::Point3D* release_linear_acceleration();
  void set_allocated_linear_acceleration(::apollo::common::Point3D* linear_acceleration);

  // optional .apollo.common.Point3D angular_velocity = 5;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 5;
  const ::apollo::common::Point3D& angular_velocity() const;
  ::apollo::common::Point3D* mutable_angular_velocity();
  ::apollo::common::Point3D* release_angular_velocity();
  void set_allocated_angular_velocity(::apollo::common::Point3D* angular_velocity);

  // optional double heading = 6;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 6;
  double heading() const;
  void set_heading(double value);

  // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
  bool has_linear_acceleration_vrf() const;
  void clear_linear_acceleration_vrf();
  static const int kLinearAccelerationVrfFieldNumber = 7;
  const ::apollo::common::Point3D& linear_acceleration_vrf() const;
  ::apollo::common::Point3D* mutable_linear_acceleration_vrf();
  ::apollo::common::Point3D* release_linear_acceleration_vrf();
  void set_allocated_linear_acceleration_vrf(::apollo::common::Point3D* linear_acceleration_vrf);

  // optional .apollo.common.Point3D angular_velocity_vrf = 8;
  bool has_angular_velocity_vrf() const;
  void clear_angular_velocity_vrf();
  static const int kAngularVelocityVrfFieldNumber = 8;
  const ::apollo::common::Point3D& angular_velocity_vrf() const;
  ::apollo::common::Point3D* mutable_angular_velocity_vrf();
  ::apollo::common::Point3D* release_angular_velocity_vrf();
  void set_allocated_angular_velocity_vrf(::apollo::common::Point3D* angular_velocity_vrf);

  // optional .apollo.common.Point3D euler_angles = 9;
  bool has_euler_angles() const;
  void clear_euler_angles();
  static const int kEulerAnglesFieldNumber = 9;
  const ::apollo::common::Point3D& euler_angles() const;
  ::apollo::common::Point3D* mutable_euler_angles();
  ::apollo::common::Point3D* release_euler_angles();
  void set_allocated_euler_angles(::apollo::common::Point3D* euler_angles);

  // @@protoc_insertion_point(class_scope:apollo.localization.Pose)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_linear_velocity();
  inline void clear_has_linear_velocity();
  inline void set_has_linear_acceleration();
  inline void clear_has_linear_acceleration();
  inline void set_has_angular_velocity();
  inline void clear_has_angular_velocity();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_linear_acceleration_vrf();
  inline void clear_has_linear_acceleration_vrf();
  inline void set_has_angular_velocity_vrf();
  inline void clear_has_angular_velocity_vrf();
  inline void set_has_euler_angles();
  inline void clear_has_euler_angles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::PointENU* position_;
  ::apollo::common::Quaternion* orientation_;
  ::apollo::common::Point3D* linear_velocity_;
  ::apollo::common::Point3D* linear_acceleration_;
  ::apollo::common::Point3D* angular_velocity_;
  double heading_;
  ::apollo::common::Point3D* linear_acceleration_vrf_;
  ::apollo::common::Point3D* angular_velocity_vrf_;
  ::apollo::common::Point3D* euler_angles_;
  friend void  protobuf_AddDesc_modules_2flocalization_2fproto_2fpose_2eproto();
  friend void protobuf_AssignDesc_modules_2flocalization_2fproto_2fpose_2eproto();
  friend void protobuf_ShutdownFile_modules_2flocalization_2fproto_2fpose_2eproto();

  void InitAsDefaultInstance();
  static Pose* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// optional .apollo.common.PointENU position = 1;
inline bool Pose::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose::clear_position() {
  if (position_ != NULL) position_->::apollo::common::PointENU::Clear();
  clear_has_position();
}
inline const ::apollo::common::PointENU& Pose::position() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::common::PointENU* Pose::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.position)
  return position_;
}
inline ::apollo::common::PointENU* Pose::release_position() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.position)
  clear_has_position();
  ::apollo::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pose::set_allocated_position(::apollo::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.position)
}

// optional .apollo.common.Quaternion orientation = 2;
inline bool Pose::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose::clear_orientation() {
  if (orientation_ != NULL) orientation_->::apollo::common::Quaternion::Clear();
  clear_has_orientation();
}
inline const ::apollo::common::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::apollo::common::Quaternion* Pose::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    orientation_ = new ::apollo::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.orientation)
  return orientation_;
}
inline ::apollo::common::Quaternion* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.orientation)
  clear_has_orientation();
  ::apollo::common::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void Pose::set_allocated_orientation(::apollo::common::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.orientation)
}

// optional .apollo.common.Point3D linear_velocity = 3;
inline bool Pose::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pose::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pose::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pose::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::apollo::common::Point3D::Clear();
  clear_has_linear_velocity();
}
inline const ::apollo::common::Point3D& Pose::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
inline ::apollo::common::Point3D* Pose::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.linear_velocity)
  return linear_velocity_;
}
inline ::apollo::common::Point3D* Pose::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.linear_velocity)
  clear_has_linear_velocity();
  ::apollo::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline void Pose::set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.linear_velocity)
}

// optional .apollo.common.Point3D linear_acceleration = 4;
inline bool Pose::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pose::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pose::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pose::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::apollo::common::Point3D::Clear();
  clear_has_linear_acceleration();
}
inline const ::apollo::common::Point3D& Pose::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
inline ::apollo::common::Point3D* Pose::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.linear_acceleration)
  return linear_acceleration_;
}
inline ::apollo::common::Point3D* Pose::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.linear_acceleration)
  clear_has_linear_acceleration();
  ::apollo::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline void Pose::set_allocated_linear_acceleration(::apollo::common::Point3D* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.linear_acceleration)
}

// optional .apollo.common.Point3D angular_velocity = 5;
inline bool Pose::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pose::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pose::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pose::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::apollo::common::Point3D::Clear();
  clear_has_angular_velocity();
}
inline const ::apollo::common::Point3D& Pose::angular_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
inline ::apollo::common::Point3D* Pose::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.angular_velocity)
  return angular_velocity_;
}
inline ::apollo::common::Point3D* Pose::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.angular_velocity)
  clear_has_angular_velocity();
  ::apollo::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline void Pose::set_allocated_angular_velocity(::apollo::common::Point3D* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.angular_velocity)
}

// optional double heading = 6;
inline bool Pose::has_heading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pose::set_has_heading() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pose::clear_has_heading() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pose::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double Pose::heading() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.heading)
  return heading_;
}
inline void Pose::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.Pose.heading)
}

// optional .apollo.common.Point3D linear_acceleration_vrf = 7;
inline bool Pose::has_linear_acceleration_vrf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pose::set_has_linear_acceleration_vrf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pose::clear_has_linear_acceleration_vrf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pose::clear_linear_acceleration_vrf() {
  if (linear_acceleration_vrf_ != NULL) linear_acceleration_vrf_->::apollo::common::Point3D::Clear();
  clear_has_linear_acceleration_vrf();
}
inline const ::apollo::common::Point3D& Pose::linear_acceleration_vrf() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.linear_acceleration_vrf)
  return linear_acceleration_vrf_ != NULL ? *linear_acceleration_vrf_ : *default_instance_->linear_acceleration_vrf_;
}
inline ::apollo::common::Point3D* Pose::mutable_linear_acceleration_vrf() {
  set_has_linear_acceleration_vrf();
  if (linear_acceleration_vrf_ == NULL) {
    linear_acceleration_vrf_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.linear_acceleration_vrf)
  return linear_acceleration_vrf_;
}
inline ::apollo::common::Point3D* Pose::release_linear_acceleration_vrf() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.linear_acceleration_vrf)
  clear_has_linear_acceleration_vrf();
  ::apollo::common::Point3D* temp = linear_acceleration_vrf_;
  linear_acceleration_vrf_ = NULL;
  return temp;
}
inline void Pose::set_allocated_linear_acceleration_vrf(::apollo::common::Point3D* linear_acceleration_vrf) {
  delete linear_acceleration_vrf_;
  linear_acceleration_vrf_ = linear_acceleration_vrf;
  if (linear_acceleration_vrf) {
    set_has_linear_acceleration_vrf();
  } else {
    clear_has_linear_acceleration_vrf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.linear_acceleration_vrf)
}

// optional .apollo.common.Point3D angular_velocity_vrf = 8;
inline bool Pose::has_angular_velocity_vrf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pose::set_has_angular_velocity_vrf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Pose::clear_has_angular_velocity_vrf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Pose::clear_angular_velocity_vrf() {
  if (angular_velocity_vrf_ != NULL) angular_velocity_vrf_->::apollo::common::Point3D::Clear();
  clear_has_angular_velocity_vrf();
}
inline const ::apollo::common::Point3D& Pose::angular_velocity_vrf() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.angular_velocity_vrf)
  return angular_velocity_vrf_ != NULL ? *angular_velocity_vrf_ : *default_instance_->angular_velocity_vrf_;
}
inline ::apollo::common::Point3D* Pose::mutable_angular_velocity_vrf() {
  set_has_angular_velocity_vrf();
  if (angular_velocity_vrf_ == NULL) {
    angular_velocity_vrf_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.angular_velocity_vrf)
  return angular_velocity_vrf_;
}
inline ::apollo::common::Point3D* Pose::release_angular_velocity_vrf() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.angular_velocity_vrf)
  clear_has_angular_velocity_vrf();
  ::apollo::common::Point3D* temp = angular_velocity_vrf_;
  angular_velocity_vrf_ = NULL;
  return temp;
}
inline void Pose::set_allocated_angular_velocity_vrf(::apollo::common::Point3D* angular_velocity_vrf) {
  delete angular_velocity_vrf_;
  angular_velocity_vrf_ = angular_velocity_vrf;
  if (angular_velocity_vrf) {
    set_has_angular_velocity_vrf();
  } else {
    clear_has_angular_velocity_vrf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.angular_velocity_vrf)
}

// optional .apollo.common.Point3D euler_angles = 9;
inline bool Pose::has_euler_angles() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pose::set_has_euler_angles() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Pose::clear_has_euler_angles() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Pose::clear_euler_angles() {
  if (euler_angles_ != NULL) euler_angles_->::apollo::common::Point3D::Clear();
  clear_has_euler_angles();
}
inline const ::apollo::common::Point3D& Pose::euler_angles() const {
  // @@protoc_insertion_point(field_get:apollo.localization.Pose.euler_angles)
  return euler_angles_ != NULL ? *euler_angles_ : *default_instance_->euler_angles_;
}
inline ::apollo::common::Point3D* Pose::mutable_euler_angles() {
  set_has_euler_angles();
  if (euler_angles_ == NULL) {
    euler_angles_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Pose.euler_angles)
  return euler_angles_;
}
inline ::apollo::common::Point3D* Pose::release_euler_angles() {
  // @@protoc_insertion_point(field_release:apollo.localization.Pose.euler_angles)
  clear_has_euler_angles();
  ::apollo::common::Point3D* temp = euler_angles_;
  euler_angles_ = NULL;
  return temp;
}
inline void Pose::set_allocated_euler_angles(::apollo::common::Point3D* euler_angles) {
  delete euler_angles_;
  euler_angles_ = euler_angles;
  if (euler_angles) {
    set_has_euler_angles();
  } else {
    clear_has_euler_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Pose.euler_angles)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2flocalization_2fproto_2fpose_2eproto__INCLUDED
