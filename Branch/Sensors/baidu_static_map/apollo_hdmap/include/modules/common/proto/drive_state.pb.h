// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/drive_state.proto

#ifndef PROTOBUF_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto__INCLUDED
#define PROTOBUF_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto();
void protobuf_AssignDesc_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto();
void protobuf_ShutdownFile_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto();

class EngageAdvice;

enum EngageAdvice_Advice {
  EngageAdvice_Advice_UNKNOWN = 0,
  EngageAdvice_Advice_DISALLOW_ENGAGE = 1,
  EngageAdvice_Advice_READY_TO_ENGAGE = 2,
  EngageAdvice_Advice_KEEP_ENGAGED = 3,
  EngageAdvice_Advice_PREPARE_DISENGAGE = 4
};
bool EngageAdvice_Advice_IsValid(int value);
const EngageAdvice_Advice EngageAdvice_Advice_Advice_MIN = EngageAdvice_Advice_UNKNOWN;
const EngageAdvice_Advice EngageAdvice_Advice_Advice_MAX = EngageAdvice_Advice_PREPARE_DISENGAGE;
const int EngageAdvice_Advice_Advice_ARRAYSIZE = EngageAdvice_Advice_Advice_MAX + 1;

const ::google::protobuf::EnumDescriptor* EngageAdvice_Advice_descriptor();
inline const ::std::string& EngageAdvice_Advice_Name(EngageAdvice_Advice value) {
  return ::google::protobuf::internal::NameOfEnum(
    EngageAdvice_Advice_descriptor(), value);
}
inline bool EngageAdvice_Advice_Parse(
    const ::std::string& name, EngageAdvice_Advice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EngageAdvice_Advice>(
    EngageAdvice_Advice_descriptor(), name, value);
}
// ===================================================================

class EngageAdvice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.EngageAdvice) */ {
 public:
  EngageAdvice();
  virtual ~EngageAdvice();

  EngageAdvice(const EngageAdvice& from);

  inline EngageAdvice& operator=(const EngageAdvice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EngageAdvice& default_instance();

  void Swap(EngageAdvice* other);

  // implements Message ----------------------------------------------

  inline EngageAdvice* New() const { return New(NULL); }

  EngageAdvice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EngageAdvice& from);
  void MergeFrom(const EngageAdvice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EngageAdvice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EngageAdvice_Advice Advice;
  static const Advice UNKNOWN =
    EngageAdvice_Advice_UNKNOWN;
  static const Advice DISALLOW_ENGAGE =
    EngageAdvice_Advice_DISALLOW_ENGAGE;
  static const Advice READY_TO_ENGAGE =
    EngageAdvice_Advice_READY_TO_ENGAGE;
  static const Advice KEEP_ENGAGED =
    EngageAdvice_Advice_KEEP_ENGAGED;
  static const Advice PREPARE_DISENGAGE =
    EngageAdvice_Advice_PREPARE_DISENGAGE;
  static inline bool Advice_IsValid(int value) {
    return EngageAdvice_Advice_IsValid(value);
  }
  static const Advice Advice_MIN =
    EngageAdvice_Advice_Advice_MIN;
  static const Advice Advice_MAX =
    EngageAdvice_Advice_Advice_MAX;
  static const int Advice_ARRAYSIZE =
    EngageAdvice_Advice_Advice_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Advice_descriptor() {
    return EngageAdvice_Advice_descriptor();
  }
  static inline const ::std::string& Advice_Name(Advice value) {
    return EngageAdvice_Advice_Name(value);
  }
  static inline bool Advice_Parse(const ::std::string& name,
      Advice* value) {
    return EngageAdvice_Advice_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
  bool has_advice() const;
  void clear_advice();
  static const int kAdviceFieldNumber = 1;
  ::apollo::common::EngageAdvice_Advice advice() const;
  void set_advice(::apollo::common::EngageAdvice_Advice value);

  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:apollo.common.EngageAdvice)
 private:
  inline void set_has_advice();
  inline void clear_has_advice();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int advice_;
  friend void  protobuf_AddDesc_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto();
  friend void protobuf_AssignDesc_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto();
  friend void protobuf_ShutdownFile_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto();

  void InitAsDefaultInstance();
  static EngageAdvice* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EngageAdvice

// optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
inline bool EngageAdvice::has_advice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EngageAdvice::set_has_advice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EngageAdvice::clear_has_advice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EngageAdvice::clear_advice() {
  advice_ = 1;
  clear_has_advice();
}
inline ::apollo::common::EngageAdvice_Advice EngageAdvice::advice() const {
  // @@protoc_insertion_point(field_get:apollo.common.EngageAdvice.advice)
  return static_cast< ::apollo::common::EngageAdvice_Advice >(advice_);
}
inline void EngageAdvice::set_advice(::apollo::common::EngageAdvice_Advice value) {
  assert(::apollo::common::EngageAdvice_Advice_IsValid(value));
  set_has_advice();
  advice_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.EngageAdvice.advice)
}

// optional string reason = 2;
inline bool EngageAdvice::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EngageAdvice::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EngageAdvice::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EngageAdvice::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& EngageAdvice::reason() const {
  // @@protoc_insertion_point(field_get:apollo.common.EngageAdvice.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngageAdvice::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.EngageAdvice.reason)
}
inline void EngageAdvice::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.EngageAdvice.reason)
}
inline void EngageAdvice::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.EngageAdvice.reason)
}
inline ::std::string* EngageAdvice::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:apollo.common.EngageAdvice.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngageAdvice::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.common.EngageAdvice.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngageAdvice::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.EngageAdvice.reason)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::common::EngageAdvice_Advice> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::EngageAdvice_Advice>() {
  return ::apollo::common::EngageAdvice_Advice_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto__INCLUDED
