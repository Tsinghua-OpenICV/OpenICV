// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/vehicle_signal.proto

#ifndef PROTOBUF_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto__INCLUDED
#define PROTOBUF_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto();
void protobuf_AssignDesc_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto();
void protobuf_ShutdownFile_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto();

class VehicleSignal;

enum VehicleSignal_TurnSignal {
  VehicleSignal_TurnSignal_TURN_NONE = 0,
  VehicleSignal_TurnSignal_TURN_LEFT = 1,
  VehicleSignal_TurnSignal_TURN_RIGHT = 2
};
bool VehicleSignal_TurnSignal_IsValid(int value);
const VehicleSignal_TurnSignal VehicleSignal_TurnSignal_TurnSignal_MIN = VehicleSignal_TurnSignal_TURN_NONE;
const VehicleSignal_TurnSignal VehicleSignal_TurnSignal_TurnSignal_MAX = VehicleSignal_TurnSignal_TURN_RIGHT;
const int VehicleSignal_TurnSignal_TurnSignal_ARRAYSIZE = VehicleSignal_TurnSignal_TurnSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleSignal_TurnSignal_descriptor();
inline const ::std::string& VehicleSignal_TurnSignal_Name(VehicleSignal_TurnSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleSignal_TurnSignal_descriptor(), value);
}
inline bool VehicleSignal_TurnSignal_Parse(
    const ::std::string& name, VehicleSignal_TurnSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleSignal_TurnSignal>(
    VehicleSignal_TurnSignal_descriptor(), name, value);
}
// ===================================================================

class VehicleSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleSignal) */ {
 public:
  VehicleSignal();
  virtual ~VehicleSignal();

  VehicleSignal(const VehicleSignal& from);

  inline VehicleSignal& operator=(const VehicleSignal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleSignal& default_instance();

  void Swap(VehicleSignal* other);

  // implements Message ----------------------------------------------

  inline VehicleSignal* New() const { return New(NULL); }

  VehicleSignal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleSignal& from);
  void MergeFrom(const VehicleSignal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VehicleSignal_TurnSignal TurnSignal;
  static const TurnSignal TURN_NONE =
    VehicleSignal_TurnSignal_TURN_NONE;
  static const TurnSignal TURN_LEFT =
    VehicleSignal_TurnSignal_TURN_LEFT;
  static const TurnSignal TURN_RIGHT =
    VehicleSignal_TurnSignal_TURN_RIGHT;
  static inline bool TurnSignal_IsValid(int value) {
    return VehicleSignal_TurnSignal_IsValid(value);
  }
  static const TurnSignal TurnSignal_MIN =
    VehicleSignal_TurnSignal_TurnSignal_MIN;
  static const TurnSignal TurnSignal_MAX =
    VehicleSignal_TurnSignal_TurnSignal_MAX;
  static const int TurnSignal_ARRAYSIZE =
    VehicleSignal_TurnSignal_TurnSignal_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TurnSignal_descriptor() {
    return VehicleSignal_TurnSignal_descriptor();
  }
  static inline const ::std::string& TurnSignal_Name(TurnSignal value) {
    return VehicleSignal_TurnSignal_Name(value);
  }
  static inline bool TurnSignal_Parse(const ::std::string& name,
      TurnSignal* value) {
    return VehicleSignal_TurnSignal_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.VehicleSignal.TurnSignal turn_signal = 1;
  bool has_turn_signal() const;
  void clear_turn_signal();
  static const int kTurnSignalFieldNumber = 1;
  ::apollo::common::VehicleSignal_TurnSignal turn_signal() const;
  void set_turn_signal(::apollo::common::VehicleSignal_TurnSignal value);

  // optional bool high_beam = 2;
  bool has_high_beam() const;
  void clear_high_beam();
  static const int kHighBeamFieldNumber = 2;
  bool high_beam() const;
  void set_high_beam(bool value);

  // optional bool low_beam = 3;
  bool has_low_beam() const;
  void clear_low_beam();
  static const int kLowBeamFieldNumber = 3;
  bool low_beam() const;
  void set_low_beam(bool value);

  // optional bool horn = 4;
  bool has_horn() const;
  void clear_horn();
  static const int kHornFieldNumber = 4;
  bool horn() const;
  void set_horn(bool value);

  // optional bool emergency_light = 5;
  bool has_emergency_light() const;
  void clear_emergency_light();
  static const int kEmergencyLightFieldNumber = 5;
  bool emergency_light() const;
  void set_emergency_light(bool value);

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleSignal)
 private:
  inline void set_has_turn_signal();
  inline void clear_has_turn_signal();
  inline void set_has_high_beam();
  inline void clear_has_high_beam();
  inline void set_has_low_beam();
  inline void clear_has_low_beam();
  inline void set_has_horn();
  inline void clear_has_horn();
  inline void set_has_emergency_light();
  inline void clear_has_emergency_light();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int turn_signal_;
  bool high_beam_;
  bool low_beam_;
  bool horn_;
  bool emergency_light_;
  friend void  protobuf_AddDesc_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto();
  friend void protobuf_AssignDesc_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto();
  friend void protobuf_ShutdownFile_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto();

  void InitAsDefaultInstance();
  static VehicleSignal* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSignal

// optional .apollo.common.VehicleSignal.TurnSignal turn_signal = 1;
inline bool VehicleSignal::has_turn_signal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleSignal::set_has_turn_signal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleSignal::clear_has_turn_signal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleSignal::clear_turn_signal() {
  turn_signal_ = 0;
  clear_has_turn_signal();
}
inline ::apollo::common::VehicleSignal_TurnSignal VehicleSignal::turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleSignal.turn_signal)
  return static_cast< ::apollo::common::VehicleSignal_TurnSignal >(turn_signal_);
}
inline void VehicleSignal::set_turn_signal(::apollo::common::VehicleSignal_TurnSignal value) {
  assert(::apollo::common::VehicleSignal_TurnSignal_IsValid(value));
  set_has_turn_signal();
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleSignal.turn_signal)
}

// optional bool high_beam = 2;
inline bool VehicleSignal::has_high_beam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleSignal::set_has_high_beam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleSignal::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleSignal::clear_high_beam() {
  high_beam_ = false;
  clear_has_high_beam();
}
inline bool VehicleSignal::high_beam() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleSignal.high_beam)
  return high_beam_;
}
inline void VehicleSignal::set_high_beam(bool value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleSignal.high_beam)
}

// optional bool low_beam = 3;
inline bool VehicleSignal::has_low_beam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleSignal::set_has_low_beam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleSignal::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleSignal::clear_low_beam() {
  low_beam_ = false;
  clear_has_low_beam();
}
inline bool VehicleSignal::low_beam() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleSignal.low_beam)
  return low_beam_;
}
inline void VehicleSignal::set_low_beam(bool value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleSignal.low_beam)
}

// optional bool horn = 4;
inline bool VehicleSignal::has_horn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleSignal::set_has_horn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleSignal::clear_has_horn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleSignal::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
inline bool VehicleSignal::horn() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleSignal.horn)
  return horn_;
}
inline void VehicleSignal::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleSignal.horn)
}

// optional bool emergency_light = 5;
inline bool VehicleSignal::has_emergency_light() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleSignal::set_has_emergency_light() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleSignal::clear_has_emergency_light() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleSignal::clear_emergency_light() {
  emergency_light_ = false;
  clear_has_emergency_light();
}
inline bool VehicleSignal::emergency_light() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleSignal.emergency_light)
  return emergency_light_;
}
inline void VehicleSignal::set_emergency_light(bool value) {
  set_has_emergency_light();
  emergency_light_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleSignal.emergency_light)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::common::VehicleSignal_TurnSignal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::VehicleSignal_TurnSignal>() {
  return ::apollo::common::VehicleSignal_TurnSignal_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto__INCLUDED
