#include "OpenICV/Core/icvFunction.h"
#include "OpenICV/Core/icvFunctionFactory.h"
#include "OpenICV/Core/icvNodeManager.h"
#include "OpenICV/Core/icvSubscriber.h"
#include "OpenICV/Core/icvPublisher.h"
#include "OpenICV/Net/icvUdpReceiverSource.h"
#include "OpenICV/Core/icvConfig.h"
#include "OpenICV/Core/icvTime.h"
//Optional：It depends on what kind of message you’d like to use
#include "OpenICV/structure/icvCvMatData.hxx"

#include "OpenICV/Basis/icvPrimitiveData.hxx"

#include <cstdlib>
#include <string>
#include <sstream>

#include <boost/thread/thread.hpp>

#include <eigen3/Eigen/Dense>
#include <vector>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <unistd.h>
// Packet structure
#include "OpenICV/structure/structureIMU.h"
#include "time.h"
#include "OpenICV/structure/structure_gps.h"
#include "OpenICV/Basis/icvStructureData.hxx"
#include <iostream>
#include <fstream>
#include <arpa/inet.h>

#include "OpenICV/structure/structure_all_objs.h"
#include "OpenICV/structure/structure_fusion_obj.h"

//#include "OpenICV/structure/structureCanP7.h"

//#include "OpenICV/structure/CanFrame.h"
//#include "OpenICV/structure/inputmessage.h"

// Ethernet

typedef unsigned char uint8;
typedef float float32;
typedef double float64;
typedef char int8;
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef short int16;
typedef unsigned int uint32;
typedef int int32;

#define PI 3.1415926

using namespace icv;
using namespace icv::function;

class FusionTracker:public icvFunction
{
    public:

    typedef data::icvStructureData<OBJ_40_EQ> ICVEQ;
    typedef data::icvStructureData<OBJ_32_LRR> ICVLRR;
    typedef data::icvStructureData<OBJ_32_FSDA> ICVFSDA;
    typedef data::icvStructureData<OBJ_32_RSDA> ICVRSDA;
    
    FusionTracker(icv_shared_ptr<const icvMetaData> info) : icvFunction(info)
    {
        
        
        Register_Pub("obj_forward_fusion");
        Register_Pub("obj_backward_fusion"); 

        Register_Sub("obj_eq");
        Register_Sub("obj_lrr");
        Register_Sub("obj_rsda"); 
        Register_Sub("obj_fsda");  

        ICV_LOG_INFO << "Fusion process Started";

    }
        

        // Hungarian()


        // bool FusionMatch(const OBJ_EQ& objeq, 
        //             const OBJ_FUSION obj_fusion_t,
        //             MatrixXd& dis_matrix, 
	    //             vector<vector<int>>& dis_matrix_index)
        // {
            
        //     for (auto i = 0;i<obj_fusion_t.size() ;i++){
        //         data::icvStructureData<OBJ_FUSION> track;
        //         data::icvStructureData<OBJ_EQ> detect;

        //         int rows = obj_fusion_t.size();
        //         int cols = obj_eq_information.size();
        //         vector<vector<bool>> match_state(rows);
    
        //         track = obj_fusion_t[i];
        //         for (auto j = 0;j<objeq.size() ;j++){
                    
        //             detect = objeq[j];
        //             dis_matrix(i, j) = sqrt(pow((track.OBJ_Lat_Distance - detect.OBJ_Lat_Distance),2) + pow(track.OBJ_Long_Distance - detect.OBJ_Long_Distance,2));
        //             if dis_matrix(i, j)<match_thr
        //                 match_state[i][j] = true;
        //             else
        //                 match_state[i][j] = false;
        //         }            
        //     }
        //     Hungarian(match_state,dis_matrix_index);
        // }

       

        // FusionPredict(const OBJ_FUSION obj_fusion_t)
        // {
        //     for (auto i = 0; i < obj_fusion_t.size(); i++) {
        //         obj_fusion_t[i].OBJ_Age += 1
        //         obj_fusion_t[i].time_since_update += 1
        //     }
        // }

        void FusionUpdate_Forward(const OBJ_40_EQ& obj_eq_information,
        const OBJ_32_LRR& obj_lrr_information)
        {
            FUSION_ARRAY obj_fusion_forward_t;
            uint16 track_ID = 1;

            for (uint16 i=0;i<32;i++)
            {
                
                if(abs(obj_lrr_information.objs_LRR[i].lrr_dx)>0.8) 
                {
                    data::icvStructureData<OBJ_FUSION> track;
                    obj_fusion_forward_t.objs_fusion[i].Track_ID = track_ID;
                     
                    obj_fusion_forward_t.objs_fusion[i].Track_Lat_Distance = obj_lrr_information.objs_LRR[i].lrr_dx;
                    obj_fusion_forward_t.objs_fusion[i].Track_Long_Distance = obj_lrr_information.objs_LRR[i].lrr_dy; 


                    obj_fusion_forward_t.objs_fusion[i].Track_Relative_Lat_Velocity = obj_lrr_information.objs_LRR[i].lrr_vx;
                    obj_fusion_forward_t.objs_fusion[i].Track_Relative_Long_Velocity = obj_lrr_information.objs_LRR[i].lrr_vy;
                            
                    obj_fusion_forward_t.objs_fusion[i].Track_Height = 3.0;
                    obj_fusion_forward_t.objs_fusion[i].Track_Length = 3.0;
                    obj_fusion_forward_t.objs_fusion[i].Track_Width = 2.5;
                    
                    obj_fusion_forward_t.objs_fusion[i].Track_Age = 1;
                    obj_fusion_forward_t.objs_fusion[i].Track_time_since_update = 1;

                    track_ID++;


                    ICV_LOG_INFO << "Forward Tracker  OBJ_ID :" <<  obj_fusion_forward_t.objs_fusion[i].Track_ID;
                    ICV_LOG_INFO << "Forward Tracker OBJ_Height :" << obj_fusion_forward_t.objs_fusion[i].Track_Height;
                    ICV_LOG_INFO << "Forward Tracker OBJ_Width :" << obj_fusion_forward_t.objs_fusion[i].Track_Width;
                    ICV_LOG_INFO << "Forward Tracker OBJ_Length :" << obj_fusion_forward_t.objs_fusion[i].Track_Length; 
                    ICV_LOG_INFO << "Forward Tracker OBJ_Long_Distance :" <<  obj_fusion_forward_t.objs_fusion[i].Track_Long_Distance ;
                    ICV_LOG_INFO << "Forward Tracker OBJ_Lat_Distance :" <<  obj_fusion_forward_t.objs_fusion[i].Track_Lat_Distance ; 

                }
                else 
                {
                    continue;
                }
            }
            // #ifdef 0
            // data::icvStructureData<OBJ_EQ> obj_detection;

            // if (obj_fusion_t.size() && sizeof(obj_detection))
            // {
            //     int rows = obj_fusion_t.size();
            //     int cols = obj_eq_information.size();
            //     MatrixXd dis_matrix(rows, cols);
            //     vector<vector<int>> dis_matrix_index(rows);
            //     dis_matrix.fill(0.0);
            //     FusionMatch(obj_fusion_t,detections,dis_matrix,dis_matrix_index);
            //     // Update track set.
            //     for (auto track_idx = 0; track_idx < obj_fusion_t.size(); track_idx++){
            //         /* 匹配失败 */
            //         if(dis_matrix_index[track_idx].size()<=0){
            //             mark_missed(obj_fusion_t,track_idx);
            //         }
            //         else if(dis_matrix_index[track_idx].size()==1){
            //             /* 匹配成功 */
            //             kf_update(obj_fusion_t, obj_eq_information, dis_matrix_index[idx]);
            //         }
            //     }
            //     for (auto sensor_idx = 0; sensor_idx < obj_fusion_t.size(); sensor_idx++){
            //         initiate_track(obj_fusion_t,obj_eq_information,detection_idx);
              
            //     }
            // }
            // #endif
            obj_fusion_forward_information.setvalue(obj_fusion_forward_t);

        }

        void FusionUpdate_Backward(const OBJ_32_RSDA& obj_rsda_information)
        {
            //data::icvStructureData<OBJ_EQ> obj_detection;
            FUSION_ARRAY obj_fusion_backward_t;
            uint16 track_ID = 1;

            for (uint16 i=0;i<32;i++)
            {
                
                if(abs(obj_rsda_information.objs_RSDA[i].rsda_dx)>0.5) 
                {
                    data::icvStructureData<OBJ_FUSION> track;
                    obj_fusion_backward_t.objs_fusion[i].Track_ID = track_ID;
                     
                    obj_fusion_backward_t.objs_fusion[i].Track_Lat_Distance = obj_rsda_information.objs_RSDA[i].rsda_dx;
                    obj_fusion_backward_t.objs_fusion[i].Track_Long_Distance = obj_rsda_information.objs_RSDA[i].rsda_dy; 


                    obj_fusion_backward_t.objs_fusion[i].Track_Relative_Lat_Velocity = obj_rsda_information.objs_RSDA[i].rsda_vx;
                    obj_fusion_backward_t.objs_fusion[i].Track_Relative_Long_Velocity = obj_rsda_information.objs_RSDA[i].rsda_vy;
                            
                    obj_fusion_backward_t.objs_fusion[i].Track_Height = 3.0;
                    obj_fusion_backward_t.objs_fusion[i].Track_Length = 3.0;
                    obj_fusion_backward_t.objs_fusion[i].Track_Width = 2.5;
                    
                    obj_fusion_backward_t.objs_fusion[i].Track_Age = 1;
                    obj_fusion_backward_t.objs_fusion[i].Track_time_since_update = 1;

                    track_ID++;


                    ICV_LOG_INFO << "Backward Tracker  OBJ_ID :" <<  obj_fusion_backward_t.objs_fusion[i].Track_ID;
                    ICV_LOG_INFO << "Backward Tracker OBJ_Height :" << obj_fusion_backward_t.objs_fusion[i].Track_Height;
                    ICV_LOG_INFO << "Backward Tracker OBJ_Width :" << obj_fusion_backward_t.objs_fusion[i].Track_Width;
                    ICV_LOG_INFO << "Backward Tracker OBJ_Length :" << obj_fusion_backward_t.objs_fusion[i].Track_Length; 
                    ICV_LOG_INFO << "Backward Tracker OBJ_Long_Distance :" <<  obj_fusion_backward_t.objs_fusion[i].Track_Long_Distance ;
                    ICV_LOG_INFO << "Backward Tracker OBJ_Lat_Distance :" <<  obj_fusion_backward_t.objs_fusion[i].Track_Lat_Distance ; 
                    
                    
                }
                else 
                {
                    continue;
                }
            }

            // #ifdef 0
            // if (obj_fusion_t.size() && sizeof(obj_detection))
            // {
            //     int rows = obj_fusion_t.size();
            //     int cols = obj_eq_information.size();
            //     MatrixXd dis_matrix(rows, cols);
            //     vector<vector<int>> dis_matrix_index(rows);
            //     dis_matrix.fill(0.0);
            //     FusionMatch(obj_fusion_t,detections,dis_matrix,dis_matrix_index);
            //     // Update track set.
            //     for (auto track_idx = 0; track_idx < obj_fusion_t.size(); track_idx++){
            //         /* 匹配失败 */
            //         if(dis_matrix_index[track_idx].size()<=0){
            //             mark_missed(obj_fusion_t,track_idx);
            //         }
            //         else if(dis_matrix_index[track_idx].size()==1){
            //             /* 匹配成功 */
            //             kf_update(obj_fusion_t, obj_eq_information, dis_matrix_index[idx]);
            //         }
            //     }
            //     for (auto sensor_idx = 0; sensor_idx < obj_fusion_t.size(); sensor_idx++){
            //         initiate_track(obj_fusion_t,obj_eq_information,detection_idx);
            //     }
            // }
            // #endif

            obj_fusion_backward_information.setvalue(obj_fusion_backward_t);

        }

    // #ifdef 0
    //     void kf_update(OBJ_FUSION obj_fusion_t,OBJ_EQ& obj_eq_information, uint8 track_idx)
    //     {
    //         obj_fusion_t.OBJ_ID = obj_eq_information.OBJ_ID ;
    //         obj_fusion_t.OBJ_Object_Class = obj_eq_information.OBJ_Object_Class;
           
    //         obj_fusion_t.OBJ_Lat_Distance = obj_eq_information.OBJ_Lat_Distance;
    //         obj_fusion_t.OBJ_Long_Distance = obj_eq_information.OBJ_Long_Distance;  
    //         obj_fusion_t.OBJ_Relative_Lat_Velocity = obj_eq_information.OBJ_Relative_Lat_Velocity;
    //         obj_fusion_t.OBJ_Relative_Long_Velocity = obj_eq_information.OBJ_Relative_Long_Velocity ;
    //         obj_fusion_t.OBJ_Relative_Long_Acc = obj_eq_information.OBJ_Relative_Long_Acc;
    //         obj_fusion_t.OBJ_Abs_Lat_Acc= obj_eq_information.OBJ_Abs_Lat_Acc;
    //         obj_fusion_t.OBJ_Abs_Long_Acc= obj_eq_information.OBJ_Abs_Long_Acc;
    //         obj_fusion_t.OBJ_Abs_Lat_Velocity = obj_eq_information.OBJ_Abs_Lat_Velocity;
    //         obj_fusion_t.OBJ_Abs_Long_Velocity = obj_eq_information.OBJ_Abs_Long_Velocity;
    //         obj_fusion_t.OBJ_Abs_Acceleration = obj_eq_information.OBJ_Abs_Acceleration;
                       
    //         obj_fusion_t.OBJ_Height = obj_eq_information.OBJ_Height;
    //         obj_fusion_t.OBJ_Length = obj_eq_information.OBJ_Length;
    //         obj_fusion_t.OBJ_Width = obj_eq_information.OBJ_Width;
    //         obj_fusion_t.OBJ_Existence_Probability = obj_eq_information.OBJ_Existence_Probability;
    //         obj_fusion_t.OBJ_Age = obj_fusion_t.OBJ_Age + 1 ;
    //         obj_fusion_t.OBJ_time_since_update; = obj_fusion_t.OBJ_time_since_update + 1;
    //         obj_fusion_t.OBJ_Motion_Orientation = obj_eq_information.OBJ_Motion_Orientation;
    //         obj_fusion_t.OBJ_Motion_Status = obj_eq_information.OBJ_Motion_Status;
    //         obj_fusion_t.OBJ_Measuring_Status = obj_eq_information.OBJ_Measuring_Status;
    //         obj_fusion_t.OBJ_Motion_Category = obj_eq_information.OBJ_Motion_Category;
        // }


        // mark_missed(OBJ_FUSION obj_fusion_t,uint8 track_idx)
        // {
        //     obj_fusion_t.erase(track_idx);
        // }


        // initiate_track(OBJ_FUSION obj_fusion_t,OBJ_EQ& obj_eq_information, uint8 detection_idx)
        // {
        //     data::icvStructureData<OBJ_FUSION> new_track;
        //     new_track.OBJ_ID = obj_eq_information.OBJ_ID ;
        //     new_track.OBJ_Object_Class = obj_eq_information.OBJ_Object_Class;
           
        //     new_track.OBJ_Lat_Distance = obj_eq_information.OBJ_Lat_Distance;
        //     new_track.OBJ_Long_Distance = obj_eq_information.OBJ_Long_Distance;  
        //     new_track.OBJ_Relative_Lat_Velocity = obj_eq_information.OBJ_Relative_Lat_Velocity;
        //     new_track.OBJ_Relative_Long_Velocity = obj_eq_information.OBJ_Relative_Long_Velocity ;
        //     new_track.OBJ_Relative_Long_Acc = obj_eq_information.OBJ_Relative_Long_Acc;
        //     new_track.OBJ_Abs_Lat_Acc= obj_eq_information.OBJ_Abs_Lat_Acc;
            // new_track.OBJ_Abs_Long_Acc= obj_eq_information.OBJ_Abs_Long_Acc;
            // new_track.OBJ_Abs_Lat_Velocity = obj_eq_information.OBJ_Abs_Lat_Velocity;
            // new_track.OBJ_Abs_Long_Velocity = obj_eq_information.OBJ_Abs_Long_Velocity;
            // new_track.OBJ_Abs_Acceleration = obj_eq_information.OBJ_Abs_Acceleration;
                       
            // new_track.OBJ_Height = obj_eq_information.OBJ_Height;
            // new_track.OBJ_Length = obj_eq_information.OBJ_Length;
            // new_track.OBJ_Width = obj_eq_information.OBJ_Width;
            // new_track.OBJ_Existence_Probability = obj_eq_information.OBJ_Existence_Probability;
      
            // new_track.OBJ_Age = 1;
            // new_track.OBJ_time_since_update = 1;
            // new_track.OBJ_Motion_Orientation = obj_eq_information.OBJ_Motion_Orientation;
            // new_track.OBJ_Motion_Status = obj_eq_information.OBJ_Motion_Status;
            // new_track.OBJ_Measuring_Status = obj_eq_information.OBJ_Measuring_Status;
            // new_track.OBJ_Motion_Category = obj_eq_information.OBJ_Motion_Category;
        
//             obj_fusion_t.push_back(new_track);
//         }
// #endif

        virtual void Execute() override 
        {   
            icvSubscribe("obj_eq",&obj_eq_information);
            icvSubscribe("obj_lrr",&obj_lrr_information);
            icvSubscribe("obj_rsda",&obj_rsda_information);
            icvSubscribe("obj_fsda",&obj_fsda_information);

            obj_eqs = obj_eq_information.getvalue();
            obj_lrrs = obj_lrr_information.getvalue();
            obj_fsdas = obj_fsda_information.getvalue();
            obj_rsdas = obj_rsda_information.getvalue();

            //FusionPredict(obj_fusion_t);
            FusionUpdate_Forward(obj_eqs, obj_lrrs);
            FusionUpdate_Backward(obj_rsdas);

            icvPublish("obj_forward_fusion",&obj_fusion_forward_information);
            icvPublish("obj_backward_fusion",&obj_fusion_backward_information);
        }

    private:
        ICVEQ obj_eq_information;
        ICVLRR obj_lrr_information;
        ICVRSDA obj_rsda_information;
        ICVFSDA obj_fsda_information;

        OBJ_40_EQ obj_eqs;
        OBJ_32_LRR obj_lrrs;
        OBJ_32_FSDA obj_fsdas;
        OBJ_32_RSDA obj_rsdas;

        data::icvStructureData<FUSION_ARRAY> obj_fusion_forward_information;
        data::icvStructureData<FUSION_ARRAY> obj_fusion_backward_information;
        bool send_ = true;
        //data::icvStructureData<OBJ_FUSION> obj_fusion_t;
};
ICV_REGISTER_FUNCTION(FusionTracker)
