# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_navigation_msgs/LaneBoundary.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


from gym_carla.envs.msgs.LanePoint import LanePoint
#from gym_carla.envs.msgs.Lane import Lane
import geometry_msgs.msg

class LaneBoundary(genpy.Message):
  _md5sum = "fa651533f9c7508c5cea4c2a98d9e055"
  _type = "zzz_navigation_msgs/LaneBoundary"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message describe the boundary type of a part of a lane

# Lane boundary point
LanePoint boundary_point

# Boundary type from between `s` and `s` of the next section start
uint8 boundary_type
uint8 BOUNDARY_UNKNOWN = 0
uint8 BOUNDARY_DASHED_WHITE = 1  # neighbour lane has same direction.
uint8 BOUNDARY_DASHED_YELLOW = 2 # neighbour lane has different direction.
uint8 BOUNDARY_SOLID_WHITE = 3   # neighbour lane has same direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW = 4  # neighbour lane has different direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW_TURN = 5  # neighbour lane has different direction, not allowed to change lane unless turning.
uint8 BOUNDARY_CURB = 6          # neighbour is road shoulder

# Confidence of the lane boundary classification
float32 confidence

================================================================================
MSG: zzz_navigation_msgs/LanePoint
# This message describe a road point from polyline represented lane

# The 3D position of the lane point
geometry_msgs/Point position

# ----- Other useful information -----
# Distance from lane start to current point. The distance of the first point should be zero
float32 s

# Slope at current position of the road
# Can be used to control the throttle
float32 slope

# Road curvature at current position of the road
# Can be used to slow down before turning
float32 curvature

# The yaw angle of tangent line (in radian)
float32 tangent

# Road width at current position
# Can be used to determine the carefulness of driving
float32 width

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  BOUNDARY_UNKNOWN = 0
  BOUNDARY_DASHED_WHITE = 1
  BOUNDARY_DASHED_YELLOW = 2
  BOUNDARY_SOLID_WHITE = 3
  BOUNDARY_SOLID_YELLOW = 4
  BOUNDARY_SOLID_YELLOW_TURN = 5
  BOUNDARY_CURB = 6

  __slots__ = ['boundary_point','boundary_type','confidence']
  _slot_types = ['LanePoint','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       boundary_point,boundary_type,confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneBoundary, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.boundary_point is None:
        self.boundary_point = LanePoint()
      if self.boundary_type is None:
        self.boundary_type = 0
      if self.confidence is None:
        self.confidence = 0.
    else:
      self.boundary_point = LanePoint()
      self.boundary_type = 0
      self.confidence = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d5fBf().pack(_x.boundary_point.position.x, _x.boundary_point.position.y, _x.boundary_point.position.z, _x.boundary_point.s, _x.boundary_point.slope, _x.boundary_point.curvature, _x.boundary_point.tangent, _x.boundary_point.width, _x.boundary_type, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.boundary_point is None:
        self.boundary_point = LanePoint()
      end = 0
      _x = self
      start = end
      end += 49
      (_x.boundary_point.position.x, _x.boundary_point.position.y, _x.boundary_point.position.z, _x.boundary_point.s, _x.boundary_point.slope, _x.boundary_point.curvature, _x.boundary_point.tangent, _x.boundary_point.width, _x.boundary_type, _x.confidence,) = _get_struct_3d5fBf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d5fBf().pack(_x.boundary_point.position.x, _x.boundary_point.position.y, _x.boundary_point.position.z, _x.boundary_point.s, _x.boundary_point.slope, _x.boundary_point.curvature, _x.boundary_point.tangent, _x.boundary_point.width, _x.boundary_type, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.boundary_point is None:
        self.boundary_point = LanePoint()
      end = 0
      _x = self
      start = end
      end += 49
      (_x.boundary_point.position.x, _x.boundary_point.position.y, _x.boundary_point.position.z, _x.boundary_point.s, _x.boundary_point.slope, _x.boundary_point.curvature, _x.boundary_point.tangent, _x.boundary_point.width, _x.boundary_type, _x.confidence,) = _get_struct_3d5fBf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d5fBf = None
def _get_struct_3d5fBf():
    global _struct_3d5fBf
    if _struct_3d5fBf is None:
        _struct_3d5fBf = struct.Struct("<3d5fBf")
    return _struct_3d5fBf
