# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zzz_navigation_msgs/Lane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct
sys.path.append('/opt/ros/melodic/lib/python2.7/dist-packages')

#import zzz_navigation_msgs.msg
# import geometry_msgs.msg
from gym_carla.envs.msgs.LaneSituation import LaneSituation
from gym_carla.envs.msgs.LanePoint import LanePoint
from gym_carla.envs.msgs.LaneBoundary import LaneBoundary

class Lane(genpy.Message):
  _md5sum = "b87d7ccccb47d48479acbb3b68d603c9"
  _type = "zzz_navigation_msgs/Lane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message describe a lane with polyline representation

# ----- Basic properties -----
# the rightest lane is 0, reference lane is -1
# TODO: remove this field
int16 index

# Speed limit (km/h)
float32 speed_limit

# Length of the lane. Provided for easy computation
float32 length
float32 width

# Whether this lane allow two way traffic
# This can be true when the road is too narrow or in the center turning lane
bool bidirectional # = False

# The situation when lane ends. This field could be updated with dynamic info.
uint8 stop_state # = 0
uint8 STOP_STATE_UNKNOWN = 0
uint8 STOP_STATE_THRU = 1 # e.g. drive through at lane connection, green light
uint8 STOP_STATE_YIELD = 2 # e.g. unprotected left/right turn, flashing yellow light
uint8 STOP_STATE_STOP = 3 # e.g. red light, yellow light
uint8 STOP_STATE_STOP_YIELD = 4 # e.g. stop sign, right turn at red light
uint8 STOP_STATE_STOP_YIELD_ALL_WAY = 5 # e.g. flashing red light, all way stop sign

# ----- Central path representation -----
# The central_path_points field is used when central_path_type is waypoint.
# Otherwise, central_path_coeffs should be used
LanePoint[] central_path_points
float32[] central_path_coeffs

uint8 central_path_type # = 0
uint8 CENTRAL_PATH_WAYPOINT = 0 # discretized
uint8 CENTRAL_PATH_LINE = 1
uint8 CENTRAL_PATH_CONIC = 2 # conic section, including parabola and hyperbola
uint8 CENTRAL_PATH_POLYNOMIAL = 3 #
uint8 CENTRAL_PATH_BEZIER = 4

# ----- Boundary representation -----
# The boundary description of current lane.
# Not that the boundary type only describe the behaviour from current lane to neighbour lane or road shoulder
LaneBoundary[] left_boundaries
LaneBoundary[] right_boundaries

# ----- Auxiliary information of the lane -----
# Road situations on this line. This field could be updated with dynamic info.
LaneSituation[] situations

================================================================================
MSG: zzz_navigation_msgs/LanePoint
# This message describe a road point from polyline represented lane

# The 3D position of the lane point
geometry_msgs/Point position

# ----- Other useful information -----
# Distance from lane start to current point. The distance of the first point should be zero
float32 s

# Slope at current position of the road
# Can be used to control the throttle
float32 slope

# Road curvature at current position of the road
# Can be used to slow down before turning
float32 curvature

# The yaw angle of tangent line (in radian)
float32 tangent

# Road width at current position
# Can be used to determine the carefulness of driving
float32 width

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: zzz_navigation_msgs/LaneBoundary
# This message describe the boundary type of a part of a lane

# Lane boundary point
LanePoint boundary_point

# Boundary type from between `s` and `s` of the next section start
uint8 boundary_type
uint8 BOUNDARY_UNKNOWN = 0
uint8 BOUNDARY_DASHED_WHITE = 1  # neighbour lane has same direction.
uint8 BOUNDARY_DASHED_YELLOW = 2 # neighbour lane has different direction.
uint8 BOUNDARY_SOLID_WHITE = 3   # neighbour lane has same direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW = 4  # neighbour lane has different direction, not allowed to change lane.
uint8 BOUNDARY_SOLID_YELLOW_TURN = 5  # neighbour lane has different direction, not allowed to change lane unless turning.
uint8 BOUNDARY_CURB = 6          # neighbour is road shoulder

# Confidence of the lane boundary classification
float32 confidence

================================================================================
MSG: zzz_navigation_msgs/LaneSituation
# This message store any uncommon situations on a road
# Situation can be a map specified object or fresh events

# The location of the situation in a lane (distance from lane start)
float32 s

# How long this situation affect along the lane.
# Inf means take effect until lane ends
float32 length

# Type of situation
uint8 situation_type
uint8 SITUATION_NOT_SPECIFIED = 0
uint8 SITUATION_BLOCKED = 1 # Something blocked this lane, vehicle should stop here
uint8 SITUATION_CROSSWALK = 2 # Crosswalk
uint8 SITUATION_REDUCE_SPEED = 3 # Reducing speed is required. This can be due to speed bump, construction, or school bus stop, etc

# ------- Situation information -------
# The new speed limit. Zero means the vehicle is required to stop
float32 reduced_max_speed

# Additional information
string comments
"""
  # Pseudo-constants
  STOP_STATE_UNKNOWN = 0
  STOP_STATE_THRU = 1
  STOP_STATE_YIELD = 2
  STOP_STATE_STOP = 3
  STOP_STATE_STOP_YIELD = 4
  STOP_STATE_STOP_YIELD_ALL_WAY = 5
  CENTRAL_PATH_WAYPOINT = 0
  CENTRAL_PATH_LINE = 1
  CENTRAL_PATH_CONIC = 2
  CENTRAL_PATH_POLYNOMIAL = 3
  CENTRAL_PATH_BEZIER = 4

  __slots__ = ['index','speed_limit','length','width','bidirectional','stop_state','central_path_points','central_path_coeffs','central_path_type','left_boundaries','right_boundaries','situations']
  _slot_types = ['int16','float32','float32','float32','bool','uint8','zzz_navigation_msgs/LanePoint[]','float32[]','uint8','zzz_navigation_msgs/LaneBoundary[]','zzz_navigation_msgs/LaneBoundary[]','zzz_navigation_msgs/LaneSituation[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,speed_limit,length,width,bidirectional,stop_state,central_path_points,central_path_coeffs,central_path_type,left_boundaries,right_boundaries,situations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.bidirectional is None:
        self.bidirectional = False
      if self.stop_state is None:
        self.stop_state = 0
      if self.central_path_points is None:
        self.central_path_points = []
      if self.central_path_coeffs is None:
        self.central_path_coeffs = []
      if self.central_path_type is None:
        self.central_path_type = 0
      if self.left_boundaries is None:
        self.left_boundaries = []
      if self.right_boundaries is None:
        self.right_boundaries = []
      if self.situations is None:
        self.situations = []
    else:
      self.index = 0
      self.speed_limit = 0.
      self.length = 0.
      self.width = 0.
      self.bidirectional = False
      self.stop_state = 0
      self.central_path_points = []
      self.central_path_coeffs = []
      self.central_path_type = 0
      self.left_boundaries = []
      self.right_boundaries = []
      self.situations = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
      length = len(self.central_path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.central_path_points:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
      length = len(self.central_path_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.central_path_coeffs))
      buff.write(_get_struct_B().pack(self.central_path_type))
      length = len(self.left_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_boundaries:
        _v2 = val1.boundary_point
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.right_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_boundaries:
        _v4 = val1.boundary_point
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v4
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.situations)
      buff.write(_struct_I.pack(length))
      for val1 in self.situations:
        _x = val1
        buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.central_path_points is None:
        self.central_path_points = None
      if self.left_boundaries is None:
        self.left_boundaries = None
      if self.right_boundaries is None:
        self.right_boundaries = None
      if self.situations is None:
        self.situations = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
      self.bidirectional = bool(self.bidirectional)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.central_path_points = []
      for i in range(0, length):
        val1 = LanePoint()
        _v6 = val1.position
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        self.central_path_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.central_path_coeffs = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.central_path_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_boundaries = []
      for i in range(0, length):
        val1 = LaneBoundary()
        _v7 = val1.boundary_point
        _v8 = _v7.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v7
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.left_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_boundaries = []
      for i in range(0, length):
        val1 = LaneBoundary()
        _v9 = val1.boundary_point
        _v10 = _v9.position
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v9
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.right_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.situations = []
      for i in range(0, length):
        val1 = LaneSituation()
        _x = val1
        start = end
        end += 13
        (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8')
        else:
          val1.comments = str[start:end]
        self.situations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h3f2B().pack(_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state))
      length = len(self.central_path_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.central_path_points:
        _v11 = val1.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
      length = len(self.central_path_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.central_path_coeffs.tostring())
      buff.write(_get_struct_B().pack(self.central_path_type))
      length = len(self.left_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_boundaries:
        _v12 = val1.boundary_point
        _v13 = _v12.position
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v12
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.right_boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_boundaries:
        _v14 = val1.boundary_point
        _v15 = _v14.position
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v14
        buff.write(_get_struct_5f().pack(_x.s, _x.slope, _x.curvature, _x.tangent, _x.width))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.boundary_type, _x.confidence))
      length = len(self.situations)
      buff.write(_struct_I.pack(length))
      for val1 in self.situations:
        _x = val1
        buff.write(_get_struct_2fBf().pack(_x.s, _x.length, _x.situation_type, _x.reduced_max_speed))
        _x = val1.comments
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.central_path_points is None:
        self.central_path_points = None
      if self.left_boundaries is None:
        self.left_boundaries = None
      if self.right_boundaries is None:
        self.right_boundaries = None
      if self.situations is None:
        self.situations = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.index, _x.speed_limit, _x.length, _x.width, _x.bidirectional, _x.stop_state,) = _get_struct_h3f2B().unpack(str[start:end])
      self.bidirectional = bool(self.bidirectional)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.central_path_points = []
      for i in range(0, length):
        val1 = LanePoint()
        _v16 = val1.position
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        self.central_path_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.central_path_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.central_path_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_boundaries = []
      for i in range(0, length):
        val1 = LaneBoundary()
        _v17 = val1.boundary_point
        _v18 = _v17.position
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v17
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.left_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_boundaries = []
      for i in range(0, length):
        val1 = LaneBoundary()
        _v19 = val1.boundary_point
        _v20 = _v19.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v19
        start = end
        end += 20
        (_x.s, _x.slope, _x.curvature, _x.tangent, _x.width,) = _get_struct_5f().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.boundary_type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
        self.right_boundaries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.situations = []
      for i in range(0, length):
        val1 = LaneSituation()
        _x = val1
        start = end
        end += 13
        (_x.s, _x.length, _x.situation_type, _x.reduced_max_speed,) = _get_struct_2fBf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.comments = str[start:end].decode('utf-8')
        else:
          val1.comments = str[start:end]
        self.situations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_h3f2B = None
def _get_struct_h3f2B():
    global _struct_h3f2B
    if _struct_h3f2B is None:
        _struct_h3f2B = struct.Struct("<h3f2B")
    return _struct_h3f2B
_struct_2fBf = None
def _get_struct_2fBf():
    global _struct_2fBf
    if _struct_2fBf is None:
        _struct_2fBf = struct.Struct("<2fBf")
    return _struct_2fBf
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
