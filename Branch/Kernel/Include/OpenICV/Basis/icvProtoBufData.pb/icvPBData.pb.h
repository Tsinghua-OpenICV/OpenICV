// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icvPBData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icvPBData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icvPBData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icvPBData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icvPBData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_icvPBData_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_icvPBData_2eproto_metadata_getter(int index);
namespace icvPBDataPkg {
class icvPBDataMsg;
struct icvPBDataMsgDefaultTypeInternal;
extern icvPBDataMsgDefaultTypeInternal _icvPBDataMsg_default_instance_;
class icvTestPbMsg;
struct icvTestPbMsgDefaultTypeInternal;
extern icvTestPbMsgDefaultTypeInternal _icvTestPbMsg_default_instance_;
}  // namespace icvPBDataPkg
PROTOBUF_NAMESPACE_OPEN
template<> ::icvPBDataPkg::icvPBDataMsg* Arena::CreateMaybeMessage<::icvPBDataPkg::icvPBDataMsg>(Arena*);
template<> ::icvPBDataPkg::icvTestPbMsg* Arena::CreateMaybeMessage<::icvPBDataPkg::icvTestPbMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icvPBDataPkg {

// ===================================================================

class icvPBDataMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icvPBDataPkg.icvPBDataMsg) */ {
 public:
  inline icvPBDataMsg() : icvPBDataMsg(nullptr) {}
  virtual ~icvPBDataMsg();
  explicit constexpr icvPBDataMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  icvPBDataMsg(const icvPBDataMsg& from);
  icvPBDataMsg(icvPBDataMsg&& from) noexcept
    : icvPBDataMsg() {
    *this = ::std::move(from);
  }

  inline icvPBDataMsg& operator=(const icvPBDataMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline icvPBDataMsg& operator=(icvPBDataMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const icvPBDataMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const icvPBDataMsg* internal_default_instance() {
    return reinterpret_cast<const icvPBDataMsg*>(
               &_icvPBDataMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(icvPBDataMsg& a, icvPBDataMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(icvPBDataMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(icvPBDataMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline icvPBDataMsg* New() const final {
    return CreateMaybeMessage<icvPBDataMsg>(nullptr);
  }

  icvPBDataMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<icvPBDataMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const icvPBDataMsg& from);
  void MergeFrom(const icvPBDataMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(icvPBDataMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icvPBDataPkg.icvPBDataMsg";
  }
  protected:
  explicit icvPBDataMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_icvPBData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 3,
    kLenFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .google.protobuf.Any buffer = 3;
  bool has_buffer() const;
  private:
  bool _internal_has_buffer() const;
  public:
  void clear_buffer();
  const PROTOBUF_NAMESPACE_ID::Any& buffer() const;
  PROTOBUF_NAMESPACE_ID::Any* release_buffer();
  PROTOBUF_NAMESPACE_ID::Any* mutable_buffer();
  void set_allocated_buffer(PROTOBUF_NAMESPACE_ID::Any* buffer);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_buffer() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_buffer();
  public:
  void unsafe_arena_set_allocated_buffer(
      PROTOBUF_NAMESPACE_ID::Any* buffer);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_buffer();

  // uint32 len = 1;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:icvPBDataPkg.icvPBDataMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  PROTOBUF_NAMESPACE_ID::Any* buffer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  friend struct ::TableStruct_icvPBData_2eproto;
};
// -------------------------------------------------------------------

class icvTestPbMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:icvPBDataPkg.icvTestPbMsg) */ {
 public:
  inline icvTestPbMsg() : icvTestPbMsg(nullptr) {}
  virtual ~icvTestPbMsg();
  explicit constexpr icvTestPbMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  icvTestPbMsg(const icvTestPbMsg& from);
  icvTestPbMsg(icvTestPbMsg&& from) noexcept
    : icvTestPbMsg() {
    *this = ::std::move(from);
  }

  inline icvTestPbMsg& operator=(const icvTestPbMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline icvTestPbMsg& operator=(icvTestPbMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const icvTestPbMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const icvTestPbMsg* internal_default_instance() {
    return reinterpret_cast<const icvTestPbMsg*>(
               &_icvTestPbMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(icvTestPbMsg& a, icvTestPbMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(icvTestPbMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(icvTestPbMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline icvTestPbMsg* New() const final {
    return CreateMaybeMessage<icvTestPbMsg>(nullptr);
  }

  icvTestPbMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<icvTestPbMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const icvTestPbMsg& from);
  void MergeFrom(const icvTestPbMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(icvTestPbMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icvPBDataPkg.icvTestPbMsg";
  }
  protected:
  explicit icvTestPbMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_icvPBData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:icvPBDataPkg.icvTestPbMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_icvPBData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// icvPBDataMsg

// uint32 len = 1;
inline bool icvPBDataMsg::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool icvPBDataMsg::has_len() const {
  return _internal_has_len();
}
inline void icvPBDataMsg::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 icvPBDataMsg::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 icvPBDataMsg::len() const {
  // @@protoc_insertion_point(field_get:icvPBDataPkg.icvPBDataMsg.len)
  return _internal_len();
}
inline void icvPBDataMsg::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  len_ = value;
}
inline void icvPBDataMsg::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:icvPBDataPkg.icvPBDataMsg.len)
}

// sint32 timestamp = 2;
inline bool icvPBDataMsg::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool icvPBDataMsg::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void icvPBDataMsg::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 icvPBDataMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 icvPBDataMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:icvPBDataPkg.icvPBDataMsg.timestamp)
  return _internal_timestamp();
}
inline void icvPBDataMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void icvPBDataMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:icvPBDataPkg.icvPBDataMsg.timestamp)
}

// .google.protobuf.Any buffer = 3;
inline bool icvPBDataMsg::_internal_has_buffer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || buffer_ != nullptr);
  return value;
}
inline bool icvPBDataMsg::has_buffer() const {
  return _internal_has_buffer();
}
inline const PROTOBUF_NAMESPACE_ID::Any& icvPBDataMsg::_internal_buffer() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = buffer_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& icvPBDataMsg::buffer() const {
  // @@protoc_insertion_point(field_get:icvPBDataPkg.icvPBDataMsg.buffer)
  return _internal_buffer();
}
inline void icvPBDataMsg::unsafe_arena_set_allocated_buffer(
    PROTOBUF_NAMESPACE_ID::Any* buffer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffer_);
  }
  buffer_ = buffer;
  if (buffer) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:icvPBDataPkg.icvPBDataMsg.buffer)
}
inline PROTOBUF_NAMESPACE_ID::Any* icvPBDataMsg::release_buffer() {
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Any* temp = buffer_;
  buffer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* icvPBDataMsg::unsafe_arena_release_buffer() {
  // @@protoc_insertion_point(field_release:icvPBDataPkg.icvPBDataMsg.buffer)
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Any* temp = buffer_;
  buffer_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* icvPBDataMsg::_internal_mutable_buffer() {
  _has_bits_[0] |= 0x00000001u;
  if (buffer_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    buffer_ = p;
  }
  return buffer_;
}
inline PROTOBUF_NAMESPACE_ID::Any* icvPBDataMsg::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:icvPBDataPkg.icvPBDataMsg.buffer)
  return _internal_mutable_buffer();
}
inline void icvPBDataMsg::set_allocated_buffer(PROTOBUF_NAMESPACE_ID::Any* buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffer_);
  }
  if (buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffer)->GetArena();
    if (message_arena != submessage_arena) {
      buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_ = buffer;
  // @@protoc_insertion_point(field_set_allocated:icvPBDataPkg.icvPBDataMsg.buffer)
}

// -------------------------------------------------------------------

// icvTestPbMsg

// int32 id = 2;
inline bool icvTestPbMsg::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool icvTestPbMsg::has_id() const {
  return _internal_has_id();
}
inline void icvTestPbMsg::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 icvTestPbMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 icvTestPbMsg::id() const {
  // @@protoc_insertion_point(field_get:icvPBDataPkg.icvTestPbMsg.id)
  return _internal_id();
}
inline void icvTestPbMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void icvTestPbMsg::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:icvPBDataPkg.icvTestPbMsg.id)
}

// string name = 1;
inline bool icvTestPbMsg::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool icvTestPbMsg::has_name() const {
  return _internal_has_name();
}
inline void icvTestPbMsg::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& icvTestPbMsg::name() const {
  // @@protoc_insertion_point(field_get:icvPBDataPkg.icvTestPbMsg.name)
  return _internal_name();
}
inline void icvTestPbMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:icvPBDataPkg.icvTestPbMsg.name)
}
inline std::string* icvTestPbMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:icvPBDataPkg.icvTestPbMsg.name)
  return _internal_mutable_name();
}
inline const std::string& icvTestPbMsg::_internal_name() const {
  return name_.Get();
}
inline void icvTestPbMsg::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void icvTestPbMsg::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:icvPBDataPkg.icvTestPbMsg.name)
}
inline void icvTestPbMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:icvPBDataPkg.icvTestPbMsg.name)
}
inline void icvTestPbMsg::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:icvPBDataPkg.icvTestPbMsg.name)
}
inline std::string* icvTestPbMsg::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* icvTestPbMsg::release_name() {
  // @@protoc_insertion_point(field_release:icvPBDataPkg.icvTestPbMsg.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void icvTestPbMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:icvPBDataPkg.icvTestPbMsg.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace icvPBDataPkg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icvPBData_2eproto
